/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGRUBY
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return an integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



#include <ruby.h>

/* Ruby 1.9.1 has a "memoisation optimisation" when compiling with GCC which
 * breaks using rb_intern as an lvalue, as SWIG does.  We work around this
 * issue for now by disabling this.
 * https://sourceforge.net/tracker/?func=detail&aid=2859614&group_id=1645&atid=101645
 */
#ifdef rb_intern
# undef rb_intern
#endif

/* Remove global macros defined in Ruby's win32.h */
#ifdef write
# undef write
#endif
#ifdef read
# undef read
#endif
#ifdef bind
# undef bind
#endif
#ifdef close
# undef close
#endif
#ifdef connect
# undef connect
#endif


/* Ruby 1.7 defines NUM2LL(), LL2NUM() and ULL2NUM() macros */
#ifndef NUM2LL
#define NUM2LL(x) NUM2LONG((x))
#endif
#ifndef LL2NUM
#define LL2NUM(x) INT2NUM((long) (x))
#endif
#ifndef ULL2NUM
#define ULL2NUM(x) UINT2NUM((unsigned long) (x))
#endif

/* Ruby 1.7 doesn't (yet) define NUM2ULL() */
#ifndef NUM2ULL
#ifdef HAVE_LONG_LONG
#define NUM2ULL(x) rb_num2ull((x))
#else
#define NUM2ULL(x) NUM2ULONG(x)
#endif
#endif

/* RSTRING_LEN, etc are new in Ruby 1.9, but ->ptr and ->len no longer work */
/* Define these for older versions so we can just write code the new way */
#ifndef RSTRING_LEN
# define RSTRING_LEN(x) RSTRING(x)->len
#endif
#ifndef RSTRING_PTR
# define RSTRING_PTR(x) RSTRING(x)->ptr
#endif
#ifndef RSTRING_END
# define RSTRING_END(x) (RSTRING_PTR(x) + RSTRING_LEN(x))
#endif
#ifndef RARRAY_LEN
# define RARRAY_LEN(x) RARRAY(x)->len
#endif
#ifndef RARRAY_PTR
# define RARRAY_PTR(x) RARRAY(x)->ptr
#endif
#ifndef RFLOAT_VALUE
# define RFLOAT_VALUE(x) RFLOAT(x)->value
#endif
#ifndef DOUBLE2NUM
# define DOUBLE2NUM(x) rb_float_new(x)
#endif
#ifndef RHASH_TBL
# define RHASH_TBL(x) (RHASH(x)->tbl)
#endif
#ifndef RHASH_ITER_LEV
# define RHASH_ITER_LEV(x) (RHASH(x)->iter_lev)
#endif
#ifndef RHASH_IFNONE
# define RHASH_IFNONE(x) (RHASH(x)->ifnone)
#endif
#ifndef RHASH_SIZE
# define RHASH_SIZE(x) (RHASH(x)->tbl->num_entries)
#endif
#ifndef RHASH_EMPTY_P
# define RHASH_EMPTY_P(x) (RHASH_SIZE(x) == 0)
#endif
#ifndef RSTRUCT_LEN
# define RSTRUCT_LEN(x) RSTRUCT(x)->len
#endif
#ifndef RSTRUCT_PTR
# define RSTRUCT_PTR(x) RSTRUCT(x)->ptr
#endif



/*
 * Need to be very careful about how these macros are defined, especially
 * when compiling C++ code or C code with an ANSI C compiler.
 *
 * VALUEFUNC(f) is a macro used to typecast a C function that implements
 * a Ruby method so that it can be passed as an argument to API functions
 * like rb_define_method() and rb_define_singleton_method().
 *
 * VOIDFUNC(f) is a macro used to typecast a C function that implements
 * either the "mark" or "free" stuff for a Ruby Data object, so that it
 * can be passed as an argument to API functions like Data_Wrap_Struct()
 * and Data_Make_Struct().
 */
 
#ifdef __cplusplus
#  ifndef RUBY_METHOD_FUNC /* These definitions should work for Ruby 1.4.6 */
#    define PROTECTFUNC(f) ((VALUE (*)()) f)
#    define VALUEFUNC(f) ((VALUE (*)()) f)
#    define VOIDFUNC(f)  ((void (*)()) f)
#  else
#    ifndef ANYARGS /* These definitions should work for Ruby 1.6 */
#      define PROTECTFUNC(f) ((VALUE (*)()) f)
#      define VALUEFUNC(f) ((VALUE (*)()) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    else /* These definitions should work for Ruby 1.7+ */
#      define PROTECTFUNC(f) ((VALUE (*)(VALUE)) f)
#      define VALUEFUNC(f) ((VALUE (*)(ANYARGS)) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    endif
#  endif
#else
#  define VALUEFUNC(f) (f)
#  define VOIDFUNC(f) (f)
#endif

/* Don't use for expressions have side effect */
#ifndef RB_STRING_VALUE
#define RB_STRING_VALUE(s) (TYPE(s) == T_STRING ? (s) : (*(volatile VALUE *)&(s) = rb_str_to_str(s)))
#endif
#ifndef StringValue
#define StringValue(s) RB_STRING_VALUE(s)
#endif
#ifndef StringValuePtr
#define StringValuePtr(s) RSTRING_PTR(RB_STRING_VALUE(s))
#endif
#ifndef StringValueLen
#define StringValueLen(s) RSTRING_LEN(RB_STRING_VALUE(s))
#endif
#ifndef SafeStringValue
#define SafeStringValue(v) do {\
    StringValue(v);\
    rb_check_safe_str(v);\
} while (0)
#endif

#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
#define rb_define_alloc_func(klass, func) rb_define_singleton_method((klass), "new", VALUEFUNC((func)), -1)
#define rb_undef_alloc_func(klass) rb_undef_method(CLASS_OF((klass)), "new")
#endif

static VALUE _mSWIG = Qnil;

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */


/* Define some additional error types */
#define SWIG_ObjectPreviouslyDeletedError  -100


/* Define custom exceptions for errors that do not map to existing Ruby
   exceptions.  Note this only works for C++ since a global cannot be
   initialized by a function in C.  For C, fallback to rb_eRuntimeError.*/

SWIGINTERN VALUE 
getNullReferenceError(void) {
  static int init = 0;
  static VALUE rb_eNullReferenceError ;
  if (!init) {
    init = 1;
    rb_eNullReferenceError = rb_define_class("NullReferenceError", rb_eRuntimeError);
  }
  return rb_eNullReferenceError;
} 

SWIGINTERN VALUE 
getObjectPreviouslyDeletedError(void) {
  static int init = 0;
  static VALUE rb_eObjectPreviouslyDeleted ;
  if (!init) {
    init = 1;
    rb_eObjectPreviouslyDeleted = rb_define_class("ObjectPreviouslyDeleted", rb_eRuntimeError);
  }
  return rb_eObjectPreviouslyDeleted;
} 


SWIGINTERN VALUE
SWIG_Ruby_ErrorType(int SWIG_code) {
  VALUE type;
  switch (SWIG_code) {
  case SWIG_MemoryError:
    type = rb_eNoMemError;
    break;
  case SWIG_IOError:
    type = rb_eIOError;
    break;
  case SWIG_RuntimeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_IndexError:
    type = rb_eIndexError;
    break;
  case SWIG_TypeError:
    type = rb_eTypeError;
    break;
  case SWIG_DivisionByZero:
    type = rb_eZeroDivError;
    break;
  case SWIG_OverflowError:
    type = rb_eRangeError;
    break;
  case SWIG_SyntaxError:
    type = rb_eSyntaxError;
    break;
  case SWIG_ValueError:
    type = rb_eArgError;
    break;
  case SWIG_SystemError:
    type = rb_eFatal;
    break;
  case SWIG_AttributeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_NullReferenceError:
    type = getNullReferenceError();
    break;
  case SWIG_ObjectPreviouslyDeletedError:
    type = getObjectPreviouslyDeletedError();
    break;
  case SWIG_UnknownError:
    type = rb_eRuntimeError;
    break;
  default:
    type = rb_eRuntimeError;
  }
  return type;
}


/* This function is called when a user inputs a wrong argument to
   a method.
 */
SWIGINTERN 
const char* Ruby_Format_TypeError( const char* msg,
				   const char* type, 
				   const char* name, 
				   const int argn,
				   VALUE input )
{
  char buf[128];
  VALUE str;
  VALUE asStr;
  if ( msg && *msg )
    {
      str = rb_str_new2(msg);
    }
  else
    {
      str = rb_str_new(NULL, 0);
    }

  str = rb_str_cat2( str, "Expected argument " );
  sprintf( buf, "%d of type ", argn-1 );
  str = rb_str_cat2( str, buf );
  str = rb_str_cat2( str, type );
  str = rb_str_cat2( str, ", but got " );
  str = rb_str_cat2( str, rb_obj_classname(input) );
  str = rb_str_cat2( str, " " );
  asStr = rb_inspect(input);
  if ( RSTRING_LEN(asStr) > 30 )
    {
      str = rb_str_cat( str, StringValuePtr(asStr), 30 );
      str = rb_str_cat2( str, "..." );
    }
  else
    {
      str = rb_str_append( str, asStr );
    }

  if ( name )
    {
      str = rb_str_cat2( str, "\n\tin SWIG method '" );
      str = rb_str_cat2( str, name );
      str = rb_str_cat2( str, "'" );
    }

  return StringValuePtr( str );
}

/* This function is called when an overloaded method fails */
SWIGINTERN 
void Ruby_Format_OverloadedError(
				 const int argc,
				 const int maxargs,
				 const char* method, 
				 const char* prototypes 
				 )
{
  const char* msg = "Wrong # of arguments";
  if ( argc <= maxargs ) msg = "Wrong arguments";
  rb_raise(rb_eArgError,"%s for overloaded method '%s'.\n"  
	   "Possible C/C++ prototypes are:\n%s",
	   msg, method, prototypes);
}

/* -----------------------------------------------------------------------------
 * rubytracking.swg
 *
 * This file contains support for tracking mappings from 
 * Ruby objects to C++ objects.  This functionality is needed
 * to implement mark functions for Ruby's mark and sweep
 * garbage collector.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* Ruby 1.8 actually assumes the first case. */
#if SIZEOF_VOIDP == SIZEOF_LONG
#  define SWIG2NUM(v) LONG2NUM((unsigned long)v)
#  define NUM2SWIG(x) (unsigned long)NUM2LONG(x)
#elif SIZEOF_VOIDP == SIZEOF_LONG_LONG
#  define SWIG2NUM(v) LL2NUM((unsigned long long)v)
#  define NUM2SWIG(x) (unsigned long long)NUM2LL(x)
#else
#  error sizeof(void*) is not the same as long or long long
#endif


/* Global Ruby hash table to store Trackings from C/C++
   structs to Ruby Objects. 
*/
static VALUE swig_ruby_trackings = Qnil;

/* Global variable that stores a reference to the ruby
   hash table delete function. */
static ID swig_ruby_hash_delete;

/* Setup a Ruby hash table to store Trackings */
SWIGRUNTIME void SWIG_RubyInitializeTrackings(void) {
  /* Create a ruby hash table to store Trackings from C++ 
     objects to Ruby objects. */

  /* Try to see if some other .so has already created a 
     tracking hash table, which we keep hidden in an instance var
     in the SWIG module.
     This is done to allow multiple DSOs to share the same
     tracking table.
  */
  ID trackings_id = rb_intern( "@__trackings__" );
  VALUE verbose = rb_gv_get("VERBOSE");
  rb_gv_set("VERBOSE", Qfalse);
  swig_ruby_trackings = rb_ivar_get( _mSWIG, trackings_id );
  rb_gv_set("VERBOSE", verbose);

  /* No, it hasn't.  Create one ourselves */ 
  if ( swig_ruby_trackings == Qnil )
    {
      swig_ruby_trackings = rb_hash_new();
      rb_ivar_set( _mSWIG, trackings_id, swig_ruby_trackings );
    }

  /* Now store a reference to the hash table delete function
     so that we only have to look it up once.*/
  swig_ruby_hash_delete = rb_intern("delete");
}

/* Get a Ruby number to reference a pointer */
SWIGRUNTIME VALUE SWIG_RubyPtrToReference(void* ptr) {
  /* We cast the pointer to an unsigned long
     and then store a reference to it using
     a Ruby number object. */

  /* Convert the pointer to a Ruby number */
  return SWIG2NUM(ptr);
}

/* Get a Ruby number to reference an object */
SWIGRUNTIME VALUE SWIG_RubyObjectToReference(VALUE object) {
  /* We cast the object to an unsigned long
     and then store a reference to it using
     a Ruby number object. */

  /* Convert the Object to a Ruby number */
  return SWIG2NUM(object);
}

/* Get a Ruby object from a previously stored reference */
SWIGRUNTIME VALUE SWIG_RubyReferenceToObject(VALUE reference) {
  /* The provided Ruby number object is a reference
     to the Ruby object we want.*/

  /* Convert the Ruby number to a Ruby object */
  return NUM2SWIG(reference);
}

/* Add a Tracking from a C/C++ struct to a Ruby object */
SWIGRUNTIME void SWIG_RubyAddTracking(void* ptr, VALUE object) {
  /* In a Ruby hash table we store the pointer and
     the associated Ruby object.  The trick here is
     that we cannot store the Ruby object directly - if
     we do then it cannot be garbage collected.  So
     instead we typecast it as a unsigned long and
     convert it to a Ruby number object.*/

  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Get a reference to the Ruby object as a Ruby number */
  VALUE value = SWIG_RubyObjectToReference(object);

  /* Store the mapping to the global hash table. */
  rb_hash_aset(swig_ruby_trackings, key, value);
}

/* Get the Ruby object that owns the specified C/C++ struct */
SWIGRUNTIME VALUE SWIG_RubyInstanceFor(void* ptr) {
  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Now lookup the value stored in the global hash table */
  VALUE value = rb_hash_aref(swig_ruby_trackings, key);
	
  if (value == Qnil) {
    /* No object exists - return nil. */
    return Qnil;
  }
  else {
    /* Convert this value to Ruby object */
    return SWIG_RubyReferenceToObject(value);
  }
}

/* Remove a Tracking from a C/C++ struct to a Ruby object.  It
   is very important to remove objects once they are destroyed
   since the same memory address may be reused later to create
   a new object. */
SWIGRUNTIME void SWIG_RubyRemoveTracking(void* ptr) {
  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Delete the object from the hash table by calling Ruby's
     do this we need to call the Hash.delete method.*/
  rb_funcall(swig_ruby_trackings, swig_ruby_hash_delete, 1, key);
}

/* This is a helper method that unlinks a Ruby object from its
   underlying C++ object.  This is needed if the lifetime of the
   Ruby object is longer than the C++ object */
SWIGRUNTIME void SWIG_RubyUnlinkObjects(void* ptr) {
  VALUE object = SWIG_RubyInstanceFor(ptr);

  if (object != Qnil) {
    DATA_PTR(object) = 0;
  }
}


#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * Ruby API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

SWIGINTERN VALUE
SWIG_Ruby_AppendOutput(VALUE target, VALUE o) {
  if (NIL_P(target)) {
    target = o;
  } else {
    if (TYPE(target) != T_ARRAY) {
      VALUE o2 = target;
      target = rb_ary_new();
      rb_ary_push(target, o2);
    }
    rb_ary_push(target, o);
  }
  return target;
}

/* For ruby1.8.4 and earlier. */
#ifndef RUBY_INIT_STACK
   RUBY_EXTERN void Init_stack(VALUE* addr);
#  define RUBY_INIT_STACK \
   VALUE variable_in_this_stack_frame; \
   Init_stack(&variable_in_this_stack_frame);
#endif


#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * rubyrun.swg
 *
 * This file contains the runtime support for Ruby modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0

/* for raw pointers */
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Ruby_NewPointerObj(ptr, type, flags)
#define SWIG_AcquirePtr(ptr, own)                       SWIG_Ruby_AcquirePtr(ptr, own)
#define swig_owntype                                    ruby_owntype

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Ruby_GetModule()	
#define SWIG_SetModule(clientdata, pointer) 		SWIG_Ruby_SetModule(pointer)


/* Error manipulation */

#define SWIG_ErrorType(code)                            SWIG_Ruby_ErrorType(code)               
#define SWIG_Error(code, msg)            		rb_raise(SWIG_Ruby_ErrorType(code), "%s", msg)
#define SWIG_fail                        		goto fail				 


/* Ruby-specific SWIG API */

#define SWIG_InitRuntime()                              SWIG_Ruby_InitRuntime()              
#define SWIG_define_class(ty)                        	SWIG_Ruby_define_class(ty)
#define SWIG_NewClassInstance(value, ty)             	SWIG_Ruby_NewClassInstance(value, ty)
#define SWIG_MangleStr(value)                        	SWIG_Ruby_MangleStr(value)		  
#define SWIG_CheckConvert(value, ty)                 	SWIG_Ruby_CheckConvert(value, ty)	  

#include "assert.h"

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

typedef struct {
  VALUE klass;
  VALUE mImpl;
  void  (*mark)(void *);
  void  (*destroy)(void *);
  int trackObjects;
} swig_class;


/* Global pointer used to keep some internal SWIG stuff */
static VALUE _cSWIG_Pointer = Qnil;
static VALUE swig_runtime_data_type_pointer = Qnil;

/* Global IDs used to keep some internal SWIG stuff */
static ID swig_arity_id = 0;
static ID swig_call_id  = 0;

/*
  If your swig extension is to be run within an embedded ruby and has
  director callbacks, you should set -DRUBY_EMBEDDED during compilation.  
  This will reset ruby's stack frame on each entry point from the main 
  program the first time a virtual director function is invoked (in a 
  non-recursive way).
  If this is not done, you run the risk of Ruby trashing the stack.
*/

#ifdef RUBY_EMBEDDED

#  define SWIG_INIT_STACK                            \
      if ( !swig_virtual_calls ) { RUBY_INIT_STACK } \
      ++swig_virtual_calls;
#  define SWIG_RELEASE_STACK --swig_virtual_calls;
#  define Ruby_DirectorTypeMismatchException(x) \
          rb_raise( rb_eTypeError, "%s", x ); return c_result;

      static unsigned int swig_virtual_calls = 0;

#else  /* normal non-embedded extension */

#  define SWIG_INIT_STACK
#  define SWIG_RELEASE_STACK
#  define Ruby_DirectorTypeMismatchException(x) \
          throw Swig::DirectorTypeMismatchException( x );

#endif  /* RUBY_EMBEDDED */


SWIGRUNTIME VALUE 
getExceptionClass(void) {
  static int init = 0;
  static VALUE rubyExceptionClass ;
  if (!init) {
    init = 1;
    rubyExceptionClass = rb_const_get(_mSWIG, rb_intern("Exception"));
  }
  return rubyExceptionClass;
} 

/* This code checks to see if the Ruby object being raised as part
   of an exception inherits from the Ruby class Exception.  If so,
   the object is simply returned.  If not, then a new Ruby exception
   object is created and that will be returned to Ruby.*/
SWIGRUNTIME VALUE
SWIG_Ruby_ExceptionType(swig_type_info *desc, VALUE obj) {
  VALUE exceptionClass = getExceptionClass();
  if (rb_obj_is_kind_of(obj, exceptionClass)) {
    return obj;
  }  else {
    return rb_exc_new3(rb_eRuntimeError, rb_obj_as_string(obj));
  }
}

/* Initialize Ruby runtime support */
SWIGRUNTIME void
SWIG_Ruby_InitRuntime(void)
{
  if (_mSWIG == Qnil) {
    _mSWIG = rb_define_module("SWIG");
    swig_call_id  = rb_intern("call");
    swig_arity_id = rb_intern("arity");
  }
}

/* Define Ruby class for C type */
SWIGRUNTIME void
SWIG_Ruby_define_class(swig_type_info *type)
{
  VALUE klass;
  char *klass_name = (char *) malloc(4 + strlen(type->name) + 1);
  sprintf(klass_name, "TYPE%s", type->name);
  if (NIL_P(_cSWIG_Pointer)) {
    _cSWIG_Pointer = rb_define_class_under(_mSWIG, "Pointer", rb_cObject);
    rb_undef_method(CLASS_OF(_cSWIG_Pointer), "new");
  }
  klass = rb_define_class_under(_mSWIG, klass_name, _cSWIG_Pointer);
  free((void *) klass_name);
}

/* Create a new pointer object */
SWIGRUNTIME VALUE
SWIG_Ruby_NewPointerObj(void *ptr, swig_type_info *type, int flags)
{
  int own =  flags & SWIG_POINTER_OWN; 
  int track;
  char *klass_name;
  swig_class *sklass;
  VALUE klass;
  VALUE obj;
  
  if (!ptr)
    return Qnil;
  
  if (type->clientdata) {
    sklass = (swig_class *) type->clientdata;
		
    /* Are we tracking this class and have we already returned this Ruby object? */
    track = sklass->trackObjects;
    if (track) {
      obj = SWIG_RubyInstanceFor(ptr);
      
      /* Check the object's type and make sure it has the correct type.
        It might not in cases where methods do things like 
        downcast methods. */
      if (obj != Qnil) {
        VALUE value = rb_iv_get(obj, "@__swigtype__");
        char* type_name = RSTRING_PTR(value);
				
        if (strcmp(type->name, type_name) == 0) {
          return obj;
        }
      }
    }

    /* Create a new Ruby object */
    obj = Data_Wrap_Struct(sklass->klass, VOIDFUNC(sklass->mark), 
			   ( own ? VOIDFUNC(sklass->destroy) : 
			     (track ? VOIDFUNC(SWIG_RubyRemoveTracking) : 0 )
			     ), ptr);

    /* If tracking is on for this class then track this object. */
    if (track) {
      SWIG_RubyAddTracking(ptr, obj);
    }
  } else {
    klass_name = (char *) malloc(4 + strlen(type->name) + 1);
    sprintf(klass_name, "TYPE%s", type->name);
    klass = rb_const_get(_mSWIG, rb_intern(klass_name));
    free((void *) klass_name);
    obj = Data_Wrap_Struct(klass, 0, 0, ptr);
  }
  rb_iv_set(obj, "@__swigtype__", rb_str_new2(type->name));
  
  return obj;
}

/* Create a new class instance (always owned) */
SWIGRUNTIME VALUE
SWIG_Ruby_NewClassInstance(VALUE klass, swig_type_info *type)
{
  VALUE obj;
  swig_class *sklass = (swig_class *) type->clientdata;
  obj = Data_Wrap_Struct(klass, VOIDFUNC(sklass->mark), VOIDFUNC(sklass->destroy), 0);
  rb_iv_set(obj, "@__swigtype__", rb_str_new2(type->name));
  return obj;
}

/* Get type mangle from class name */
SWIGRUNTIMEINLINE char *
SWIG_Ruby_MangleStr(VALUE obj)
{
  VALUE stype = rb_iv_get(obj, "@__swigtype__");
  return StringValuePtr(stype);
}

/* Acquire a pointer value */
typedef void (*ruby_owntype)(void*);

SWIGRUNTIME ruby_owntype
SWIG_Ruby_AcquirePtr(VALUE obj, ruby_owntype own) {
  if (obj) {
    ruby_owntype oldown = RDATA(obj)->dfree;
    RDATA(obj)->dfree = own;
    return oldown;
  } else {
    return 0;
  }
}

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPtrAndOwn(VALUE obj, void **ptr, swig_type_info *ty, int flags, ruby_owntype *own)
{
  char *c;
  swig_cast_info *tc;
  void *vptr = 0;

  /* Grab the pointer */
  if (NIL_P(obj)) {
    *ptr = 0;
    return SWIG_OK;
  } else {
    if (TYPE(obj) != T_DATA) {
      return SWIG_ERROR;
    }
    Data_Get_Struct(obj, void, vptr);
  }
  
  if (own) *own = RDATA(obj)->dfree;
    
  /* Check to see if the input object is giving up ownership
     of the underlying C struct or C++ object.  If so then we
     need to reset the destructor since the Ruby object no 
     longer owns the underlying C++ object.*/ 
  if (flags & SWIG_POINTER_DISOWN) {
    /* Is tracking on for this class? */
    int track = 0;
    if (ty && ty->clientdata) {
      swig_class *sklass = (swig_class *) ty->clientdata;
      track = sklass->trackObjects;
    }
		
    if (track) {
      /* We are tracking objects for this class.  Thus we change the destructor
       * to SWIG_RubyRemoveTracking.  This allows us to
       * remove the mapping from the C++ to Ruby object
       * when the Ruby object is garbage collected.  If we don't
       * do this, then it is possible we will return a reference 
       * to a Ruby object that no longer exists thereby crashing Ruby. */
      RDATA(obj)->dfree = SWIG_RubyRemoveTracking;
    } else {    
      RDATA(obj)->dfree = 0;
    }
  }

  /* Do type-checking if type info was provided */
  if (ty) {
    if (ty->clientdata) {
      if (rb_obj_is_kind_of(obj, ((swig_class *) (ty->clientdata))->klass)) {
        if (vptr == 0) {
          /* The object has already been deleted */
          return SWIG_ObjectPreviouslyDeletedError;
        }
        *ptr = vptr;
        return SWIG_OK;
      }
    }
    if ((c = SWIG_MangleStr(obj)) == NULL) {
      return SWIG_ERROR;
    }
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) {
      return SWIG_ERROR;
    } else {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc, vptr, &newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    }
  } else {
    *ptr = vptr;
  }
  
  return SWIG_OK;
}

/* Check convert */
SWIGRUNTIMEINLINE int
SWIG_Ruby_CheckConvert(VALUE obj, swig_type_info *ty)
{
  char *c = SWIG_MangleStr(obj);
  if (!c) return 0;
  return SWIG_TypeCheck(c,ty) != 0;
}

SWIGRUNTIME VALUE
SWIG_Ruby_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r, ptr, sz);
  strcpy(r, type->name);
  return rb_str_new2(result);
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPacked(VALUE obj, void *ptr, int sz, swig_type_info *ty) {
  swig_cast_info *tc;
  const char  *c;

  if (TYPE(obj) != T_STRING) goto type_error;
  c = StringValuePtr(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c, ptr, sz);
  if (ty) {
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) goto type_error;
  }
  return SWIG_OK;

 type_error:
  return SWIG_ERROR;
}

SWIGRUNTIME swig_module_info *
SWIG_Ruby_GetModule(void)
{
  VALUE pointer;
  swig_module_info *ret = 0;
  VALUE verbose = rb_gv_get("VERBOSE");

 /* temporarily disable warnings, since the pointer check causes warnings with 'ruby -w' */
  rb_gv_set("VERBOSE", Qfalse);
  
  /* first check if pointer already created */
  pointer = rb_gv_get("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  if (pointer != Qnil) {
    Data_Get_Struct(pointer, swig_module_info, ret);
  }

  /* reinstate warnings */
  rb_gv_set("VERBOSE", verbose);
  return ret;
}

SWIGRUNTIME void 
SWIG_Ruby_SetModule(swig_module_info *pointer)
{
  /* register a new class */
  VALUE cl = rb_define_class("swig_runtime_data", rb_cObject);
  /* create and store the structure pointer to a global variable */
  swig_runtime_data_type_pointer = Data_Wrap_Struct(cl, 0, 0, pointer);
  rb_define_readonly_variable("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, &swig_runtime_data_type_pointer);
}

/* This function can be used to check whether a proc or method or similarly
   callable function has been passed.  Usually used in a %typecheck, like:

   %typecheck(c_callback_t, precedence=SWIG_TYPECHECK_POINTER) {
        $result = SWIG_Ruby_isCallable( $input );
   }
 */
SWIGINTERN
int SWIG_Ruby_isCallable( VALUE proc )
{
  if ( rb_respond_to( proc, swig_call_id ) == Qtrue )
    return 1;
  return 0;
}

/* This function can be used to check the arity (number of arguments)
   a proc or method can take.  Usually used in a %typecheck.
   Valid arities will be that equal to minimal or those < 0
   which indicate a variable number of parameters at the end.
 */
SWIGINTERN
int SWIG_Ruby_arity( VALUE proc, int minimal )
{
  if ( rb_respond_to( proc, swig_arity_id ) == Qtrue )
    {
      VALUE num = rb_funcall( proc, swig_arity_id, 0 );
      int arity = NUM2INT(num);
      if ( arity < 0 && (arity+1) < -minimal ) return 1;
      if ( arity == minimal ) return 1;
      return 1;
    }
  return 0;
}


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg);; } while(0) 

/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes that proxy
 * method calls from C++ to Ruby extensions.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_NOUEH if you prefer to avoid the use of the
  Undefined Exception Handler provided by swift
*/
#ifndef SWIG_DIRECTOR_NOUEH
#ifndef SWIG_DIRECTOR_UEH
#define SWIG_DIRECTOR_UEH
#endif
#endif

#ifdef __cplusplus

#include <string>
#include <iostream>
#include <map>

# define SWIG_DIRECTOR_CAST(ARG) dynamic_cast<Swig::Director *>(ARG)

namespace Swig {
  /* memory handler */
  struct GCItem 
  {
    virtual ~GCItem()
    {
    }

    virtual ruby_owntype get_own() const
    {
      return 0;
    }
  };
  
  struct GCItem_var
  {
    GCItem_var(GCItem *item = 0) : _item(item)
    {
    }

    GCItem_var& operator=(GCItem *item)
    {
      GCItem *tmp = _item;
      _item = item;
      delete tmp;
      return *this;
    }
    
    ~GCItem_var() 
    {
      delete _item;
    }
    
    GCItem * operator->() const
    {
      return _item;
    }
    
  private:
    GCItem *_item;
  };


  template <typename Type>
  struct GCItem_T : GCItem
  {
    GCItem_T(Type *ptr) : _ptr(ptr)
    {
    }
    
    virtual ~GCItem_T() 
    {
      delete _ptr;
    }
    
  private:
    Type *_ptr;
  };

  struct GCItem_Object : GCItem
  {
    GCItem_Object(ruby_owntype own) : _own(own)
    {
    }
    
    virtual ~GCItem_Object() 
    {
    }

    ruby_owntype get_own() const
    {
      return _own;
    }
    
  private:
    ruby_owntype _own;
  };


  template <typename Type>
  struct GCArray_T : GCItem
  {
    GCArray_T(Type *ptr) : _ptr(ptr)
    {
    }
    
    virtual ~GCArray_T() 
    {
      delete[] _ptr;
    }
    
  private:
    Type *_ptr;
  };


  /* body args */
  struct body_args {
    VALUE recv;
    ID id;
    int argc;
    VALUE *argv;
  };
  
  /* Base class for director exceptions */
  class DirectorException {
  protected:
    VALUE swig_error;
    std::string swig_msg;
  protected:
    DirectorException(VALUE error)
      : swig_error(error)
    {
    }
    
    DirectorException(VALUE error, const char* hdr, const char* msg ="") 
      : swig_error(error), swig_msg(hdr) {
      if (strlen(msg)) {
	swig_msg += " ";
	swig_msg += msg;
      }
      if (swig_msg.size()) {
	VALUE str = rb_str_new(swig_msg.data(), swig_msg.size());
	swig_error = rb_exc_new3(error, str);
      } else {
	swig_error = error;
      }
    }
  public:
    VALUE getType() const  { 
      return CLASS_OF(swig_error); 
    }
    VALUE getError() const {
      return swig_error;
    }
    const std::string& getMessage() const 
    {
      return swig_msg;
    }
    
    virtual ~DirectorException() {}
  };
  
  /* unknown exception handler  */

  class UnknownExceptionHandler 
  {
#ifdef SWIG_DIRECTOR_UEH
    static void handler() {
      try {
	throw;
      } catch (DirectorException& e) {
	std::cerr << "SWIG Director exception caught:" << std::endl
		  << e.getMessage() << std::endl;
      } catch (std::exception& e) {
	std::cerr << "std::exception caught: "<< e.what() << std::endl;
      } catch (...) {
	std::cerr << "Unknown exception caught." << std::endl;
      }      
      std::cerr << std::endl
		<< "Ruby interpreter traceback:" << std::endl;
      std::cerr << std::endl;      
      std::cerr << "This exception was caught by the SWIG unexpected exception handler." << std::endl
		<< "Try using %feature(\"director:except\") to avoid reaching this point." << std::endl
		<< std::endl
		<< "Exception is being re-thrown, program will like abort/terminate." << std::endl;
      throw;
    }
    
  public:    
    std::unexpected_handler old;
    UnknownExceptionHandler(std::unexpected_handler nh = handler)
    {
      old = std::set_unexpected(nh);
    }

    ~UnknownExceptionHandler()
    {
      std::set_unexpected(old);
    }
#endif
  };


  /* Type mismatch in the return value from a Ruby method call */
  class DirectorTypeMismatchException : public Swig::DirectorException {
  public:
    DirectorTypeMismatchException(VALUE error, const char *msg="")
      : Swig::DirectorException(error, "SWIG director type mismatch", msg) 
    {
    }

    DirectorTypeMismatchException(const char *msg="")
      : Swig::DirectorException(rb_eTypeError, "SWIG director type mismatch", msg) 
    {
    }

    static void raise(VALUE error, const char *msg) {
      throw DirectorTypeMismatchException(error, msg);
    }

    static void raise(const char *msg) {
      throw DirectorTypeMismatchException(msg);
    }
  };

  /* Any Ruby exception that occurs during a director method call */
  class DirectorMethodException : public Swig::DirectorException {
  public:
    DirectorMethodException(VALUE error) 
      : Swig::DirectorException(error) {
    }

    DirectorMethodException(const char* msg = "") 
      : Swig::DirectorException(rb_eRuntimeError, "SWIG director method error.", msg) {
    }
    
    static void raise(VALUE error)
    {
      throw DirectorMethodException(error);
    }    
  };

  /* Attempted to call a pure virtual method via a director method */
  class DirectorPureVirtualException : public Swig::DirectorException
  {
  public:
    DirectorPureVirtualException(const char* msg = "") 
      : DirectorException(rb_eRuntimeError, "SWIG director pure virtual method called", msg)
    { 
    }

    static void raise(const char *msg) 
    {
      throw DirectorPureVirtualException(msg);
    }
  };

  /* Simple thread abstraction for pthreads on win32 */
#ifdef __THREAD__
# define __PTHREAD__
# if defined(_WIN32) || defined(__WIN32__)
#  define pthread_mutex_lock EnterCriticalSection
#  define pthread_mutex_unlock LeaveCriticalSection
#  define pthread_mutex_t CRITICAL_SECTION
#  define SWIG_MUTEX_INIT(var) var
# else
#  include <pthread.h>
#  define SWIG_MUTEX_INIT(var) var = PTHREAD_MUTEX_INITIALIZER 
# endif
#endif

#ifdef  __PTHREAD__
  struct Guard
  {
    pthread_mutex_t *_mutex;
    
    Guard(pthread_mutex_t &mutex) : _mutex(&mutex)
    {
      pthread_mutex_lock(_mutex);
    }
    
    ~Guard()
    {
      pthread_mutex_unlock(_mutex);
    }
  };
# define SWIG_GUARD(mutex) Guard _guard(mutex)
#else
# define SWIG_GUARD(mutex) 
#endif

  /* director base class */
  class Director {
  private:
    /* pointer to the wrapped Ruby object */
    VALUE swig_self;
    /* flag indicating whether the object is owned by Ruby or c++ */
    mutable bool swig_disown_flag;

  public:
    /* wrap a Ruby object, optionally taking ownership */
    Director(VALUE self) : swig_self(self), swig_disown_flag(false) {
    }

    /* discard our reference at destruction */
    virtual ~Director() {
    }

    /* return a pointer to the wrapped Ruby object */
    VALUE swig_get_self() const { 
      return swig_self; 
    }

    /* acquire ownership of the wrapped Ruby object (the sense of "disown"
     * is from Ruby) */
    void swig_disown() const { 
      if (!swig_disown_flag) { 
        swig_disown_flag = true;
      } 
    }

  /* ownership management */
  private:
    typedef std::map<void*, GCItem_var> swig_ownership_map;
    mutable swig_ownership_map swig_owner;
#ifdef __PTHREAD__
    static pthread_mutex_t swig_mutex_own;
#endif

  public:
    template <typename Type>
    void swig_acquire_ownership_array(Type *vptr)  const
    {
      if (vptr) {
	SWIG_GUARD(swig_mutex_own);
	swig_owner[vptr] = new GCArray_T<Type>(vptr);
      }
    }
    
    template <typename Type>
    void swig_acquire_ownership(Type *vptr)  const
    {
      if (vptr) {	
	SWIG_GUARD(swig_mutex_own);
	swig_owner[vptr] = new GCItem_T<Type>(vptr);
      }
    }

    void swig_acquire_ownership_obj(void *vptr, ruby_owntype own) const
    {
      if (vptr && own) {
	SWIG_GUARD(swig_mutex_own);
	swig_owner[vptr] = new GCItem_Object(own);
      }
    }
    
    ruby_owntype swig_release_ownership(void *vptr) const
    {
      ruby_owntype own = 0;
      if (vptr) {
	SWIG_GUARD(swig_mutex_own);
	swig_ownership_map::iterator iter = swig_owner.find(vptr);
	if (iter != swig_owner.end()) {
	  own = iter->second->get_own();
	  swig_owner.erase(iter);
	}
      }
      return own;
    }
  };
}

#endif /* __cplusplus */



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_allocator_type swig_types[0]
#define SWIGTYPE_p_boost__mt19937 swig_types[1]
#define SWIGTYPE_p_boost__numeric__ublas__matrixT_bool_t swig_types[2]
#define SWIGTYPE_p_boost__numeric__ublas__matrixT_double_t swig_types[3]
#define SWIGTYPE_p_boost__numeric__ublas__matrixT_int_t swig_types[4]
#define SWIGTYPE_p_boost__numeric__ublas__matrixT_size_t_t swig_types[5]
#define SWIGTYPE_p_boost__numeric__ublas__scalar_vectorT_int_t swig_types[6]
#define SWIGTYPE_p_boost__numeric__ublas__vectorT_int_t swig_types[7]
#define SWIGTYPE_p_char swig_types[8]
#define SWIGTYPE_p_container_type swig_types[9]
#define SWIGTYPE_p_difference_type swig_types[10]
#define SWIGTYPE_p_double swig_types[11]
#define SWIGTYPE_p_int_vector_t swig_types[12]
#define SWIGTYPE_p_long swig_types[13]
#define SWIGTYPE_p_p_void swig_types[14]
#define SWIGTYPE_p_si_taxi__BWAndreassonHandler swig_types[15]
#define SWIGTYPE_p_si_taxi__BWCallTimeTracker swig_types[16]
#define SWIGTYPE_p_si_taxi__BWDynamicTransportationProblemHandler swig_types[17]
#define SWIGTYPE_p_si_taxi__BWETNNHandler swig_types[18]
#define SWIGTYPE_p_si_taxi__BWH1Handler swig_types[19]
#define SWIGTYPE_p_si_taxi__BWH2Handler swig_types[20]
#define SWIGTYPE_p_si_taxi__BWHxHandler swig_types[21]
#define SWIGTYPE_p_si_taxi__BWNNHandler swig_types[22]
#define SWIGTYPE_p_si_taxi__BWNNHandlerWithCallTimeUpdates swig_types[23]
#define SWIGTYPE_p_si_taxi__BWPax swig_types[24]
#define SWIGTYPE_p_si_taxi__BWPaxStream swig_types[25]
#define SWIGTYPE_p_si_taxi__BWPoissonPaxStream swig_types[26]
#define SWIGTYPE_p_si_taxi__BWProactiveHandler swig_types[27]
#define SWIGTYPE_p_si_taxi__BWReactiveHandler swig_types[28]
#define SWIGTYPE_p_si_taxi__BWSNNHandler swig_types[29]
#define SWIGTYPE_p_si_taxi__BWSamplingVotingHandler swig_types[30]
#define SWIGTYPE_p_si_taxi__BWSim swig_types[31]
#define SWIGTYPE_p_si_taxi__BWSimStats swig_types[32]
#define SWIGTYPE_p_si_taxi__BWSimStatsDetailed swig_types[33]
#define SWIGTYPE_p_si_taxi__BWSimStatsMeanPaxWait swig_types[34]
#define SWIGTYPE_p_si_taxi__BWSimStatsPaxRecord swig_types[35]
#define SWIGTYPE_p_si_taxi__BWSimStatsPaxRecorder swig_types[36]
#define SWIGTYPE_p_si_taxi__BWSurplusDeficitHandler swig_types[37]
#define SWIGTYPE_p_si_taxi__BWTestPaxStream swig_types[38]
#define SWIGTYPE_p_si_taxi__BWVehicle swig_types[39]
#define SWIGTYPE_p_si_taxi__EmpiricalSampler swig_types[40]
#define SWIGTYPE_p_si_taxi__Error swig_types[41]
#define SWIGTYPE_p_si_taxi__Exception swig_types[42]
#define SWIGTYPE_p_si_taxi__MDPSim swig_types[43]
#define SWIGTYPE_p_si_taxi__MDPState swig_types[44]
#define SWIGTYPE_p_si_taxi__NaturalHistogram swig_types[45]
#define SWIGTYPE_p_si_taxi__ODHistogram swig_types[46]
#define SWIGTYPE_p_si_taxi__ODMatrixWrapper swig_types[47]
#define SWIGTYPE_p_size_t swig_types[48]
#define SWIGTYPE_p_size_type swig_types[49]
#define SWIGTYPE_p_std__allocatorT_double_t swig_types[50]
#define SWIGTYPE_p_std__allocatorT_int_t swig_types[51]
#define SWIGTYPE_p_std__allocatorT_long_t swig_types[52]
#define SWIGTYPE_p_std__allocatorT_si_taxi__BWPax_t swig_types[53]
#define SWIGTYPE_p_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t swig_types[54]
#define SWIGTYPE_p_std__allocatorT_si_taxi__BWVehicle_t swig_types[55]
#define SWIGTYPE_p_std__allocatorT_si_taxi__NaturalHistogram_t swig_types[56]
#define SWIGTYPE_p_std__allocatorT_size_t_t swig_types[57]
#define SWIGTYPE_p_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t swig_types[58]
#define SWIGTYPE_p_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t swig_types[59]
#define SWIGTYPE_p_std__dequeT_int_std__allocatorT_int_t_t swig_types[60]
#define SWIGTYPE_p_std__dequeT_long_std__allocatorT_long_t_t swig_types[61]
#define SWIGTYPE_p_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t swig_types[62]
#define SWIGTYPE_p_std__exception swig_types[63]
#define SWIGTYPE_p_std__ostream swig_types[64]
#define SWIGTYPE_p_std__queueT_int_std__dequeT_int_std__allocatorT_int_t_t_t swig_types[65]
#define SWIGTYPE_p_std__queueT_si_taxi__BWPax_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t swig_types[66]
#define SWIGTYPE_p_std__string swig_types[67]
#define SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t swig_types[68]
#define SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t swig_types[69]
#define SWIGTYPE_p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t swig_types[70]
#define SWIGTYPE_p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t swig_types[71]
#define SWIGTYPE_p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t swig_types[72]
#define SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t swig_types[73]
#define SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t swig_types[74]
#define SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t swig_types[75]
#define SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t swig_types[76]
#define SWIGTYPE_p_std__vectorT_std__priority_queueT_long_std__vectorT_long_std__allocatorT_long_t_t_std__greaterT_long_t_t_std__allocatorT_std__priority_queueT_long_std__vectorT_long_std__allocatorT_long_t_t_std__greaterT_long_t_t_t_t swig_types[77]
#define SWIGTYPE_p_swig__ConstIterator swig_types[78]
#define SWIGTYPE_p_swig__GC_VALUE swig_types[79]
#define SWIGTYPE_p_swig__Iterator swig_types[80]
#define SWIGTYPE_p_value_type swig_types[81]
#define SWIGTYPE_p_void swig_types[82]
static swig_type_info *swig_types[84];
static swig_module_info swig_module = {swig_types, 83, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Init_siTaxi
#define SWIG_name    "SiTaxi"

static VALUE mSiTaxi;

#define SWIG_RUBY_THREAD_BEGIN_BLOCK
#define SWIG_RUBY_THREAD_END_BLOCK


#define SWIGVERSION 0x020004 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#include <si_taxi/si_taxi.h>
#include <si_taxi/empirical_sampler.h>
#include <si_taxi/natural_histogram.h>
#include <si_taxi/od_histogram.h>
#include <si_taxi/od_matrix_wrapper.h>
#include <si_taxi/bell_wong/bell_wong.h>
#include <si_taxi/bell_wong/call_times.h>
#include <si_taxi/bell_wong/andreasson.h>
#include <si_taxi/bell_wong/dynamic_tp.h>
#include <si_taxi/bell_wong/sampling_voting.h>
#include <si_taxi/bell_wong/surplus_deficit.h>
#include <si_taxi/mdp_sim/mdp_sim.h>

using namespace si_taxi;


#ifdef __cplusplus
extern "C" {
#endif

// Ruby 1.9 changed the file name of this header
#ifdef HAVE_RUBY_IO_H
#include "ruby/io.h"
#else
#include "rubyio.h"
#endif

#ifdef __cplusplus
}
#endif


#ifdef __cplusplus
extern "C" {
#endif
#ifdef HAVE_SYS_TIME_H
# include <sys/time.h>
struct timeval rb_time_timeval(VALUE);
#endif
#ifdef __cplusplus
}
#endif


#include <iostream>


#include <stdexcept>


namespace swig {
  class GC_VALUE {
  protected:
    // Hash of all GC_VALUE's currently in use
    static VALUE _hash;

    VALUE  _obj;

    static ID hash_id;
    static ID   lt_id;
    static ID   gt_id;
    static ID   eq_id;
    static ID   le_id;
    static ID   ge_id;

    static ID  pos_id;
    static ID  neg_id;
    static ID  inv_id;

    static ID  add_id;
    static ID  sub_id;
    static ID  mul_id;
    static ID  div_id;
    static ID  mod_id;

    static ID  and_id;
    static ID   or_id;
    static ID  xor_id;

    static ID  lshift_id;
    static ID  rshift_id;

    struct OpArgs
    {
      VALUE src;
      ID    id;
      int   nargs;
      VALUE target;
    };


  public:
    static void initialize()
    {
      if ( _hash == Qnil ) 
	{ 
	  _hash = rb_hash_new();
	  rb_gc_register_address( &_hash );
	}
    }

    // this function is never called.  Provided for symmetry only.
    static void cleanup()
    {
      rb_gc_unregister_address( &_hash );
    }

    GC_VALUE() : _obj( Qnil )
    {
    }

    GC_VALUE(const GC_VALUE& item) : _obj(item._obj)
    {
      GC_register();
    }
    
    GC_VALUE(VALUE obj) :_obj(obj)
    {
      GC_register();
    }
    
    ~GC_VALUE() 
    {
      GC_unregister();
    }
    
    GC_VALUE & operator=(const GC_VALUE& item) 
    {
      GC_unregister();
      _obj = item._obj;
      GC_register();
      return *this;
    }

    void GC_register()
    {
      if ( FIXNUM_P(_obj) || SPECIAL_CONST_P(_obj) || SYMBOL_P(_obj) ) 
	return;
      VALUE val = rb_hash_aref( _hash, _obj );
      unsigned n = FIXNUM_P(val) ? NUM2UINT(val) : 0;
      ++n;
      rb_hash_aset( _hash, _obj, INT2NUM(n) );
    }

    void GC_unregister()
    {
      if ( FIXNUM_P(_obj) || SPECIAL_CONST_P(_obj) || SYMBOL_P(_obj) ) 
	return;
      // this test should not be needed but I've noticed some very erratic
      // behavior of none being unregistered in some very rare situations.
      if ( BUILTIN_TYPE(_obj) == T_NONE ) return;

      VALUE val = rb_hash_aref( _hash, _obj );
      unsigned n = FIXNUM_P(val) ? NUM2UINT(val) : 1;
      --n;
      if ( n )
	rb_hash_aset( _hash, _obj, INT2NUM(n) );
      else
	rb_hash_delete( _hash, _obj );
    }
    
    operator VALUE() const
    {
      return _obj;
    }

    VALUE inspect() const
    {
      return rb_inspect(_obj);
    }

    VALUE to_s() const
    {
      return rb_inspect(_obj);
    }

    static VALUE swig_protect_funcall( VALUE p )
    {
      OpArgs* args = (OpArgs*) p;
      return rb_funcall( args->src, args->id, args->nargs, args->target );
    }


#define GC_VALUE_CMP( op_id, op, cmp, cmpval ) \
    bool op( const GC_VALUE& other ) const \
    { \
      if ( FIXNUM_P(_obj) && FIXNUM_P(other._obj) ) \
      { \
	return _obj cmp other._obj; \
      } \
      bool  res = false; \
      VALUE ret = Qnil; \
      SWIG_RUBY_THREAD_BEGIN_BLOCK; \
      if ( rb_respond_to( _obj, op_id ) == Qtrue ) \
	{ \
	  int status; \
	  OpArgs  args; \
          args.src    = _obj; \
	  args.id     = op_id; \
	  args.nargs  = 1; \
	  args.target = VALUE(other); \
	  ret = rb_protect( PROTECTFUNC(swig_protect_funcall), \
                            VALUE(&args), &status ); \
	} \
      if ( ret == Qnil ) { \
	VALUE a = rb_funcall(         _obj, hash_id, 0 ); \
	VALUE b = rb_funcall( VALUE(other), hash_id, 0 ); \
	res = a cmp b; \
      } \
      else \
	{ \
	  res = RTEST( ret ); \
	} \
      SWIG_RUBY_THREAD_END_BLOCK; \
      return res; \
    }


    GC_VALUE_CMP( eq_id, operator==, ==, == 0 )
    GC_VALUE_CMP( lt_id, operator<,  < , <  0 )
    GC_VALUE_CMP( le_id, operator<=, <=, <= 0 )
    GC_VALUE_CMP( gt_id, operator>,  > , >  0 )
    GC_VALUE_CMP( ge_id, operator>=, >=, >= 0 )
#undef GC_VALUE_CMP

    bool operator!=( const GC_VALUE& other )
    {
      return !(this->operator==(other));
    }

#define GC_VALUE_UNARY( proc_id, op ) \
    GC_VALUE op() const \
    { \
      VALUE ret = Qnil; \
      SWIG_RUBY_THREAD_BEGIN_BLOCK; \
      int status; \
      OpArgs  args; \
      args.src    = _obj; \
      args.id     = proc_id; \
      args.nargs  = 0; \
      args.target = Qnil; \
      ret = rb_protect( PROTECTFUNC(swig_protect_funcall), VALUE(&args), \
			&status ); \
      SWIG_RUBY_THREAD_END_BLOCK; \
      return ret; \
    }

    GC_VALUE_UNARY( pos_id, operator+ )
    GC_VALUE_UNARY( neg_id, operator- )
    GC_VALUE_UNARY( inv_id, operator~ )
#undef GC_VALUE_BINARY

#define GC_VALUE_BINARY( proc_id, op ) \
    GC_VALUE op( const GC_VALUE& other ) const \
    { \
      VALUE ret = Qnil; \
      SWIG_RUBY_THREAD_BEGIN_BLOCK; \
      int status; \
      OpArgs  args; \
      args.src    = _obj; \
      args.id     = proc_id; \
      args.nargs  = 1; \
      args.target = VALUE(other); \
      ret = rb_protect( PROTECTFUNC(swig_protect_funcall), VALUE(&args), \
			&status ); \
      SWIG_RUBY_THREAD_END_BLOCK; \
      return GC_VALUE(ret); \
    }

    GC_VALUE_BINARY( add_id, operator+ );
    GC_VALUE_BINARY( sub_id, operator- );
    GC_VALUE_BINARY( mul_id, operator* );
    GC_VALUE_BINARY( div_id, operator/ );
    GC_VALUE_BINARY( mod_id, operator% );
    
    GC_VALUE_BINARY( and_id, operator& );
    GC_VALUE_BINARY( xor_id, operator^ );
    GC_VALUE_BINARY(  or_id, operator| );

    GC_VALUE_BINARY( lshift_id, operator<< );
    GC_VALUE_BINARY( rshift_id, operator>> );
#undef GC_VALUE_BINARY

  };

  ID  GC_VALUE::hash_id = rb_intern("hash");
  ID  GC_VALUE::lt_id = rb_intern("<");
  ID  GC_VALUE::gt_id = rb_intern(">");
  ID  GC_VALUE::eq_id = rb_intern("==");
  ID  GC_VALUE::le_id = rb_intern("<=");
  ID  GC_VALUE::ge_id = rb_intern(">=");

  ID  GC_VALUE::pos_id = rb_intern("+@");
  ID  GC_VALUE::neg_id = rb_intern("-@");
  ID  GC_VALUE::inv_id = rb_intern("~");

  ID  GC_VALUE::add_id = rb_intern("+");
  ID  GC_VALUE::sub_id = rb_intern("-");
  ID  GC_VALUE::mul_id = rb_intern("*");
  ID  GC_VALUE::div_id = rb_intern("/");
  ID  GC_VALUE::mod_id = rb_intern("%");

  ID  GC_VALUE::and_id = rb_intern("&");
  ID  GC_VALUE::or_id  = rb_intern("|");
  ID  GC_VALUE::xor_id = rb_intern("^");

  ID  GC_VALUE::lshift_id = rb_intern("<<");
  ID  GC_VALUE::rshift_id = rb_intern(">>");

  VALUE GC_VALUE::_hash = Qnil;

  typedef GC_VALUE LANGUAGE_OBJ;

} // namespace swig



#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <string>
#include <stdexcept>
#include <stddef.h>

  
namespace swig {
  struct stop_iteration {
  };

  /** 
   * Abstract base class used to represent all iterators of STL containers.
   */
  struct ConstIterator {
  public:
    typedef ConstIterator self_type;

  protected:
    GC_VALUE _seq;

  protected:
    ConstIterator(VALUE seq) : _seq(seq)
    {
    }

    // Random access iterator methods, but not required in Ruby
    virtual ptrdiff_t distance(const ConstIterator &x) const
    {
      throw std::invalid_argument("distance not supported");
    }

    virtual bool equal (const ConstIterator &x) const
    {
      throw std::invalid_argument("equal not supported");
    }

    virtual self_type* advance(ptrdiff_t n)
    {
      throw std::invalid_argument("advance not supported");
    }
      
  public:
    virtual ~ConstIterator() {}

    // Access iterator method, required by Ruby
    virtual VALUE value() const {
      throw std::invalid_argument("value not supported");
      return Qnil;
    };

    virtual VALUE setValue( const VALUE& v ) {
      throw std::invalid_argument("value= not supported");
      return Qnil;
    }

    virtual self_type* next( size_t n = 1 )
    {
      return this->advance( n );
    }

    virtual self_type* previous( size_t n = 1 )
    {
      ptrdiff_t nn = n;
      return this->advance( -nn );
    }

    virtual VALUE to_s() const {
      throw std::invalid_argument("to_s not supported");
      return Qnil;
    }

    virtual VALUE inspect() const {
      throw std::invalid_argument("inspect not supported");
      return Qnil;
    }
    
    virtual ConstIterator *dup() const
    {
      throw std::invalid_argument("dup not supported");
      return NULL;
    }

    //
    // C++ common/needed methods.  We emulate a bidirectional
    // operator, to be compatible with all the STL.
    // The iterator traits will then tell the STL what type of
    // iterator we really are.
    //
    ConstIterator() : _seq( Qnil )
    {
    }

    ConstIterator( const self_type& b ) : _seq( b._seq )
    {
    }

    self_type& operator=( const self_type& b )
    {
      _seq = b._seq;
      return *this;
    }

    bool operator == (const ConstIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const ConstIterator& x) const
    {
      return ! operator==(x);
    }
      
    // Pre-decrement operator
    self_type& operator--()
    {
      return *previous();
    }

    // Pre-increment operator
    self_type& operator++()
    {
      return *next();
    }

    // Post-decrement operator
    self_type operator--(int)
    {
      self_type r = *this;
      previous();
      return r;
    }

    // Post-increment operator
    self_type operator++(int)
    {
      self_type r = *this;
      next();
      return r;
    }

    ConstIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    ConstIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }

    ConstIterator* operator + (ptrdiff_t n) const
    {
      return dup()->advance(n);
    }

    ConstIterator* operator - (ptrdiff_t n) const
    {
      return dup()->advance(-n);
    }
      
    ptrdiff_t operator - (const ConstIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::ConstIterator *");
	init = 1;
      }	
      return desc;
    }
  };


  /**
   * Abstract base class used to represent all non-const iterators of STL containers.
   * 
   */
  struct Iterator : public ConstIterator {
  public:
    typedef Iterator self_type;

  protected:
    Iterator(VALUE seq) : ConstIterator(seq)
    {
    }

    virtual self_type* advance(ptrdiff_t n)
    {
      throw std::invalid_argument("operation not supported");
    }

  public:
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::Iterator *");
	init = 1;
      }	
      return desc;
    }
    
    virtual Iterator *dup() const
    {
      throw std::invalid_argument("dup not supported");
      return NULL;
    }
      
    virtual self_type* next( size_t n = 1 )
    {
      return this->advance( n );
    }

    virtual self_type* previous( size_t n = 1 )
    {
      ptrdiff_t nn = n;
      return this->advance( -nn );
    }

    bool operator == (const ConstIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const Iterator& x) const
    {
      return ! operator==(x);
    }
      
    Iterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    Iterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    Iterator* operator + (ptrdiff_t n) const
    {
      return dup()->advance(n);
    }

    Iterator* operator - (ptrdiff_t n) const
    {
      return dup()->advance(-n);
    }
      
    ptrdiff_t operator - (const Iterator& x) const
    {
      return x.distance(*this);
    }
  };

}


SWIGINTERN VALUE
SWIG_ruby_failed(void)
{
  return Qnil;
} 


/*@SWIG:/home/john/local/share/swig/2.0.4/ruby/rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2ULONG(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  unsigned long *res = (unsigned long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2ULONG(obj) : rb_big2ulong(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (VALUE obj, unsigned long *val) 
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    unsigned long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2ULONG), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_size_t (VALUE obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  return res;
}


SWIGINTERNINLINE VALUE
SWIG_From_bool  (bool value)
{
  return value ? Qtrue : Qfalse;
}


/*@SWIG:/home/john/local/share/swig/2.0.4/ruby/rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2LONG(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  long *res = (long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2LONG(obj) : rb_big2long(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_long (VALUE obj, long* val)
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2LONG), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (VALUE obj, ptrdiff_t *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  return res;
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


  #define SWIG_From_long   LONG2NUM 


SWIGINTERNINLINE VALUE
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
  return SWIG_From_long  (static_cast< long >(value));
}


#include <stdexcept>


#include <algorithm>


#include <vector>


#include <queue>


#include <deque>


SWIGINTERNINLINE VALUE
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return ULONG2NUM(value); 
}


SWIGINTERNINLINE VALUE
SWIG_From_size_t  (size_t value)
{    
  return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
}


namespace swig {  
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };  
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> 
  struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }    
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }    
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category> 
  struct traits_as { };
 
  template <class Type, class Category> 
  struct traits_check { };

}



namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static VALUE from(Type *val, int owner = 0) {
      return SWIG_NewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static VALUE from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static VALUE from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static VALUE from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline VALUE from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline VALUE from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(VALUE obj, Type **val) {
      Type *p;
      int res = SWIG_ConvertPtr(obj, (void**)&p, type_info<Type>(), 0);
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(VALUE obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(VALUE obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(VALUE obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(VALUE obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(VALUE obj, bool throw_error) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (throw_error) throw std::invalid_argument("bad type");
	VALUE lastErr = rb_gv_get("$!");
	if (lastErr == Qnil) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(VALUE obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	if (throw_error) throw std::invalid_argument("bad type");
	VALUE lastErr = rb_gv_get("$!");
	if (lastErr == Qnil) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	static Type *v_def = (Type*) malloc(sizeof(Type));
	memset(v_def,0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(VALUE obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (throw_error) throw std::invalid_argument("bad type");
	VALUE lastErr = rb_gv_get("$!");
	if (lastErr == Qnil) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	return 0;
      }
    }
  };

  template <class Type>
  inline Type as(VALUE obj, bool te = false) {
    return traits_as< Type, typename traits< Type >::category >::as(obj, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(VALUE obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(VALUE obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(VALUE obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


namespace swig {
  template <> struct traits<size_t > {
    typedef value_category category;
    static const char* type_name() { return"size_t"; }
  };  
  template <>  struct traits_asval<size_t > {   
    typedef size_t value_type;
    static int asval(VALUE obj, value_type *val) { 
      return SWIG_AsVal_size_t (obj, val);
    }
  };
  template <>  struct traits_from<size_t > {
    typedef size_t value_type;
    static VALUE from(const value_type& val) {
      return SWIG_From_size_t  (val);
    }
  };
}


#include <functional>


namespace swig {
  template < class T >
  struct yield : public std::unary_function< T, bool >
  {
    bool
    operator()( const T& v ) const
    { 
      return RTEST( rb_yield( swig::from< T >(v) ) );
    }
  };


  inline size_t
  check_index(ptrdiff_t i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    
    throw std::out_of_range("index out of range");
  }

  inline size_t
  slice_index(ptrdiff_t i, size_t size) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size) {
	return (size_t) (i + size);
      } else {
	throw std::out_of_range("index out of range");
      }
    } else {
      return ( (size_t) i < size ) ? ((size_t) i) : size;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size);
    typename Sequence::size_type jj = swig::slice_index(j, size);

    if (jj > ii) {
      typename Sequence::const_iterator vb = self->begin();
      typename Sequence::const_iterator ve = self->begin();
      std::advance(vb,ii);
      std::advance(ve,jj);
      return new Sequence(vb, ve);
    } else {
      return new Sequence();
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, const InputSeq& v) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj < ii) jj = ii;
    size_t ssize = jj - ii;
    if (ssize <= v.size()) {
      typename Sequence::iterator sb = self->begin();
      typename InputSeq::const_iterator vmid = v.begin();
      std::advance(sb,ii);
      std::advance(vmid, jj - ii);
      self->insert(std::copy(v.begin(), vmid, sb), vmid, v.end());
    } else {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
      self->insert(sb, v.begin(), v.end());
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj > ii) {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {

  /** 
   * Templated base classes for all custom const_iterators.
   *
   */
  template<typename OutConstIterator>
  class ConstIterator_T :  public ConstIterator
  {
  public:
    typedef OutConstIterator const_iter;
    typedef typename std::iterator_traits<const_iter>::value_type value_type;    
    typedef ConstIterator_T<const_iter> self_type;

  protected:

    
    virtual bool equal (const ConstIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    virtual ptrdiff_t distance(const ConstIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }

    virtual ConstIterator* advance(ptrdiff_t n)
    {
      std::advance( current, n );
      return this;
    }

  public:
    ConstIterator_T() : ConstIterator(Qnil)
    {
    }

    ConstIterator_T(const_iter curr, VALUE seq = Qnil)
      : ConstIterator(seq), current(curr)
    {
    }

    const const_iter& get_current() const
    {
      return current;
    }

    const value_type& operator*() const
    {
      return *current;
    }

    virtual VALUE inspect() const
    {
      VALUE ret = rb_str_new2("#<");
      ret = rb_str_cat2( ret, rb_obj_classname(_seq) );
      ret = rb_str_cat2( ret, "::const_iterator " );
      VALUE cur = value();
      ret = rb_str_concat( ret, rb_inspect(cur) );
      ret = rb_str_cat2( ret, ">" );
      return ret;
    }

    virtual VALUE to_s()    const
    {
      VALUE ret = rb_str_new2( rb_obj_classname(_seq) );
      ret = rb_str_cat2( ret, "::const_iterator " );
      VALUE cur = value();
      ret = rb_str_concat( ret, rb_obj_as_string(cur) );
      return ret;
    }

  protected:
    const_iter current;
  };


  /** 
   * Templated base classes for all custom non-const iterators.
   *
   */
  template<typename InOutIterator>
  class Iterator_T :  public Iterator
  {
  public:
    typedef InOutIterator nonconst_iter;

    // Make this class iterator STL compatible, by using iterator_traits
    typedef typename std::iterator_traits<nonconst_iter >::iterator_category iterator_category;
    typedef typename std::iterator_traits<nonconst_iter >::value_type        value_type;
    typedef typename std::iterator_traits<nonconst_iter >::difference_type   difference_type;
    typedef typename std::iterator_traits<nonconst_iter >::pointer           pointer;
    typedef typename std::iterator_traits<nonconst_iter >::reference         reference;

    typedef Iterator                         base;
    typedef Iterator_T< nonconst_iter > self_type;

  protected:

    virtual bool equal (const ConstIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    virtual ptrdiff_t distance(const ConstIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }

    virtual Iterator* advance(ptrdiff_t n)
    {
      std::advance( current, n );
      return this;
    }

  public:

    Iterator_T(nonconst_iter curr, VALUE seq = Qnil)
      : Iterator(seq), current(curr)
    {
    }

    const nonconst_iter& get_current() const
    {
      return current;
    }

    self_type& operator=( const self_type& b )
    {
      base::operator=( b );
      return *this;
    }
    
    self_type& operator=( const value_type& b )
    {
      *current = b;
      return *this;
    }

    const value_type& operator*() const
    {
      return *current;
    }

    value_type& operator*()
    {
      return *current;
    }
    
    virtual VALUE inspect() const
    {
      VALUE ret = rb_str_new2("#<");
      ret = rb_str_cat2( ret, rb_obj_classname(_seq) );
      ret = rb_str_cat2( ret, "::iterator " );
      VALUE cur = value();
      ret = rb_str_concat( ret, rb_inspect(cur) );
      ret = rb_str_cat2( ret, ">" );
      return ret;
    }

    virtual VALUE to_s()    const
    {
      VALUE ret = rb_str_new2( rb_obj_classname(_seq) );
      ret = rb_str_cat2( ret, "::iterator " );
      VALUE cur = value();
      ret = rb_str_concat( ret, rb_obj_as_string(cur) );
      return ret;
    }

  protected:
    nonconst_iter current;
  };


  /**
   * Auxiliary functor to store the value of a ruby object inside
   * a reference of a compatible C++ type.  ie: Ruby -> C++
   * 
   */
  template <class ValueType>
  struct asval_oper 
  {
    typedef ValueType    value_type;
    typedef bool        result_type;
    bool operator()(VALUE obj, value_type& v) const
    {
      return ( swig::asval< value_type >(obj, &v) == SWIG_OK );
    }
  };

  /**
   * Auxiliary functor to return a ruby object from a C++ type. 
   * ie: C++ -> Ruby
   * 
   */
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef VALUE result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };


  /** 
   * ConstIterator class for a const_iterator with no end() boundaries.
   *
   */
  template<typename OutConstIterator, 
	   typename ValueType = typename std::iterator_traits<OutConstIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class ConstIteratorOpen_T :  public ConstIterator_T<OutConstIterator>
  {
  public:
    FromOper from;
    typedef OutConstIterator const_iter;
    typedef ValueType value_type;
    typedef ConstIterator_T<const_iter>  base;
    typedef ConstIteratorOpen_T<OutConstIterator, ValueType, FromOper> self_type;
    
    ConstIteratorOpen_T(const_iter curr, VALUE seq = Qnil)
      : ConstIterator_T<OutConstIterator>(curr, seq)
    {
    }
    
    virtual VALUE value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    ConstIterator *dup() const
    {
      return new self_type(*this);
    }
  };

  /** 
   * Iterator class for an iterator with no end() boundaries.
   *
   */
  template<typename InOutIterator, 
	   typename ValueType = typename std::iterator_traits<InOutIterator>::value_type,
	   typename FromOper = from_oper<ValueType>,
	   typename AsvalOper = asval_oper<ValueType> >
  class IteratorOpen_T :  public Iterator_T<InOutIterator>
  {
  public:
    FromOper  from;
    AsvalOper asval;
    typedef InOutIterator nonconst_iter;
    typedef ValueType value_type;
    typedef Iterator_T<nonconst_iter>  base;
    typedef IteratorOpen_T<InOutIterator, ValueType, FromOper, AsvalOper> self_type;

  public:
    IteratorOpen_T(nonconst_iter curr, VALUE seq = Qnil)
      : Iterator_T<InOutIterator>(curr, seq)
    {
    }
    
    virtual VALUE value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }

    virtual VALUE setValue( const VALUE& v )
    {
      value_type& dst = *base::current;
      if ( asval(v, dst) ) return v;
      return Qnil;
    }
    
    Iterator *dup() const
    {
      return new self_type(*this);
    }
  };

  /** 
   * ConstIterator class for a const_iterator where begin() and end() boundaries are known.
   *
   */
  template<typename OutConstIterator, 
	   typename ValueType = typename std::iterator_traits<OutConstIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class ConstIteratorClosed_T :  public ConstIterator_T<OutConstIterator>
  {
  public:
    FromOper from;
    typedef OutConstIterator const_iter;
    typedef ValueType value_type;
    typedef ConstIterator_T<const_iter>  base;    
    typedef ConstIteratorClosed_T<OutConstIterator, ValueType, FromOper> self_type;
    
  protected:
    virtual ConstIterator* advance(ptrdiff_t n)
    {
      std::advance( base::current, n );
      if ( base::current == end )
	throw stop_iteration();
      return this;
    }

  public:
    ConstIteratorClosed_T(const_iter curr, const_iter first, 
			  const_iter last, VALUE seq = Qnil)
      : ConstIterator_T<OutConstIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    virtual VALUE value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    ConstIterator *dup() const
    {
      return new self_type(*this);
    }


  private:
    const_iter begin;
    const_iter end;
  };

  /** 
   * Iterator class for a iterator where begin() and end() boundaries are known.
   *
   */
  template<typename InOutIterator, 
	   typename ValueType = typename std::iterator_traits<InOutIterator>::value_type,
	   typename FromOper = from_oper<ValueType>,
	   typename AsvalOper = asval_oper<ValueType> >
  class IteratorClosed_T :  public Iterator_T<InOutIterator>
  {
  public:
    FromOper   from;
    AsvalOper asval;
    typedef InOutIterator nonconst_iter;
    typedef ValueType value_type;
    typedef Iterator_T<nonconst_iter>  base;
    typedef IteratorClosed_T<InOutIterator, ValueType, FromOper, AsvalOper> self_type;
    
  protected:
    virtual Iterator* advance(ptrdiff_t n)
    {
      std::advance( base::current, n );
      if ( base::current == end )
	throw stop_iteration();
      return this;
    }

  public:
    IteratorClosed_T(nonconst_iter curr, nonconst_iter first, 
		     nonconst_iter last, VALUE seq = Qnil)
      : Iterator_T<InOutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    virtual VALUE value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    // Iterator setter method, required by Ruby
    virtual VALUE setValue( const VALUE& v )
    {
      if (base::current == end)
	throw stop_iteration();

      value_type& dst = *base::current;
      if ( asval( v, dst ) ) return v;
      return Qnil;
    }
    
    Iterator *dup() const
    {
      return new self_type(*this);
    }

  private:
    nonconst_iter begin;
    nonconst_iter end;
  };

  /* Partial specialization for bools which don't allow de-referencing */
  template< typename InOutIterator, typename FromOper, typename AsvalOper >
  class IteratorOpen_T< InOutIterator, bool, FromOper, AsvalOper > : 
    public Iterator_T<InOutIterator>
  {
  public:
    FromOper   from;
    AsvalOper asval;
    typedef InOutIterator nonconst_iter;
    typedef bool value_type;
    typedef Iterator_T<nonconst_iter>  base;
    typedef IteratorOpen_T<InOutIterator, bool, FromOper, AsvalOper> self_type;

    IteratorOpen_T(nonconst_iter curr, VALUE seq = Qnil)
      : Iterator_T<InOutIterator>(curr, seq)
    {
    }

    virtual VALUE value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    virtual VALUE setValue( const VALUE& v )
    {
      bool tmp = *base::current;
      if ( asval( v, tmp ) )
	{
	  *base::current = tmp;
	  return v;
	}
      return Qnil;
    }    
    
    Iterator *dup() const
    {
      return new self_type(*this);
    }
    
  };

  /* Partial specialization for bools which don't allow de-referencing */
  template< typename InOutIterator, typename FromOper, typename AsvalOper >
  class IteratorClosed_T< InOutIterator, bool, FromOper, AsvalOper > : 
    public Iterator_T<InOutIterator>
  {
  public:
    FromOper   from;
    AsvalOper asval;
    typedef InOutIterator nonconst_iter;
    typedef bool value_type;
    typedef Iterator_T<nonconst_iter>  base;
    typedef IteratorClosed_T<InOutIterator, bool, FromOper, AsvalOper> self_type;
    
  protected:
    virtual Iterator* advance(ptrdiff_t n)
    {
      std::advance( base::current, n );
      if ( base::current == end )
	throw stop_iteration();
      return this;
    }

  public:
    IteratorClosed_T(nonconst_iter curr, nonconst_iter first, 
		     nonconst_iter last, VALUE seq = Qnil)
      : Iterator_T<InOutIterator>(curr, seq), begin(first), end(last)
    {
    }

    virtual VALUE value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }

    virtual VALUE setValue( const VALUE& v )
    {
      if (base::current == end)
	throw stop_iteration();

      bool tmp = *base::current;
      if ( asval( v, tmp ) )
	{
	  *base::current = tmp;
	  return v;
	}
      return Qnil;
    }
    
    Iterator *dup() const
    {
      return new self_type(*this);
    }

  private:
    nonconst_iter begin;
    nonconst_iter end;
  };


  /** 
   * Helper function used to wrap a bounded const_iterator.  This is to be used in
   * a %typemap(out), for example.
   *
   */
  template<typename InOutIter>
  inline Iterator*
  make_nonconst_iterator(const InOutIter& current, const InOutIter& begin,
			 const InOutIter& end, VALUE seq = Qnil)
  {
    return new IteratorClosed_T<InOutIter>(current, begin, end, seq);
  }

  /** 
   * Helper function used to wrap an unbounded const_iterator.  This is to be used in
   * a %typemap(out), for example.
   *
   */
  template<typename InOutIter>
  inline Iterator*
  make_nonconst_iterator(const InOutIter& current, VALUE seq = Qnil)
  {
    return new IteratorOpen_T<InOutIter>(current, seq);
  }

  /** 
   * Helper function used to wrap a bounded const_iterator.  This is to be used in
   * a %typemap(out), for example.
   *
   */
  template<typename OutIter>
  inline ConstIterator*
  make_const_iterator(const OutIter& current, const OutIter& begin,
                       const OutIter& end, VALUE seq = Qnil)
  {
    return new ConstIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  /** 
   * Helper function used to wrap an unbounded const_iterator.  This is to be used in
   * a %typemap(out), for example.
   *
   */
  template<typename OutIter>
  inline ConstIterator*
  make_const_iterator(const OutIter& current, VALUE seq = Qnil)
  {
    return new ConstIteratorOpen_T<OutIter>(current, seq);
  }
}


namespace swig
{

  /**
   * This class is a proxy class for references, used to return and set values
   * of an element of a Ruby Array of stuff.
   * It can be used by RubySequence_InputIterator to make it work with STL
   * algorithms.
   * 
   */
  template <class T>
  struct RubySequence_Ref
  {
    RubySequence_Ref(VALUE  seq, int index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      VALUE item = rb_ary_entry(_seq, _index );
      try {
	return swig::as<T>(item, true);
      } catch (std::exception& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", _index);
	VALUE lastErr = rb_gv_get("$!");
	if ( lastErr == Qnil ) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	VALUE str = rb_str_new2(msg);
	str = rb_str_cat2( str, e.what() );
	SWIG_Ruby_ExceptionType( NULL, str );
	throw;
      }
    }

    RubySequence_Ref& operator=(const T& v)
    {
      rb_ary_set(_seq, _index, swig::from< T >(v));
      return *this;
    }

  private:
    VALUE  _seq;
    int _index;
  };


  /**
   * This class is a proxy to return a pointer to a class, usually
   * RubySequence_Ref. 
   * It can be used by RubySequence_InputIterator to make it work with STL
   * algorithms.
   * 
   */
  template <class T>
  struct RubySequence_ArrowProxy
  {
    RubySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };


  /**
   * Input Iterator.  This adapator class is a random access iterator that 
   * allows you to use STL algorithms with a Ruby class (a Ruby Array by default).
   * 
   */
  template <class T, class Reference = RubySequence_Ref< T > >
  struct RubySequence_InputIterator
  {
    typedef RubySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef ptrdiff_t difference_type;

    RubySequence_InputIterator()
    {
    }

    RubySequence_InputIterator(VALUE  seq, int index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    RubySequence_ArrowProxy<T>
    operator->() const {
      return RubySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    VALUE  _seq;
    difference_type _index;
  };


  /**
   * This adaptor class allows you to use a Ruby Array as if it was an STL
   * container, giving it begin(), end(), and iterators.
   * 
   */
  template <class T>
  struct RubySequence_Cont
  {
    typedef RubySequence_Ref<T> reference;
    typedef const RubySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;
    typedef int size_type;
    typedef const pointer const_pointer;
    typedef RubySequence_InputIterator<T, reference> iterator;
    typedef RubySequence_InputIterator<T, const_reference> const_iterator;

    RubySequence_Cont(VALUE  seq) : _seq(0)
    {
      if (!rb_obj_is_kind_of(seq, rb_cArray)) {
	throw std::invalid_argument("an Array is expected");
      }
      _seq = seq;
    }

    ~RubySequence_Cont()
    {
    }

    size_type size() const
    {
      return RARRAY_LEN(_seq);
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check(bool set_err = false) const
    {
      int s = (int) size();
      for (int i = 0; i < s; ++i) {
	VALUE item = rb_ary_entry(_seq, i );
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    sprintf(msg, "in sequence element %d", i);
	    SWIG_Error(SWIG_RuntimeError, msg);
	  }
	  return false;
	}
      }
      return true;
    }

  private:
    VALUE  _seq;
  };

}


namespace swig {
  template <class RubySeq, class Seq>
  inline void
  assign(const RubySeq& rubyseq, Seq* seq) {
    // seq->assign(rubyseq.begin(), rubyseq.end()); // not used as not always implemented
    typedef typename RubySeq::value_type value_type;
    typename RubySeq::const_iterator it = rubyseq.begin();
    for (;it != rubyseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(VALUE obj, sequence **seq) {
      if (rb_obj_is_kind_of(obj, rb_cArray) == Qtrue) {
	try {
	  RubySequence_Cont<value_type> rubyseq(obj);
	  if (seq) {
	    sequence *pseq = new sequence();
	    assign(rubyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return rubyseq.check() ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    VALUE lastErr = rb_gv_get("$!");
	    if (lastErr == Qnil) {
	      rb_raise(rb_eTypeError, "%s", e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      } else {
	sequence *p;
	if (SWIG_ConvertPtr(obj,(void**)&p,
			    swig::type_info<sequence>(),0) == SWIG_OK) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      }
      return SWIG_ERROR;
    }
  };

  // Partial specialization for GC_VALUE's.  No need to typecheck each
  // element.
  template< class Seq >
  struct traits_asptr_stdseq< Seq, swig::GC_VALUE > {
    typedef Seq sequence;
    typedef swig::GC_VALUE value_type;

    static int asptr(VALUE obj, sequence **seq) {
      if (rb_obj_is_kind_of(obj, rb_cArray) == Qtrue) {
	try {
	  if (seq) {
	    RubySequence_Cont<value_type> rubyseq(obj);
	    sequence *pseq = new sequence();
	    assign(rubyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return true;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    VALUE lastErr = rb_gv_get("$!");
	    if (lastErr == Qnil) {
	      rb_raise(rb_eTypeError, "%s", e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      } else {
	sequence *p;
	if (SWIG_ConvertPtr(obj,(void**)&p,
			    swig::type_info<sequence>(),0) == SWIG_OK) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static VALUE from(const sequence& seq) {






      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	VALUE obj = rb_ary_new2((int)size);
	int i = 0;
	for (const_iterator it = seq.begin();
	     it != seq.end(); ++it, ++i) {
	  rb_ary_push(obj, swig::from< value_type >(*it));
	}
	rb_obj_freeze(obj);  // treat as immutable result
	return obj;
      } else {
	rb_raise(rb_eRangeError,"sequence size not valid in ruby");
	return Qnil;
      }
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(VALUE obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static VALUE from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<size_t, std::allocator< size_t > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "size_t" "," "std::allocator< size_t >" " >";
	  }
	};
      }
    
SWIGINTERN std::vector< size_t,std::allocator< size_t > > *std_vector_Sl_size_t_Sg__dup(std::vector< size_t > *self){
      return new std::vector<size_t,std::allocator< size_t > >(*self);
    }
SWIGINTERN VALUE std_vector_Sl_size_t_Sg__inspect(std::vector< size_t > *self){
      std::vector<size_t,std::allocator< size_t > >::const_iterator i = self->begin();
      std::vector<size_t,std::allocator< size_t > >::const_iterator e = self->end();
      const char *type_name = swig::type_name< std::vector<size_t,std::allocator< size_t > > >();
      VALUE str = rb_str_new2(type_name);
      str = rb_str_cat2( str, " [" );
      bool comma = false;
      VALUE tmp;
      for ( ; i != e; ++i, comma = true )
	{
	  if (comma) str = rb_str_cat2( str, "," );
	  tmp = swig::from< std::vector<size_t,std::allocator< size_t > >::value_type >( *i );
	  tmp = rb_inspect( tmp );
	  str = rb_str_buf_append( str, tmp );
	}
      str = rb_str_cat2( str, "]" );
      return str;
    }
SWIGINTERN VALUE std_vector_Sl_size_t_Sg__to_a(std::vector< size_t > *self){
      std::vector<size_t,std::allocator< size_t > >::const_iterator i = self->begin();
      std::vector<size_t,std::allocator< size_t > >::const_iterator e = self->end();
      VALUE ary = rb_ary_new2( std::distance( i, e ) );
      VALUE tmp;
      for ( ; i != e; ++i )
	{
	  tmp = swig::from< std::vector<size_t,std::allocator< size_t > >::value_type >( *i );
	  rb_ary_push( ary, tmp );
	}
      return ary;
    }
SWIGINTERN VALUE std_vector_Sl_size_t_Sg__to_s(std::vector< size_t > *self){
      std::vector<size_t,std::allocator< size_t > >::iterator i = self->begin();
      std::vector<size_t,std::allocator< size_t > >::iterator e = self->end();
      VALUE str = rb_str_new2( "" );
      VALUE tmp;
      for ( ; i != e; ++i )
	{
	  tmp = swig::from< std::vector<size_t,std::allocator< size_t > >::value_type >( *i );
	  tmp = rb_obj_as_string( tmp );
	  str = rb_str_buf_append( str, tmp );
	}
      return str;
    }
SWIGINTERN VALUE std_vector_Sl_size_t_Sg__slice(std::vector< size_t > *self,std::vector< size_t >::difference_type i,std::vector< size_t >::difference_type j){
	if ( j <= 0 ) return Qnil;
	std::size_t len = self->size();
	if ( i < 0 ) i = len - i;
	j += i;
	if ( static_cast<std::size_t>(j) >= len ) j = len-1;

	VALUE r = Qnil;
	try {
	  r = swig::from< const std::vector<size_t,std::allocator< size_t > >* >( swig::getslice(self, i, j) );
	}
	catch( std::out_of_range )
	  {
	  }
	return r;
      }
SWIGINTERN std::vector< size_t,std::allocator< size_t > > *std_vector_Sl_size_t_Sg__each(std::vector< size_t > *self){
	if ( !rb_block_given_p() )
	  rb_raise( rb_eArgError, "no block given");

	VALUE r;
	std::vector<size_t,std::allocator< size_t > >::const_iterator i = self->begin();
	std::vector<size_t,std::allocator< size_t > >::const_iterator e = self->end();
	for ( ; i != e; ++i )
	  {
	    r = swig::from< std::vector<size_t,std::allocator< size_t > >::value_type >(*i);
	    rb_yield(r);
	  }
	
	return self;
      }
SWIGINTERN std::vector< size_t,std::allocator< size_t > > *std_vector_Sl_size_t_Sg__select(std::vector< size_t > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<size_t,std::allocator< size_t > >* r = new std::vector<size_t,std::allocator< size_t > >;
      std::vector<size_t,std::allocator< size_t > >::const_iterator i = self->begin();
      std::vector<size_t,std::allocator< size_t > >::const_iterator e = self->end();
      for ( ; i != e; ++i )
	{
	  VALUE v = swig::from< std::vector<size_t,std::allocator< size_t > >::value_type >(*i);
	  if ( RTEST( rb_yield(v) ) )
	    self->insert( r->end(), *i);
	}
	
      return r;
    }
SWIGINTERN std::vector< size_t,std::allocator< size_t > > *std_vector_Sl_size_t_Sg__reject_bang(std::vector< size_t > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<size_t,std::allocator< size_t > >::iterator i = self->begin();
      std::vector<size_t,std::allocator< size_t > >::iterator e = self->end();
      for ( ; i != e; )
	{
	  VALUE r = swig::from< std::vector<size_t,std::allocator< size_t > >::value_type >(*i);
	  if ( RTEST( rb_yield(r) ) ) {
	    self->erase(i++);
            e = self->end();
	  } else {
	    ++i;
          }
	}
	
      return self;
    }
SWIGINTERN VALUE std_vector_Sl_size_t_Sg__delete_at(std::vector< size_t > *self,std::vector< size_t >::difference_type i){
      VALUE r = Qnil;
      try {
	std::vector<size_t,std::allocator< size_t > >::iterator at = swig::getpos(self, i);
	r = swig::from< std::vector<size_t,std::allocator< size_t > >::value_type >( *(at) );
	self->erase(at); 
      }
      catch (std::out_of_range)
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_size_t_Sg____delete2__(std::vector< size_t > *self,std::vector< size_t >::value_type const &i){
      VALUE r = Qnil;
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_size_t_Sg__pop(std::vector< size_t > *self){
      if (self->empty()) return Qnil;
      std::vector<size_t,std::allocator< size_t > >::value_type x = self->back();
      self->pop_back();
      return swig::from< std::vector<size_t,std::allocator< size_t > >::value_type >( x );
    }
SWIGINTERN std::vector< size_t >::value_type const std_vector_Sl_size_t_Sg__push(std::vector< size_t > *self,std::vector< size_t >::value_type const &e){
      self->push_back( e );
      return e;
    }
SWIGINTERN std::vector< size_t,std::allocator< size_t > > *std_vector_Sl_size_t_Sg__reject(std::vector< size_t > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<size_t,std::allocator< size_t > >* r = new std::vector<size_t,std::allocator< size_t > >;
      std::remove_copy_if( self->begin(), self->end(),              
			   std::back_inserter(*r),
			   swig::yield< std::vector<size_t,std::allocator< size_t > >::value_type >() );
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_size_t_Sg__at(std::vector< size_t > const *self,std::vector< size_t >::difference_type i){
      VALUE r = Qnil;
      try {
	r = swig::from< std::vector<size_t,std::allocator< size_t > >::value_type >( *(swig::cgetpos(self, i)) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_size_t_Sg____getitem____SWIG_0(std::vector< size_t > const *self,std::vector< size_t >::difference_type i,std::vector< size_t >::difference_type j){
      if ( j <= 0 ) return Qnil;
      std::size_t len = self->size();
      if ( i < 0 ) i = len - i;
      j += i; if ( static_cast<std::size_t>(j) >= len ) j = len-1;

      VALUE r = Qnil;
      try {
	r = swig::from< const std::vector<size_t,std::allocator< size_t > >* >( swig::getslice(self, i, j) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_size_t_Sg____getitem____SWIG_1(std::vector< size_t > const *self,std::vector< size_t >::difference_type i){
      VALUE r = Qnil;
      try {
	r = swig::from< std::vector<size_t,std::allocator< size_t > >::value_type >( *(swig::cgetpos(self, i)) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_size_t_Sg____getitem____SWIG_2(std::vector< size_t > const *self,VALUE i){
      if ( rb_obj_is_kind_of( i, rb_cRange ) == Qfalse )
	{
	  rb_raise( rb_eTypeError, "not a valid index or range" );
	}

      VALUE r = Qnil;
      static ID id_end   = rb_intern("end");
      static ID id_start = rb_intern("begin");
      static ID id_noend = rb_intern("exclude_end?");

      VALUE start = rb_funcall( i, id_start, 0 );
      VALUE end   = rb_funcall( i, id_end, 0 );
      bool  noend = ( rb_funcall( i, id_noend, 0 ) == Qtrue );

      int len = self->size();

      int s = NUM2INT( start );
      if ( s < 0 ) s = len + s;
      else if ( s >= len ) return Qnil;

      int e = NUM2INT( end );
      if ( e < 0 ) e = len + e;

      if ( e < s ) return Qnil; //std::swap( s, e );

      if ( noend ) e -= 1;
      if ( e >= len ) e = len - 1;

      return swig::from< std::vector<size_t,std::allocator< size_t > >* >( swig::getslice(self, s, e+1) );
    }
SWIGINTERN VALUE std_vector_Sl_size_t_Sg____setitem____SWIG_0(std::vector< size_t > *self,std::vector< size_t >::difference_type i,std::vector< size_t >::value_type const &x){
	std::size_t len = self->size();
	if ( i < 0 ) i = len - i;
	else if ( static_cast<std::size_t>(i) >= len )
	  self->resize( i+1, x );
	else
	  *(swig::getpos(self,i)) = x;

	return swig::from< std::vector<size_t,std::allocator< size_t > >::value_type >( x );
      }
SWIGINTERN VALUE std_vector_Sl_size_t_Sg____setitem____SWIG_1(std::vector< size_t > *self,std::vector< size_t >::difference_type i,std::vector< size_t >::difference_type j,std::vector< size_t,std::allocator< size_t > > const &v){

      if ( j <= 0 ) return Qnil;
      std::size_t len = self->size();
      if ( i < 0 ) i = len - i;
      j += i; 
      if ( static_cast<std::size_t>(j) >= len ) {
	self->resize( j+1, *(v.begin()) );
	j = len-1;
      }

      VALUE r = Qnil;
      swig::setslice(self, i, j, v);
      r = swig::from< const std::vector<size_t,std::allocator< size_t > >* >( &v );
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_size_t_Sg__shift(std::vector< size_t > *self){
      if (self->empty()) return Qnil;
      std::vector<size_t,std::allocator< size_t > >::value_type x = self->front();
      self->erase( self->begin() );
      return swig::from< std::vector<size_t,std::allocator< size_t > >::value_type >( x );
    }

SWIGINTERN int
SWIG_AsVal_int (VALUE obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}

SWIGINTERN std::vector< size_t,std::allocator< size_t > > *std_vector_Sl_size_t_Sg__insert__SWIG_0(std::vector< size_t > *self,std::vector< size_t >::difference_type pos,int argc,VALUE *argv,...){
      std::size_t len = self->size();
      std::size_t   i = swig::check_index( pos, len, true );
      std::vector<size_t,std::allocator< size_t > >::iterator start;

      VALUE elem = argv[0];
      int idx = 0;
      try {
	std::vector<size_t,std::allocator< size_t > >::value_type val = swig::as<std::vector<size_t,std::allocator< size_t > >::value_type>( elem, true );
	if ( i >= len ) {
	  self->resize(i-1, val);
	  return self;
	}
	start = self->begin();
	std::advance( start, i );
	self->insert( start++, val );

	for ( ++idx; idx < argc; ++idx )
	  {
	    elem = argv[idx];
	    val = swig::as<std::vector<size_t,std::allocator< size_t > >::value_type>( elem );
	    self->insert( start++, val );
	  }

      } 
      catch( std::invalid_argument )
	{
	  rb_raise( rb_eArgError, "%s",
		    Ruby_Format_TypeError( "", 
					   swig::type_name<std::vector<size_t,std::allocator< size_t > >::value_type>(),
					   __FUNCTION__, idx+2, elem ));
	}


      return self;
    }
SWIGINTERN std::vector< size_t,std::allocator< size_t > > *std_vector_Sl_size_t_Sg__unshift(std::vector< size_t > *self,int argc,VALUE *argv,...){
      for ( int idx = argc-1; idx >= 0; --idx )
	{
	  std::vector<size_t,std::allocator< size_t > >::iterator start = self->begin();
	  VALUE elem = argv[idx];
	  try {
	    std::vector<size_t,std::allocator< size_t > >::value_type val = swig::as<std::vector<size_t,std::allocator< size_t > >::value_type>( elem, true );
	    self->insert( start, val );
	  }
	  catch( std::invalid_argument )
	    {
	      rb_raise( rb_eArgError, "%s",
			Ruby_Format_TypeError( "", 
					       swig::type_name<std::vector<size_t,std::allocator< size_t > >::value_type>(),
					       __FUNCTION__, idx+2, elem ));
	    }
	}

      return self;
    }

/*@SWIG:/home/john/local/share/swig/2.0.4/ruby/rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2DBL(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  double *res = (double *)(args[1]);
  *res = NUM2DBL(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_double (VALUE obj, double *val)
{
  VALUE type = TYPE(obj);
  if ((type == T_FLOAT) || (type == T_FIXNUM) || (type == T_BIGNUM)) {
    double v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2DBL), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


  #define SWIG_From_double   rb_float_new 


namespace swig {
  template <> struct traits<double > {
    typedef value_category category;
    static const char* type_name() { return"double"; }
  };  
  template <>  struct traits_asval<double > {   
    typedef double value_type;
    static int asval(VALUE obj, value_type *val) { 
      return SWIG_AsVal_double (obj, val);
    }
  };
  template <>  struct traits_from<double > {
    typedef double value_type;
    static VALUE from(const value_type& val) {
      return SWIG_From_double  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector<double, std::allocator< double > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "double" "," "std::allocator< double >" " >";
	  }
	};
      }
    
SWIGINTERN std::vector< double,std::allocator< double > > *std_vector_Sl_double_Sg__dup(std::vector< double > *self){
      return new std::vector<double,std::allocator< double > >(*self);
    }
SWIGINTERN VALUE std_vector_Sl_double_Sg__inspect(std::vector< double > *self){
      std::vector<double,std::allocator< double > >::const_iterator i = self->begin();
      std::vector<double,std::allocator< double > >::const_iterator e = self->end();
      const char *type_name = swig::type_name< std::vector<double,std::allocator< double > > >();
      VALUE str = rb_str_new2(type_name);
      str = rb_str_cat2( str, " [" );
      bool comma = false;
      VALUE tmp;
      for ( ; i != e; ++i, comma = true )
	{
	  if (comma) str = rb_str_cat2( str, "," );
	  tmp = swig::from< std::vector<double,std::allocator< double > >::value_type >( *i );
	  tmp = rb_inspect( tmp );
	  str = rb_str_buf_append( str, tmp );
	}
      str = rb_str_cat2( str, "]" );
      return str;
    }
SWIGINTERN VALUE std_vector_Sl_double_Sg__to_a(std::vector< double > *self){
      std::vector<double,std::allocator< double > >::const_iterator i = self->begin();
      std::vector<double,std::allocator< double > >::const_iterator e = self->end();
      VALUE ary = rb_ary_new2( std::distance( i, e ) );
      VALUE tmp;
      for ( ; i != e; ++i )
	{
	  tmp = swig::from< std::vector<double,std::allocator< double > >::value_type >( *i );
	  rb_ary_push( ary, tmp );
	}
      return ary;
    }
SWIGINTERN VALUE std_vector_Sl_double_Sg__to_s(std::vector< double > *self){
      std::vector<double,std::allocator< double > >::iterator i = self->begin();
      std::vector<double,std::allocator< double > >::iterator e = self->end();
      VALUE str = rb_str_new2( "" );
      VALUE tmp;
      for ( ; i != e; ++i )
	{
	  tmp = swig::from< std::vector<double,std::allocator< double > >::value_type >( *i );
	  tmp = rb_obj_as_string( tmp );
	  str = rb_str_buf_append( str, tmp );
	}
      return str;
    }
SWIGINTERN VALUE std_vector_Sl_double_Sg__slice(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j){
	if ( j <= 0 ) return Qnil;
	std::size_t len = self->size();
	if ( i < 0 ) i = len - i;
	j += i;
	if ( static_cast<std::size_t>(j) >= len ) j = len-1;

	VALUE r = Qnil;
	try {
	  r = swig::from< const std::vector<double,std::allocator< double > >* >( swig::getslice(self, i, j) );
	}
	catch( std::out_of_range )
	  {
	  }
	return r;
      }
SWIGINTERN std::vector< double,std::allocator< double > > *std_vector_Sl_double_Sg__each(std::vector< double > *self){
	if ( !rb_block_given_p() )
	  rb_raise( rb_eArgError, "no block given");

	VALUE r;
	std::vector<double,std::allocator< double > >::const_iterator i = self->begin();
	std::vector<double,std::allocator< double > >::const_iterator e = self->end();
	for ( ; i != e; ++i )
	  {
	    r = swig::from< std::vector<double,std::allocator< double > >::value_type >(*i);
	    rb_yield(r);
	  }
	
	return self;
      }
SWIGINTERN std::vector< double,std::allocator< double > > *std_vector_Sl_double_Sg__select(std::vector< double > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<double,std::allocator< double > >* r = new std::vector<double,std::allocator< double > >;
      std::vector<double,std::allocator< double > >::const_iterator i = self->begin();
      std::vector<double,std::allocator< double > >::const_iterator e = self->end();
      for ( ; i != e; ++i )
	{
	  VALUE v = swig::from< std::vector<double,std::allocator< double > >::value_type >(*i);
	  if ( RTEST( rb_yield(v) ) )
	    self->insert( r->end(), *i);
	}
	
      return r;
    }
SWIGINTERN std::vector< double,std::allocator< double > > *std_vector_Sl_double_Sg__reject_bang(std::vector< double > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<double,std::allocator< double > >::iterator i = self->begin();
      std::vector<double,std::allocator< double > >::iterator e = self->end();
      for ( ; i != e; )
	{
	  VALUE r = swig::from< std::vector<double,std::allocator< double > >::value_type >(*i);
	  if ( RTEST( rb_yield(r) ) ) {
	    self->erase(i++);
            e = self->end();
	  } else {
	    ++i;
          }
	}
	
      return self;
    }
SWIGINTERN VALUE std_vector_Sl_double_Sg__delete_at(std::vector< double > *self,std::vector< double >::difference_type i){
      VALUE r = Qnil;
      try {
	std::vector<double,std::allocator< double > >::iterator at = swig::getpos(self, i);
	r = swig::from< std::vector<double,std::allocator< double > >::value_type >( *(at) );
	self->erase(at); 
      }
      catch (std::out_of_range)
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_double_Sg____delete2__(std::vector< double > *self,std::vector< double >::value_type const &i){
      VALUE r = Qnil;
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_double_Sg__pop(std::vector< double > *self){
      if (self->empty()) return Qnil;
      std::vector<double,std::allocator< double > >::value_type x = self->back();
      self->pop_back();
      return swig::from< std::vector<double,std::allocator< double > >::value_type >( x );
    }
SWIGINTERN std::vector< double >::value_type const std_vector_Sl_double_Sg__push(std::vector< double > *self,std::vector< double >::value_type const &e){
      self->push_back( e );
      return e;
    }
SWIGINTERN std::vector< double,std::allocator< double > > *std_vector_Sl_double_Sg__reject(std::vector< double > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<double,std::allocator< double > >* r = new std::vector<double,std::allocator< double > >;
      std::remove_copy_if( self->begin(), self->end(),              
			   std::back_inserter(*r),
			   swig::yield< std::vector<double,std::allocator< double > >::value_type >() );
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_double_Sg__at(std::vector< double > const *self,std::vector< double >::difference_type i){
      VALUE r = Qnil;
      try {
	r = swig::from< std::vector<double,std::allocator< double > >::value_type >( *(swig::cgetpos(self, i)) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_double_Sg____getitem____SWIG_0(std::vector< double > const *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j){
      if ( j <= 0 ) return Qnil;
      std::size_t len = self->size();
      if ( i < 0 ) i = len - i;
      j += i; if ( static_cast<std::size_t>(j) >= len ) j = len-1;

      VALUE r = Qnil;
      try {
	r = swig::from< const std::vector<double,std::allocator< double > >* >( swig::getslice(self, i, j) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_double_Sg____getitem____SWIG_1(std::vector< double > const *self,std::vector< double >::difference_type i){
      VALUE r = Qnil;
      try {
	r = swig::from< std::vector<double,std::allocator< double > >::value_type >( *(swig::cgetpos(self, i)) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_double_Sg____getitem____SWIG_2(std::vector< double > const *self,VALUE i){
      if ( rb_obj_is_kind_of( i, rb_cRange ) == Qfalse )
	{
	  rb_raise( rb_eTypeError, "not a valid index or range" );
	}

      VALUE r = Qnil;
      static ID id_end   = rb_intern("end");
      static ID id_start = rb_intern("begin");
      static ID id_noend = rb_intern("exclude_end?");

      VALUE start = rb_funcall( i, id_start, 0 );
      VALUE end   = rb_funcall( i, id_end, 0 );
      bool  noend = ( rb_funcall( i, id_noend, 0 ) == Qtrue );

      int len = self->size();

      int s = NUM2INT( start );
      if ( s < 0 ) s = len + s;
      else if ( s >= len ) return Qnil;

      int e = NUM2INT( end );
      if ( e < 0 ) e = len + e;

      if ( e < s ) return Qnil; //std::swap( s, e );

      if ( noend ) e -= 1;
      if ( e >= len ) e = len - 1;

      return swig::from< std::vector<double,std::allocator< double > >* >( swig::getslice(self, s, e+1) );
    }
SWIGINTERN VALUE std_vector_Sl_double_Sg____setitem____SWIG_0(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::value_type const &x){
	std::size_t len = self->size();
	if ( i < 0 ) i = len - i;
	else if ( static_cast<std::size_t>(i) >= len )
	  self->resize( i+1, x );
	else
	  *(swig::getpos(self,i)) = x;

	return swig::from< std::vector<double,std::allocator< double > >::value_type >( x );
      }
SWIGINTERN VALUE std_vector_Sl_double_Sg____setitem____SWIG_1(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j,std::vector< double,std::allocator< double > > const &v){

      if ( j <= 0 ) return Qnil;
      std::size_t len = self->size();
      if ( i < 0 ) i = len - i;
      j += i; 
      if ( static_cast<std::size_t>(j) >= len ) {
	self->resize( j+1, *(v.begin()) );
	j = len-1;
      }

      VALUE r = Qnil;
      swig::setslice(self, i, j, v);
      r = swig::from< const std::vector<double,std::allocator< double > >* >( &v );
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_double_Sg__shift(std::vector< double > *self){
      if (self->empty()) return Qnil;
      std::vector<double,std::allocator< double > >::value_type x = self->front();
      self->erase( self->begin() );
      return swig::from< std::vector<double,std::allocator< double > >::value_type >( x );
    }
SWIGINTERN std::vector< double,std::allocator< double > > *std_vector_Sl_double_Sg__insert__SWIG_0(std::vector< double > *self,std::vector< double >::difference_type pos,int argc,VALUE *argv,...){
      std::size_t len = self->size();
      std::size_t   i = swig::check_index( pos, len, true );
      std::vector<double,std::allocator< double > >::iterator start;

      VALUE elem = argv[0];
      int idx = 0;
      try {
	std::vector<double,std::allocator< double > >::value_type val = swig::as<std::vector<double,std::allocator< double > >::value_type>( elem, true );
	if ( i >= len ) {
	  self->resize(i-1, val);
	  return self;
	}
	start = self->begin();
	std::advance( start, i );
	self->insert( start++, val );

	for ( ++idx; idx < argc; ++idx )
	  {
	    elem = argv[idx];
	    val = swig::as<std::vector<double,std::allocator< double > >::value_type>( elem );
	    self->insert( start++, val );
	  }

      } 
      catch( std::invalid_argument )
	{
	  rb_raise( rb_eArgError, "%s",
		    Ruby_Format_TypeError( "", 
					   swig::type_name<std::vector<double,std::allocator< double > >::value_type>(),
					   __FUNCTION__, idx+2, elem ));
	}


      return self;
    }
SWIGINTERN std::vector< double,std::allocator< double > > *std_vector_Sl_double_Sg__unshift(std::vector< double > *self,int argc,VALUE *argv,...){
      for ( int idx = argc-1; idx >= 0; --idx )
	{
	  std::vector<double,std::allocator< double > >::iterator start = self->begin();
	  VALUE elem = argv[idx];
	  try {
	    std::vector<double,std::allocator< double > >::value_type val = swig::as<std::vector<double,std::allocator< double > >::value_type>( elem, true );
	    self->insert( start, val );
	  }
	  catch( std::invalid_argument )
	    {
	      rb_raise( rb_eArgError, "%s",
			Ruby_Format_TypeError( "", 
					       swig::type_name<std::vector<double,std::allocator< double > >::value_type>(),
					       __FUNCTION__, idx+2, elem ));
	    }
	}

      return self;
    }
SWIGINTERN std::vector< double,std::allocator< double > > *std_vector_Sl_double_Sg__map_bang(std::vector< double > *self){

    if ( !rb_block_given_p() )
      rb_raise( rb_eArgError, "No block given" );

    VALUE r = Qnil;
    std::vector< double >::iterator i = self->begin();
    std::vector< double >::iterator e = self->end();

    try {
      for ( ; i != e; ++i )
	{
	  r = swig::from< double >( *i );
	  r = rb_yield( r );
	  *i = swig::as< double >( r );
	}
    }
    catch ( const std::invalid_argument& )
      {
	rb_raise(rb_eTypeError,
		 "Yield block did not return a valid element for " "std::vector");
      }
    
    return self;
  }
SWIGINTERN VALUE std_vector_Sl_double_Sg____delete__(std::vector< double > *self,double const &val){
    VALUE r = Qnil;
    std::vector<double >::iterator e = self->end();
    std::vector<double >::iterator i = std::remove( self->begin(), e, val );
    // remove dangling elements now
    self->erase( i, e );
    
    if ( i != e )
      r = swig::from< double >( val );
    else if ( rb_block_given_p() )
      r = rb_yield(Qnil);
    return r;
  }

SWIGINTERNINLINE VALUE
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


namespace swig {
  template <> struct traits<int > {
    typedef value_category category;
    static const char* type_name() { return"int"; }
  };  
  template <>  struct traits_asval<int > {   
    typedef int value_type;
    static int asval(VALUE obj, value_type *val) { 
      return SWIG_AsVal_int (obj, val);
    }
  };
  template <>  struct traits_from<int > {
    typedef int value_type;
    static VALUE from(const value_type& val) {
      return SWIG_From_int  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector<int, std::allocator< int > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "int" "," "std::allocator< int >" " >";
	  }
	};
      }
    
SWIGINTERN std::vector< int,std::allocator< int > > *std_vector_Sl_int_Sg__dup(std::vector< int > *self){
      return new std::vector<int,std::allocator< int > >(*self);
    }
SWIGINTERN VALUE std_vector_Sl_int_Sg__inspect(std::vector< int > *self){
      std::vector<int,std::allocator< int > >::const_iterator i = self->begin();
      std::vector<int,std::allocator< int > >::const_iterator e = self->end();
      const char *type_name = swig::type_name< std::vector<int,std::allocator< int > > >();
      VALUE str = rb_str_new2(type_name);
      str = rb_str_cat2( str, " [" );
      bool comma = false;
      VALUE tmp;
      for ( ; i != e; ++i, comma = true )
	{
	  if (comma) str = rb_str_cat2( str, "," );
	  tmp = swig::from< std::vector<int,std::allocator< int > >::value_type >( *i );
	  tmp = rb_inspect( tmp );
	  str = rb_str_buf_append( str, tmp );
	}
      str = rb_str_cat2( str, "]" );
      return str;
    }
SWIGINTERN VALUE std_vector_Sl_int_Sg__to_a(std::vector< int > *self){
      std::vector<int,std::allocator< int > >::const_iterator i = self->begin();
      std::vector<int,std::allocator< int > >::const_iterator e = self->end();
      VALUE ary = rb_ary_new2( std::distance( i, e ) );
      VALUE tmp;
      for ( ; i != e; ++i )
	{
	  tmp = swig::from< std::vector<int,std::allocator< int > >::value_type >( *i );
	  rb_ary_push( ary, tmp );
	}
      return ary;
    }
SWIGINTERN VALUE std_vector_Sl_int_Sg__to_s(std::vector< int > *self){
      std::vector<int,std::allocator< int > >::iterator i = self->begin();
      std::vector<int,std::allocator< int > >::iterator e = self->end();
      VALUE str = rb_str_new2( "" );
      VALUE tmp;
      for ( ; i != e; ++i )
	{
	  tmp = swig::from< std::vector<int,std::allocator< int > >::value_type >( *i );
	  tmp = rb_obj_as_string( tmp );
	  str = rb_str_buf_append( str, tmp );
	}
      return str;
    }
SWIGINTERN VALUE std_vector_Sl_int_Sg__slice(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::difference_type j){
	if ( j <= 0 ) return Qnil;
	std::size_t len = self->size();
	if ( i < 0 ) i = len - i;
	j += i;
	if ( static_cast<std::size_t>(j) >= len ) j = len-1;

	VALUE r = Qnil;
	try {
	  r = swig::from< const std::vector<int,std::allocator< int > >* >( swig::getslice(self, i, j) );
	}
	catch( std::out_of_range )
	  {
	  }
	return r;
      }
SWIGINTERN std::vector< int,std::allocator< int > > *std_vector_Sl_int_Sg__each(std::vector< int > *self){
	if ( !rb_block_given_p() )
	  rb_raise( rb_eArgError, "no block given");

	VALUE r;
	std::vector<int,std::allocator< int > >::const_iterator i = self->begin();
	std::vector<int,std::allocator< int > >::const_iterator e = self->end();
	for ( ; i != e; ++i )
	  {
	    r = swig::from< std::vector<int,std::allocator< int > >::value_type >(*i);
	    rb_yield(r);
	  }
	
	return self;
      }
SWIGINTERN std::vector< int,std::allocator< int > > *std_vector_Sl_int_Sg__select(std::vector< int > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<int,std::allocator< int > >* r = new std::vector<int,std::allocator< int > >;
      std::vector<int,std::allocator< int > >::const_iterator i = self->begin();
      std::vector<int,std::allocator< int > >::const_iterator e = self->end();
      for ( ; i != e; ++i )
	{
	  VALUE v = swig::from< std::vector<int,std::allocator< int > >::value_type >(*i);
	  if ( RTEST( rb_yield(v) ) )
	    self->insert( r->end(), *i);
	}
	
      return r;
    }
SWIGINTERN std::vector< int,std::allocator< int > > *std_vector_Sl_int_Sg__reject_bang(std::vector< int > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<int,std::allocator< int > >::iterator i = self->begin();
      std::vector<int,std::allocator< int > >::iterator e = self->end();
      for ( ; i != e; )
	{
	  VALUE r = swig::from< std::vector<int,std::allocator< int > >::value_type >(*i);
	  if ( RTEST( rb_yield(r) ) ) {
	    self->erase(i++);
            e = self->end();
	  } else {
	    ++i;
          }
	}
	
      return self;
    }
SWIGINTERN VALUE std_vector_Sl_int_Sg__delete_at(std::vector< int > *self,std::vector< int >::difference_type i){
      VALUE r = Qnil;
      try {
	std::vector<int,std::allocator< int > >::iterator at = swig::getpos(self, i);
	r = swig::from< std::vector<int,std::allocator< int > >::value_type >( *(at) );
	self->erase(at); 
      }
      catch (std::out_of_range)
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_int_Sg____delete2__(std::vector< int > *self,std::vector< int >::value_type const &i){
      VALUE r = Qnil;
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_int_Sg__pop(std::vector< int > *self){
      if (self->empty()) return Qnil;
      std::vector<int,std::allocator< int > >::value_type x = self->back();
      self->pop_back();
      return swig::from< std::vector<int,std::allocator< int > >::value_type >( x );
    }
SWIGINTERN std::vector< int >::value_type const std_vector_Sl_int_Sg__push(std::vector< int > *self,std::vector< int >::value_type const &e){
      self->push_back( e );
      return e;
    }
SWIGINTERN std::vector< int,std::allocator< int > > *std_vector_Sl_int_Sg__reject(std::vector< int > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<int,std::allocator< int > >* r = new std::vector<int,std::allocator< int > >;
      std::remove_copy_if( self->begin(), self->end(),              
			   std::back_inserter(*r),
			   swig::yield< std::vector<int,std::allocator< int > >::value_type >() );
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_int_Sg__at(std::vector< int > const *self,std::vector< int >::difference_type i){
      VALUE r = Qnil;
      try {
	r = swig::from< std::vector<int,std::allocator< int > >::value_type >( *(swig::cgetpos(self, i)) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_int_Sg____getitem____SWIG_0(std::vector< int > const *self,std::vector< int >::difference_type i,std::vector< int >::difference_type j){
      if ( j <= 0 ) return Qnil;
      std::size_t len = self->size();
      if ( i < 0 ) i = len - i;
      j += i; if ( static_cast<std::size_t>(j) >= len ) j = len-1;

      VALUE r = Qnil;
      try {
	r = swig::from< const std::vector<int,std::allocator< int > >* >( swig::getslice(self, i, j) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_int_Sg____getitem____SWIG_1(std::vector< int > const *self,std::vector< int >::difference_type i){
      VALUE r = Qnil;
      try {
	r = swig::from< std::vector<int,std::allocator< int > >::value_type >( *(swig::cgetpos(self, i)) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_int_Sg____getitem____SWIG_2(std::vector< int > const *self,VALUE i){
      if ( rb_obj_is_kind_of( i, rb_cRange ) == Qfalse )
	{
	  rb_raise( rb_eTypeError, "not a valid index or range" );
	}

      VALUE r = Qnil;
      static ID id_end   = rb_intern("end");
      static ID id_start = rb_intern("begin");
      static ID id_noend = rb_intern("exclude_end?");

      VALUE start = rb_funcall( i, id_start, 0 );
      VALUE end   = rb_funcall( i, id_end, 0 );
      bool  noend = ( rb_funcall( i, id_noend, 0 ) == Qtrue );

      int len = self->size();

      int s = NUM2INT( start );
      if ( s < 0 ) s = len + s;
      else if ( s >= len ) return Qnil;

      int e = NUM2INT( end );
      if ( e < 0 ) e = len + e;

      if ( e < s ) return Qnil; //std::swap( s, e );

      if ( noend ) e -= 1;
      if ( e >= len ) e = len - 1;

      return swig::from< std::vector<int,std::allocator< int > >* >( swig::getslice(self, s, e+1) );
    }
SWIGINTERN VALUE std_vector_Sl_int_Sg____setitem____SWIG_0(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::value_type const &x){
	std::size_t len = self->size();
	if ( i < 0 ) i = len - i;
	else if ( static_cast<std::size_t>(i) >= len )
	  self->resize( i+1, x );
	else
	  *(swig::getpos(self,i)) = x;

	return swig::from< std::vector<int,std::allocator< int > >::value_type >( x );
      }
SWIGINTERN VALUE std_vector_Sl_int_Sg____setitem____SWIG_1(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::difference_type j,std::vector< int,std::allocator< int > > const &v){

      if ( j <= 0 ) return Qnil;
      std::size_t len = self->size();
      if ( i < 0 ) i = len - i;
      j += i; 
      if ( static_cast<std::size_t>(j) >= len ) {
	self->resize( j+1, *(v.begin()) );
	j = len-1;
      }

      VALUE r = Qnil;
      swig::setslice(self, i, j, v);
      r = swig::from< const std::vector<int,std::allocator< int > >* >( &v );
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_int_Sg__shift(std::vector< int > *self){
      if (self->empty()) return Qnil;
      std::vector<int,std::allocator< int > >::value_type x = self->front();
      self->erase( self->begin() );
      return swig::from< std::vector<int,std::allocator< int > >::value_type >( x );
    }
SWIGINTERN std::vector< int,std::allocator< int > > *std_vector_Sl_int_Sg__insert__SWIG_0(std::vector< int > *self,std::vector< int >::difference_type pos,int argc,VALUE *argv,...){
      std::size_t len = self->size();
      std::size_t   i = swig::check_index( pos, len, true );
      std::vector<int,std::allocator< int > >::iterator start;

      VALUE elem = argv[0];
      int idx = 0;
      try {
	std::vector<int,std::allocator< int > >::value_type val = swig::as<std::vector<int,std::allocator< int > >::value_type>( elem, true );
	if ( i >= len ) {
	  self->resize(i-1, val);
	  return self;
	}
	start = self->begin();
	std::advance( start, i );
	self->insert( start++, val );

	for ( ++idx; idx < argc; ++idx )
	  {
	    elem = argv[idx];
	    val = swig::as<std::vector<int,std::allocator< int > >::value_type>( elem );
	    self->insert( start++, val );
	  }

      } 
      catch( std::invalid_argument )
	{
	  rb_raise( rb_eArgError, "%s",
		    Ruby_Format_TypeError( "", 
					   swig::type_name<std::vector<int,std::allocator< int > >::value_type>(),
					   __FUNCTION__, idx+2, elem ));
	}


      return self;
    }
SWIGINTERN std::vector< int,std::allocator< int > > *std_vector_Sl_int_Sg__unshift(std::vector< int > *self,int argc,VALUE *argv,...){
      for ( int idx = argc-1; idx >= 0; --idx )
	{
	  std::vector<int,std::allocator< int > >::iterator start = self->begin();
	  VALUE elem = argv[idx];
	  try {
	    std::vector<int,std::allocator< int > >::value_type val = swig::as<std::vector<int,std::allocator< int > >::value_type>( elem, true );
	    self->insert( start, val );
	  }
	  catch( std::invalid_argument )
	    {
	      rb_raise( rb_eArgError, "%s",
			Ruby_Format_TypeError( "", 
					       swig::type_name<std::vector<int,std::allocator< int > >::value_type>(),
					       __FUNCTION__, idx+2, elem ));
	    }
	}

      return self;
    }
SWIGINTERN std::vector< int,std::allocator< int > > *std_vector_Sl_int_Sg__map_bang(std::vector< int > *self){

    if ( !rb_block_given_p() )
      rb_raise( rb_eArgError, "No block given" );

    VALUE r = Qnil;
    std::vector< int >::iterator i = self->begin();
    std::vector< int >::iterator e = self->end();

    try {
      for ( ; i != e; ++i )
	{
	  r = swig::from< int >( *i );
	  r = rb_yield( r );
	  *i = swig::as< int >( r );
	}
    }
    catch ( const std::invalid_argument& )
      {
	rb_raise(rb_eTypeError,
		 "Yield block did not return a valid element for " "std::vector");
      }
    
    return self;
  }
SWIGINTERN VALUE std_vector_Sl_int_Sg____delete__(std::vector< int > *self,int const &val){
    VALUE r = Qnil;
    std::vector<int >::iterator e = self->end();
    std::vector<int >::iterator i = std::remove( self->begin(), e, val );
    // remove dangling elements now
    self->erase( i, e );
    
    if ( i != e )
      r = swig::from< int >( val );
    else if ( rb_block_given_p() )
      r = rb_yield(Qnil);
    return r;
  }

  namespace swig {
    template <class T>
    struct traits_asptr<std::queue<T> >  {
      static int asptr(VALUE obj, std::queue<T>  **vec) {
	return traits_asptr_stdseq<std::queue<T> >::asptr(obj, vec);
      }
    };

    template <class T>
    struct traits_from<std::queue<T> > {
      static VALUE from(const std::queue<T> & vec) {
	return traits_from_stdseq<std::queue<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::queue<int, std::deque< int,std::allocator< int > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::queue<" "int" "," "std::deque< int,std::allocator< int > >" " >";
	  }
	};
      }
    

  namespace swig {
    template <>  struct traits<si_taxi::NaturalHistogram > {
      typedef pointer_category category;
      static const char* type_name() { return"si_taxi::NaturalHistogram"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<si_taxi::NaturalHistogram, std::allocator< si_taxi::NaturalHistogram > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "si_taxi::NaturalHistogram" "," "std::allocator< si_taxi::NaturalHistogram >" " >";
	  }
	};
      }
    
SWIGINTERN std::vector< si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > > *std_vector_Sl_si_taxi_NaturalHistogram_Sg__dup(std::vector< si_taxi::NaturalHistogram > *self){
      return new std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >(*self);
    }
SWIGINTERN VALUE std_vector_Sl_si_taxi_NaturalHistogram_Sg__inspect(std::vector< si_taxi::NaturalHistogram > *self){
      std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >::const_iterator i = self->begin();
      std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >::const_iterator e = self->end();
      const char *type_name = swig::type_name< std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > > >();
      VALUE str = rb_str_new2(type_name);
      str = rb_str_cat2( str, " [" );
      bool comma = false;
      VALUE tmp;
      for ( ; i != e; ++i, comma = true )
	{
	  if (comma) str = rb_str_cat2( str, "," );
	  tmp = swig::from< std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >::value_type >( *i );
	  tmp = rb_inspect( tmp );
	  str = rb_str_buf_append( str, tmp );
	}
      str = rb_str_cat2( str, "]" );
      return str;
    }
SWIGINTERN VALUE std_vector_Sl_si_taxi_NaturalHistogram_Sg__to_a(std::vector< si_taxi::NaturalHistogram > *self){
      std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >::const_iterator i = self->begin();
      std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >::const_iterator e = self->end();
      VALUE ary = rb_ary_new2( std::distance( i, e ) );
      VALUE tmp;
      for ( ; i != e; ++i )
	{
	  tmp = swig::from< std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >::value_type >( *i );
	  rb_ary_push( ary, tmp );
	}
      return ary;
    }
SWIGINTERN VALUE std_vector_Sl_si_taxi_NaturalHistogram_Sg__to_s(std::vector< si_taxi::NaturalHistogram > *self){
      std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >::iterator i = self->begin();
      std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >::iterator e = self->end();
      VALUE str = rb_str_new2( "" );
      VALUE tmp;
      for ( ; i != e; ++i )
	{
	  tmp = swig::from< std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >::value_type >( *i );
	  tmp = rb_obj_as_string( tmp );
	  str = rb_str_buf_append( str, tmp );
	}
      return str;
    }
SWIGINTERN VALUE std_vector_Sl_si_taxi_NaturalHistogram_Sg__slice(std::vector< si_taxi::NaturalHistogram > *self,std::vector< si_taxi::NaturalHistogram >::difference_type i,std::vector< si_taxi::NaturalHistogram >::difference_type j){
	if ( j <= 0 ) return Qnil;
	std::size_t len = self->size();
	if ( i < 0 ) i = len - i;
	j += i;
	if ( static_cast<std::size_t>(j) >= len ) j = len-1;

	VALUE r = Qnil;
	try {
	  r = swig::from< const std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >* >( swig::getslice(self, i, j) );
	}
	catch( std::out_of_range )
	  {
	  }
	return r;
      }
SWIGINTERN std::vector< si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > > *std_vector_Sl_si_taxi_NaturalHistogram_Sg__each(std::vector< si_taxi::NaturalHistogram > *self){
	if ( !rb_block_given_p() )
	  rb_raise( rb_eArgError, "no block given");

	VALUE r;
	std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >::const_iterator i = self->begin();
	std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >::const_iterator e = self->end();
	for ( ; i != e; ++i )
	  {
	    r = swig::from< std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >::value_type >(*i);
	    rb_yield(r);
	  }
	
	return self;
      }
SWIGINTERN std::vector< si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > > *std_vector_Sl_si_taxi_NaturalHistogram_Sg__select(std::vector< si_taxi::NaturalHistogram > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >* r = new std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >;
      std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >::const_iterator i = self->begin();
      std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >::const_iterator e = self->end();
      for ( ; i != e; ++i )
	{
	  VALUE v = swig::from< std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >::value_type >(*i);
	  if ( RTEST( rb_yield(v) ) )
	    self->insert( r->end(), *i);
	}
	
      return r;
    }
SWIGINTERN std::vector< si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > > *std_vector_Sl_si_taxi_NaturalHistogram_Sg__reject_bang(std::vector< si_taxi::NaturalHistogram > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >::iterator i = self->begin();
      std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >::iterator e = self->end();
      for ( ; i != e; )
	{
	  VALUE r = swig::from< std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >::value_type >(*i);
	  if ( RTEST( rb_yield(r) ) ) {
	    self->erase(i++);
            e = self->end();
	  } else {
	    ++i;
          }
	}
	
      return self;
    }
SWIGINTERN VALUE std_vector_Sl_si_taxi_NaturalHistogram_Sg__delete_at(std::vector< si_taxi::NaturalHistogram > *self,std::vector< si_taxi::NaturalHistogram >::difference_type i){
      VALUE r = Qnil;
      try {
	std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >::iterator at = swig::getpos(self, i);
	r = swig::from< std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >::value_type >( *(at) );
	self->erase(at); 
      }
      catch (std::out_of_range)
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_si_taxi_NaturalHistogram_Sg____delete2__(std::vector< si_taxi::NaturalHistogram > *self,std::vector< si_taxi::NaturalHistogram >::value_type const &i){
      VALUE r = Qnil;
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_si_taxi_NaturalHistogram_Sg__pop(std::vector< si_taxi::NaturalHistogram > *self){
      if (self->empty()) return Qnil;
      std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >::value_type x = self->back();
      self->pop_back();
      return swig::from< std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >::value_type >( x );
    }
SWIGINTERN std::vector< si_taxi::NaturalHistogram >::value_type const std_vector_Sl_si_taxi_NaturalHistogram_Sg__push(std::vector< si_taxi::NaturalHistogram > *self,std::vector< si_taxi::NaturalHistogram >::value_type const &e){
      self->push_back( e );
      return e;
    }
SWIGINTERN std::vector< si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > > *std_vector_Sl_si_taxi_NaturalHistogram_Sg__reject(std::vector< si_taxi::NaturalHistogram > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >* r = new std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >;
      std::remove_copy_if( self->begin(), self->end(),              
			   std::back_inserter(*r),
			   swig::yield< std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >::value_type >() );
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_si_taxi_NaturalHistogram_Sg__at(std::vector< si_taxi::NaturalHistogram > const *self,std::vector< si_taxi::NaturalHistogram >::difference_type i){
      VALUE r = Qnil;
      try {
	r = swig::from< std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >::value_type >( *(swig::cgetpos(self, i)) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_si_taxi_NaturalHistogram_Sg____getitem____SWIG_0(std::vector< si_taxi::NaturalHistogram > const *self,std::vector< si_taxi::NaturalHistogram >::difference_type i,std::vector< si_taxi::NaturalHistogram >::difference_type j){
      if ( j <= 0 ) return Qnil;
      std::size_t len = self->size();
      if ( i < 0 ) i = len - i;
      j += i; if ( static_cast<std::size_t>(j) >= len ) j = len-1;

      VALUE r = Qnil;
      try {
	r = swig::from< const std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >* >( swig::getslice(self, i, j) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_si_taxi_NaturalHistogram_Sg____getitem____SWIG_1(std::vector< si_taxi::NaturalHistogram > const *self,std::vector< si_taxi::NaturalHistogram >::difference_type i){
      VALUE r = Qnil;
      try {
	r = swig::from< std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >::value_type >( *(swig::cgetpos(self, i)) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_si_taxi_NaturalHistogram_Sg____getitem____SWIG_2(std::vector< si_taxi::NaturalHistogram > const *self,VALUE i){
      if ( rb_obj_is_kind_of( i, rb_cRange ) == Qfalse )
	{
	  rb_raise( rb_eTypeError, "not a valid index or range" );
	}

      VALUE r = Qnil;
      static ID id_end   = rb_intern("end");
      static ID id_start = rb_intern("begin");
      static ID id_noend = rb_intern("exclude_end?");

      VALUE start = rb_funcall( i, id_start, 0 );
      VALUE end   = rb_funcall( i, id_end, 0 );
      bool  noend = ( rb_funcall( i, id_noend, 0 ) == Qtrue );

      int len = self->size();

      int s = NUM2INT( start );
      if ( s < 0 ) s = len + s;
      else if ( s >= len ) return Qnil;

      int e = NUM2INT( end );
      if ( e < 0 ) e = len + e;

      if ( e < s ) return Qnil; //std::swap( s, e );

      if ( noend ) e -= 1;
      if ( e >= len ) e = len - 1;

      return swig::from< std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >* >( swig::getslice(self, s, e+1) );
    }
SWIGINTERN VALUE std_vector_Sl_si_taxi_NaturalHistogram_Sg____setitem____SWIG_0(std::vector< si_taxi::NaturalHistogram > *self,std::vector< si_taxi::NaturalHistogram >::difference_type i,std::vector< si_taxi::NaturalHistogram >::value_type const &x){
	std::size_t len = self->size();
	if ( i < 0 ) i = len - i;
	else if ( static_cast<std::size_t>(i) >= len )
	  self->resize( i+1, x );
	else
	  *(swig::getpos(self,i)) = x;

	return swig::from< std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >::value_type >( x );
      }
SWIGINTERN VALUE std_vector_Sl_si_taxi_NaturalHistogram_Sg____setitem____SWIG_1(std::vector< si_taxi::NaturalHistogram > *self,std::vector< si_taxi::NaturalHistogram >::difference_type i,std::vector< si_taxi::NaturalHistogram >::difference_type j,std::vector< si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > > const &v){

      if ( j <= 0 ) return Qnil;
      std::size_t len = self->size();
      if ( i < 0 ) i = len - i;
      j += i; 
      if ( static_cast<std::size_t>(j) >= len ) {
	self->resize( j+1, *(v.begin()) );
	j = len-1;
      }

      VALUE r = Qnil;
      swig::setslice(self, i, j, v);
      r = swig::from< const std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >* >( &v );
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_si_taxi_NaturalHistogram_Sg__shift(std::vector< si_taxi::NaturalHistogram > *self){
      if (self->empty()) return Qnil;
      std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >::value_type x = self->front();
      self->erase( self->begin() );
      return swig::from< std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >::value_type >( x );
    }
SWIGINTERN std::vector< si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > > *std_vector_Sl_si_taxi_NaturalHistogram_Sg__insert__SWIG_0(std::vector< si_taxi::NaturalHistogram > *self,std::vector< si_taxi::NaturalHistogram >::difference_type pos,int argc,VALUE *argv,...){
      std::size_t len = self->size();
      std::size_t   i = swig::check_index( pos, len, true );
      std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >::iterator start;

      VALUE elem = argv[0];
      int idx = 0;
      try {
	std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >::value_type val = swig::as<std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >::value_type>( elem, true );
	if ( i >= len ) {
	  self->resize(i-1, val);
	  return self;
	}
	start = self->begin();
	std::advance( start, i );
	self->insert( start++, val );

	for ( ++idx; idx < argc; ++idx )
	  {
	    elem = argv[idx];
	    val = swig::as<std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >::value_type>( elem );
	    self->insert( start++, val );
	  }

      } 
      catch( std::invalid_argument )
	{
	  rb_raise( rb_eArgError, "%s",
		    Ruby_Format_TypeError( "", 
					   swig::type_name<std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >::value_type>(),
					   __FUNCTION__, idx+2, elem ));
	}


      return self;
    }
SWIGINTERN std::vector< si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > > *std_vector_Sl_si_taxi_NaturalHistogram_Sg__unshift(std::vector< si_taxi::NaturalHistogram > *self,int argc,VALUE *argv,...){
      for ( int idx = argc-1; idx >= 0; --idx )
	{
	  std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >::iterator start = self->begin();
	  VALUE elem = argv[idx];
	  try {
	    std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >::value_type val = swig::as<std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >::value_type>( elem, true );
	    self->insert( start, val );
	  }
	  catch( std::invalid_argument )
	    {
	      rb_raise( rb_eArgError, "%s",
			Ruby_Format_TypeError( "", 
					       swig::type_name<std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >::value_type>(),
					       __FUNCTION__, idx+2, elem ));
	    }
	}

      return self;
    }

  namespace swig {
    template <>  struct traits<si_taxi::BWVehicle > {
      typedef pointer_category category;
      static const char* type_name() { return"si_taxi::BWVehicle"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<si_taxi::BWVehicle, std::allocator< si_taxi::BWVehicle > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "si_taxi::BWVehicle" "," "std::allocator< si_taxi::BWVehicle >" " >";
	  }
	};
      }
    
SWIGINTERN std::vector< si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > > *std_vector_Sl_si_taxi_BWVehicle_Sg__dup(std::vector< si_taxi::BWVehicle > *self){
      return new std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >(*self);
    }
SWIGINTERN VALUE std_vector_Sl_si_taxi_BWVehicle_Sg__inspect(std::vector< si_taxi::BWVehicle > *self){
      std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >::const_iterator i = self->begin();
      std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >::const_iterator e = self->end();
      const char *type_name = swig::type_name< std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > > >();
      VALUE str = rb_str_new2(type_name);
      str = rb_str_cat2( str, " [" );
      bool comma = false;
      VALUE tmp;
      for ( ; i != e; ++i, comma = true )
	{
	  if (comma) str = rb_str_cat2( str, "," );
	  tmp = swig::from< std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >::value_type >( *i );
	  tmp = rb_inspect( tmp );
	  str = rb_str_buf_append( str, tmp );
	}
      str = rb_str_cat2( str, "]" );
      return str;
    }
SWIGINTERN VALUE std_vector_Sl_si_taxi_BWVehicle_Sg__to_a(std::vector< si_taxi::BWVehicle > *self){
      std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >::const_iterator i = self->begin();
      std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >::const_iterator e = self->end();
      VALUE ary = rb_ary_new2( std::distance( i, e ) );
      VALUE tmp;
      for ( ; i != e; ++i )
	{
	  tmp = swig::from< std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >::value_type >( *i );
	  rb_ary_push( ary, tmp );
	}
      return ary;
    }
SWIGINTERN VALUE std_vector_Sl_si_taxi_BWVehicle_Sg__to_s(std::vector< si_taxi::BWVehicle > *self){
      std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >::iterator i = self->begin();
      std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >::iterator e = self->end();
      VALUE str = rb_str_new2( "" );
      VALUE tmp;
      for ( ; i != e; ++i )
	{
	  tmp = swig::from< std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >::value_type >( *i );
	  tmp = rb_obj_as_string( tmp );
	  str = rb_str_buf_append( str, tmp );
	}
      return str;
    }
SWIGINTERN VALUE std_vector_Sl_si_taxi_BWVehicle_Sg__slice(std::vector< si_taxi::BWVehicle > *self,std::vector< si_taxi::BWVehicle >::difference_type i,std::vector< si_taxi::BWVehicle >::difference_type j){
	if ( j <= 0 ) return Qnil;
	std::size_t len = self->size();
	if ( i < 0 ) i = len - i;
	j += i;
	if ( static_cast<std::size_t>(j) >= len ) j = len-1;

	VALUE r = Qnil;
	try {
	  r = swig::from< const std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >* >( swig::getslice(self, i, j) );
	}
	catch( std::out_of_range )
	  {
	  }
	return r;
      }
SWIGINTERN std::vector< si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > > *std_vector_Sl_si_taxi_BWVehicle_Sg__each(std::vector< si_taxi::BWVehicle > *self){
	if ( !rb_block_given_p() )
	  rb_raise( rb_eArgError, "no block given");

	VALUE r;
	std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >::const_iterator i = self->begin();
	std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >::const_iterator e = self->end();
	for ( ; i != e; ++i )
	  {
	    r = swig::from< std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >::value_type >(*i);
	    rb_yield(r);
	  }
	
	return self;
      }
SWIGINTERN std::vector< si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > > *std_vector_Sl_si_taxi_BWVehicle_Sg__select(std::vector< si_taxi::BWVehicle > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >* r = new std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >;
      std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >::const_iterator i = self->begin();
      std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >::const_iterator e = self->end();
      for ( ; i != e; ++i )
	{
	  VALUE v = swig::from< std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >::value_type >(*i);
	  if ( RTEST( rb_yield(v) ) )
	    self->insert( r->end(), *i);
	}
	
      return r;
    }
SWIGINTERN std::vector< si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > > *std_vector_Sl_si_taxi_BWVehicle_Sg__reject_bang(std::vector< si_taxi::BWVehicle > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >::iterator i = self->begin();
      std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >::iterator e = self->end();
      for ( ; i != e; )
	{
	  VALUE r = swig::from< std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >::value_type >(*i);
	  if ( RTEST( rb_yield(r) ) ) {
	    self->erase(i++);
            e = self->end();
	  } else {
	    ++i;
          }
	}
	
      return self;
    }
SWIGINTERN VALUE std_vector_Sl_si_taxi_BWVehicle_Sg__delete_at(std::vector< si_taxi::BWVehicle > *self,std::vector< si_taxi::BWVehicle >::difference_type i){
      VALUE r = Qnil;
      try {
	std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >::iterator at = swig::getpos(self, i);
	r = swig::from< std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >::value_type >( *(at) );
	self->erase(at); 
      }
      catch (std::out_of_range)
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_si_taxi_BWVehicle_Sg____delete2__(std::vector< si_taxi::BWVehicle > *self,std::vector< si_taxi::BWVehicle >::value_type const &i){
      VALUE r = Qnil;
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_si_taxi_BWVehicle_Sg__pop(std::vector< si_taxi::BWVehicle > *self){
      if (self->empty()) return Qnil;
      std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >::value_type x = self->back();
      self->pop_back();
      return swig::from< std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >::value_type >( x );
    }
SWIGINTERN std::vector< si_taxi::BWVehicle >::value_type const std_vector_Sl_si_taxi_BWVehicle_Sg__push(std::vector< si_taxi::BWVehicle > *self,std::vector< si_taxi::BWVehicle >::value_type const &e){
      self->push_back( e );
      return e;
    }
SWIGINTERN std::vector< si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > > *std_vector_Sl_si_taxi_BWVehicle_Sg__reject(std::vector< si_taxi::BWVehicle > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >* r = new std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >;
      std::remove_copy_if( self->begin(), self->end(),              
			   std::back_inserter(*r),
			   swig::yield< std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >::value_type >() );
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_si_taxi_BWVehicle_Sg__at(std::vector< si_taxi::BWVehicle > const *self,std::vector< si_taxi::BWVehicle >::difference_type i){
      VALUE r = Qnil;
      try {
	r = swig::from< std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >::value_type >( *(swig::cgetpos(self, i)) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_si_taxi_BWVehicle_Sg____getitem____SWIG_0(std::vector< si_taxi::BWVehicle > const *self,std::vector< si_taxi::BWVehicle >::difference_type i,std::vector< si_taxi::BWVehicle >::difference_type j){
      if ( j <= 0 ) return Qnil;
      std::size_t len = self->size();
      if ( i < 0 ) i = len - i;
      j += i; if ( static_cast<std::size_t>(j) >= len ) j = len-1;

      VALUE r = Qnil;
      try {
	r = swig::from< const std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >* >( swig::getslice(self, i, j) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_si_taxi_BWVehicle_Sg____getitem____SWIG_1(std::vector< si_taxi::BWVehicle > const *self,std::vector< si_taxi::BWVehicle >::difference_type i){
      VALUE r = Qnil;
      try {
	r = swig::from< std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >::value_type >( *(swig::cgetpos(self, i)) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_si_taxi_BWVehicle_Sg____getitem____SWIG_2(std::vector< si_taxi::BWVehicle > const *self,VALUE i){
      if ( rb_obj_is_kind_of( i, rb_cRange ) == Qfalse )
	{
	  rb_raise( rb_eTypeError, "not a valid index or range" );
	}

      VALUE r = Qnil;
      static ID id_end   = rb_intern("end");
      static ID id_start = rb_intern("begin");
      static ID id_noend = rb_intern("exclude_end?");

      VALUE start = rb_funcall( i, id_start, 0 );
      VALUE end   = rb_funcall( i, id_end, 0 );
      bool  noend = ( rb_funcall( i, id_noend, 0 ) == Qtrue );

      int len = self->size();

      int s = NUM2INT( start );
      if ( s < 0 ) s = len + s;
      else if ( s >= len ) return Qnil;

      int e = NUM2INT( end );
      if ( e < 0 ) e = len + e;

      if ( e < s ) return Qnil; //std::swap( s, e );

      if ( noend ) e -= 1;
      if ( e >= len ) e = len - 1;

      return swig::from< std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >* >( swig::getslice(self, s, e+1) );
    }
SWIGINTERN VALUE std_vector_Sl_si_taxi_BWVehicle_Sg____setitem____SWIG_0(std::vector< si_taxi::BWVehicle > *self,std::vector< si_taxi::BWVehicle >::difference_type i,std::vector< si_taxi::BWVehicle >::value_type const &x){
	std::size_t len = self->size();
	if ( i < 0 ) i = len - i;
	else if ( static_cast<std::size_t>(i) >= len )
	  self->resize( i+1, x );
	else
	  *(swig::getpos(self,i)) = x;

	return swig::from< std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >::value_type >( x );
      }
SWIGINTERN VALUE std_vector_Sl_si_taxi_BWVehicle_Sg____setitem____SWIG_1(std::vector< si_taxi::BWVehicle > *self,std::vector< si_taxi::BWVehicle >::difference_type i,std::vector< si_taxi::BWVehicle >::difference_type j,std::vector< si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > > const &v){

      if ( j <= 0 ) return Qnil;
      std::size_t len = self->size();
      if ( i < 0 ) i = len - i;
      j += i; 
      if ( static_cast<std::size_t>(j) >= len ) {
	self->resize( j+1, *(v.begin()) );
	j = len-1;
      }

      VALUE r = Qnil;
      swig::setslice(self, i, j, v);
      r = swig::from< const std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >* >( &v );
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_si_taxi_BWVehicle_Sg__shift(std::vector< si_taxi::BWVehicle > *self){
      if (self->empty()) return Qnil;
      std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >::value_type x = self->front();
      self->erase( self->begin() );
      return swig::from< std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >::value_type >( x );
    }
SWIGINTERN std::vector< si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > > *std_vector_Sl_si_taxi_BWVehicle_Sg__insert__SWIG_0(std::vector< si_taxi::BWVehicle > *self,std::vector< si_taxi::BWVehicle >::difference_type pos,int argc,VALUE *argv,...){
      std::size_t len = self->size();
      std::size_t   i = swig::check_index( pos, len, true );
      std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >::iterator start;

      VALUE elem = argv[0];
      int idx = 0;
      try {
	std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >::value_type val = swig::as<std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >::value_type>( elem, true );
	if ( i >= len ) {
	  self->resize(i-1, val);
	  return self;
	}
	start = self->begin();
	std::advance( start, i );
	self->insert( start++, val );

	for ( ++idx; idx < argc; ++idx )
	  {
	    elem = argv[idx];
	    val = swig::as<std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >::value_type>( elem );
	    self->insert( start++, val );
	  }

      } 
      catch( std::invalid_argument )
	{
	  rb_raise( rb_eArgError, "%s",
		    Ruby_Format_TypeError( "", 
					   swig::type_name<std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >::value_type>(),
					   __FUNCTION__, idx+2, elem ));
	}


      return self;
    }
SWIGINTERN std::vector< si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > > *std_vector_Sl_si_taxi_BWVehicle_Sg__unshift(std::vector< si_taxi::BWVehicle > *self,int argc,VALUE *argv,...){
      for ( int idx = argc-1; idx >= 0; --idx )
	{
	  std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >::iterator start = self->begin();
	  VALUE elem = argv[idx];
	  try {
	    std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >::value_type val = swig::as<std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >::value_type>( elem, true );
	    self->insert( start, val );
	  }
	  catch( std::invalid_argument )
	    {
	      rb_raise( rb_eArgError, "%s",
			Ruby_Format_TypeError( "", 
					       swig::type_name<std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >::value_type>(),
					       __FUNCTION__, idx+2, elem ));
	    }
	}

      return self;
    }

  namespace swig {
    template <>  struct traits<si_taxi::BWPax > {
      typedef pointer_category category;
      static const char* type_name() { return"si_taxi::BWPax"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::queue<si_taxi::BWPax, std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::queue<" "si_taxi::BWPax" "," "std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >" " >";
	  }
	};
      }
    

  namespace swig {
    template <>  struct traits<si_taxi::BWSimStatsPaxRecord > {
      typedef pointer_category category;
      static const char* type_name() { return"si_taxi::BWSimStatsPaxRecord"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<si_taxi::BWSimStatsPaxRecord, std::allocator< si_taxi::BWSimStatsPaxRecord > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "si_taxi::BWSimStatsPaxRecord" "," "std::allocator< si_taxi::BWSimStatsPaxRecord >" " >";
	  }
	};
      }
    
SWIGINTERN std::vector< si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > > *std_vector_Sl_si_taxi_BWSimStatsPaxRecord_Sg__dup(std::vector< si_taxi::BWSimStatsPaxRecord > *self){
      return new std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >(*self);
    }
SWIGINTERN VALUE std_vector_Sl_si_taxi_BWSimStatsPaxRecord_Sg__inspect(std::vector< si_taxi::BWSimStatsPaxRecord > *self){
      std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >::const_iterator i = self->begin();
      std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >::const_iterator e = self->end();
      const char *type_name = swig::type_name< std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > > >();
      VALUE str = rb_str_new2(type_name);
      str = rb_str_cat2( str, " [" );
      bool comma = false;
      VALUE tmp;
      for ( ; i != e; ++i, comma = true )
	{
	  if (comma) str = rb_str_cat2( str, "," );
	  tmp = swig::from< std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >::value_type >( *i );
	  tmp = rb_inspect( tmp );
	  str = rb_str_buf_append( str, tmp );
	}
      str = rb_str_cat2( str, "]" );
      return str;
    }
SWIGINTERN VALUE std_vector_Sl_si_taxi_BWSimStatsPaxRecord_Sg__to_a(std::vector< si_taxi::BWSimStatsPaxRecord > *self){
      std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >::const_iterator i = self->begin();
      std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >::const_iterator e = self->end();
      VALUE ary = rb_ary_new2( std::distance( i, e ) );
      VALUE tmp;
      for ( ; i != e; ++i )
	{
	  tmp = swig::from< std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >::value_type >( *i );
	  rb_ary_push( ary, tmp );
	}
      return ary;
    }
SWIGINTERN VALUE std_vector_Sl_si_taxi_BWSimStatsPaxRecord_Sg__to_s(std::vector< si_taxi::BWSimStatsPaxRecord > *self){
      std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >::iterator i = self->begin();
      std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >::iterator e = self->end();
      VALUE str = rb_str_new2( "" );
      VALUE tmp;
      for ( ; i != e; ++i )
	{
	  tmp = swig::from< std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >::value_type >( *i );
	  tmp = rb_obj_as_string( tmp );
	  str = rb_str_buf_append( str, tmp );
	}
      return str;
    }
SWIGINTERN VALUE std_vector_Sl_si_taxi_BWSimStatsPaxRecord_Sg__slice(std::vector< si_taxi::BWSimStatsPaxRecord > *self,std::vector< si_taxi::BWSimStatsPaxRecord >::difference_type i,std::vector< si_taxi::BWSimStatsPaxRecord >::difference_type j){
	if ( j <= 0 ) return Qnil;
	std::size_t len = self->size();
	if ( i < 0 ) i = len - i;
	j += i;
	if ( static_cast<std::size_t>(j) >= len ) j = len-1;

	VALUE r = Qnil;
	try {
	  r = swig::from< const std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >* >( swig::getslice(self, i, j) );
	}
	catch( std::out_of_range )
	  {
	  }
	return r;
      }
SWIGINTERN std::vector< si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > > *std_vector_Sl_si_taxi_BWSimStatsPaxRecord_Sg__each(std::vector< si_taxi::BWSimStatsPaxRecord > *self){
	if ( !rb_block_given_p() )
	  rb_raise( rb_eArgError, "no block given");

	VALUE r;
	std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >::const_iterator i = self->begin();
	std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >::const_iterator e = self->end();
	for ( ; i != e; ++i )
	  {
	    r = swig::from< std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >::value_type >(*i);
	    rb_yield(r);
	  }
	
	return self;
      }
SWIGINTERN std::vector< si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > > *std_vector_Sl_si_taxi_BWSimStatsPaxRecord_Sg__select(std::vector< si_taxi::BWSimStatsPaxRecord > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >* r = new std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >;
      std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >::const_iterator i = self->begin();
      std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >::const_iterator e = self->end();
      for ( ; i != e; ++i )
	{
	  VALUE v = swig::from< std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >::value_type >(*i);
	  if ( RTEST( rb_yield(v) ) )
	    self->insert( r->end(), *i);
	}
	
      return r;
    }
SWIGINTERN std::vector< si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > > *std_vector_Sl_si_taxi_BWSimStatsPaxRecord_Sg__reject_bang(std::vector< si_taxi::BWSimStatsPaxRecord > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >::iterator i = self->begin();
      std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >::iterator e = self->end();
      for ( ; i != e; )
	{
	  VALUE r = swig::from< std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >::value_type >(*i);
	  if ( RTEST( rb_yield(r) ) ) {
	    self->erase(i++);
            e = self->end();
	  } else {
	    ++i;
          }
	}
	
      return self;
    }
SWIGINTERN VALUE std_vector_Sl_si_taxi_BWSimStatsPaxRecord_Sg__delete_at(std::vector< si_taxi::BWSimStatsPaxRecord > *self,std::vector< si_taxi::BWSimStatsPaxRecord >::difference_type i){
      VALUE r = Qnil;
      try {
	std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >::iterator at = swig::getpos(self, i);
	r = swig::from< std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >::value_type >( *(at) );
	self->erase(at); 
      }
      catch (std::out_of_range)
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_si_taxi_BWSimStatsPaxRecord_Sg____delete2__(std::vector< si_taxi::BWSimStatsPaxRecord > *self,std::vector< si_taxi::BWSimStatsPaxRecord >::value_type const &i){
      VALUE r = Qnil;
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_si_taxi_BWSimStatsPaxRecord_Sg__pop(std::vector< si_taxi::BWSimStatsPaxRecord > *self){
      if (self->empty()) return Qnil;
      std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >::value_type x = self->back();
      self->pop_back();
      return swig::from< std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >::value_type >( x );
    }
SWIGINTERN std::vector< si_taxi::BWSimStatsPaxRecord >::value_type const std_vector_Sl_si_taxi_BWSimStatsPaxRecord_Sg__push(std::vector< si_taxi::BWSimStatsPaxRecord > *self,std::vector< si_taxi::BWSimStatsPaxRecord >::value_type const &e){
      self->push_back( e );
      return e;
    }
SWIGINTERN std::vector< si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > > *std_vector_Sl_si_taxi_BWSimStatsPaxRecord_Sg__reject(std::vector< si_taxi::BWSimStatsPaxRecord > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >* r = new std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >;
      std::remove_copy_if( self->begin(), self->end(),              
			   std::back_inserter(*r),
			   swig::yield< std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >::value_type >() );
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_si_taxi_BWSimStatsPaxRecord_Sg__at(std::vector< si_taxi::BWSimStatsPaxRecord > const *self,std::vector< si_taxi::BWSimStatsPaxRecord >::difference_type i){
      VALUE r = Qnil;
      try {
	r = swig::from< std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >::value_type >( *(swig::cgetpos(self, i)) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_si_taxi_BWSimStatsPaxRecord_Sg____getitem____SWIG_0(std::vector< si_taxi::BWSimStatsPaxRecord > const *self,std::vector< si_taxi::BWSimStatsPaxRecord >::difference_type i,std::vector< si_taxi::BWSimStatsPaxRecord >::difference_type j){
      if ( j <= 0 ) return Qnil;
      std::size_t len = self->size();
      if ( i < 0 ) i = len - i;
      j += i; if ( static_cast<std::size_t>(j) >= len ) j = len-1;

      VALUE r = Qnil;
      try {
	r = swig::from< const std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >* >( swig::getslice(self, i, j) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_si_taxi_BWSimStatsPaxRecord_Sg____getitem____SWIG_1(std::vector< si_taxi::BWSimStatsPaxRecord > const *self,std::vector< si_taxi::BWSimStatsPaxRecord >::difference_type i){
      VALUE r = Qnil;
      try {
	r = swig::from< std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >::value_type >( *(swig::cgetpos(self, i)) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_si_taxi_BWSimStatsPaxRecord_Sg____getitem____SWIG_2(std::vector< si_taxi::BWSimStatsPaxRecord > const *self,VALUE i){
      if ( rb_obj_is_kind_of( i, rb_cRange ) == Qfalse )
	{
	  rb_raise( rb_eTypeError, "not a valid index or range" );
	}

      VALUE r = Qnil;
      static ID id_end   = rb_intern("end");
      static ID id_start = rb_intern("begin");
      static ID id_noend = rb_intern("exclude_end?");

      VALUE start = rb_funcall( i, id_start, 0 );
      VALUE end   = rb_funcall( i, id_end, 0 );
      bool  noend = ( rb_funcall( i, id_noend, 0 ) == Qtrue );

      int len = self->size();

      int s = NUM2INT( start );
      if ( s < 0 ) s = len + s;
      else if ( s >= len ) return Qnil;

      int e = NUM2INT( end );
      if ( e < 0 ) e = len + e;

      if ( e < s ) return Qnil; //std::swap( s, e );

      if ( noend ) e -= 1;
      if ( e >= len ) e = len - 1;

      return swig::from< std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >* >( swig::getslice(self, s, e+1) );
    }
SWIGINTERN VALUE std_vector_Sl_si_taxi_BWSimStatsPaxRecord_Sg____setitem____SWIG_0(std::vector< si_taxi::BWSimStatsPaxRecord > *self,std::vector< si_taxi::BWSimStatsPaxRecord >::difference_type i,std::vector< si_taxi::BWSimStatsPaxRecord >::value_type const &x){
	std::size_t len = self->size();
	if ( i < 0 ) i = len - i;
	else if ( static_cast<std::size_t>(i) >= len )
	  self->resize( i+1, x );
	else
	  *(swig::getpos(self,i)) = x;

	return swig::from< std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >::value_type >( x );
      }
SWIGINTERN VALUE std_vector_Sl_si_taxi_BWSimStatsPaxRecord_Sg____setitem____SWIG_1(std::vector< si_taxi::BWSimStatsPaxRecord > *self,std::vector< si_taxi::BWSimStatsPaxRecord >::difference_type i,std::vector< si_taxi::BWSimStatsPaxRecord >::difference_type j,std::vector< si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > > const &v){

      if ( j <= 0 ) return Qnil;
      std::size_t len = self->size();
      if ( i < 0 ) i = len - i;
      j += i; 
      if ( static_cast<std::size_t>(j) >= len ) {
	self->resize( j+1, *(v.begin()) );
	j = len-1;
      }

      VALUE r = Qnil;
      swig::setslice(self, i, j, v);
      r = swig::from< const std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >* >( &v );
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_si_taxi_BWSimStatsPaxRecord_Sg__shift(std::vector< si_taxi::BWSimStatsPaxRecord > *self){
      if (self->empty()) return Qnil;
      std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >::value_type x = self->front();
      self->erase( self->begin() );
      return swig::from< std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >::value_type >( x );
    }
SWIGINTERN std::vector< si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > > *std_vector_Sl_si_taxi_BWSimStatsPaxRecord_Sg__insert__SWIG_0(std::vector< si_taxi::BWSimStatsPaxRecord > *self,std::vector< si_taxi::BWSimStatsPaxRecord >::difference_type pos,int argc,VALUE *argv,...){
      std::size_t len = self->size();
      std::size_t   i = swig::check_index( pos, len, true );
      std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >::iterator start;

      VALUE elem = argv[0];
      int idx = 0;
      try {
	std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >::value_type val = swig::as<std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >::value_type>( elem, true );
	if ( i >= len ) {
	  self->resize(i-1, val);
	  return self;
	}
	start = self->begin();
	std::advance( start, i );
	self->insert( start++, val );

	for ( ++idx; idx < argc; ++idx )
	  {
	    elem = argv[idx];
	    val = swig::as<std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >::value_type>( elem );
	    self->insert( start++, val );
	  }

      } 
      catch( std::invalid_argument )
	{
	  rb_raise( rb_eArgError, "%s",
		    Ruby_Format_TypeError( "", 
					   swig::type_name<std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >::value_type>(),
					   __FUNCTION__, idx+2, elem ));
	}


      return self;
    }
SWIGINTERN std::vector< si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > > *std_vector_Sl_si_taxi_BWSimStatsPaxRecord_Sg__unshift(std::vector< si_taxi::BWSimStatsPaxRecord > *self,int argc,VALUE *argv,...){
      for ( int idx = argc-1; idx >= 0; --idx )
	{
	  std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >::iterator start = self->begin();
	  VALUE elem = argv[idx];
	  try {
	    std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >::value_type val = swig::as<std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >::value_type>( elem, true );
	    self->insert( start, val );
	  }
	  catch( std::invalid_argument )
	    {
	      rb_raise( rb_eArgError, "%s",
			Ruby_Format_TypeError( "", 
					       swig::type_name<std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >::value_type>(),
					       __FUNCTION__, idx+2, elem ));
	    }
	}

      return self;
    }

/**
 * Easy way to seed the generator from Ruby, because it's not worth wrapping
 * the whole Boost.Random library just to do this.
 */
void seed_rng(unsigned int seed) {
  si_taxi::rng.seed(seed);
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (VALUE obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(VALUE obj, char** cptr, size_t* psize, int *alloc)
{
  if (TYPE(obj) == T_STRING) {
    #if defined(StringValuePtr)
    char *cstr = StringValuePtr(obj); 
    #else
    char *cstr = STR2CSTR(obj);
    #endif
    size_t size = RSTRING_LEN(obj) + 1;
    if (cptr)  {
      if (alloc) {
	if (*alloc == SWIG_NEWOBJ) {
	  *cptr = reinterpret_cast< char* >(memcpy((new char[size]), cstr, sizeof(char)*(size)));
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      }
    }
    if (psize) *psize = size;
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *)vptr;
	if (psize) *psize = vptr ? (strlen((char*)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }  
  return SWIG_TypeError;
}





SWIGINTERNINLINE VALUE 
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > LONG_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_NewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : Qnil;
    } else {
      return rb_str_new(carray, static_cast< long >(size));
    }
  } else {
    return Qnil;
  }
}


SWIGINTERNINLINE VALUE 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


SWIGINTERNINLINE VALUE 
SWIG_From_long_SS_long  (long long value)
{
  return LL2NUM(value);
}


SWIGINTERNINLINE VALUE 
SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
{
  return ULL2NUM(value);
}


SWIGINTERN int
SWIG_AsVal_bool (VALUE obj, bool *val)
{
  if (obj == Qtrue) {
    if (val) *val = true;
    return SWIG_OK;
  } else if (obj == Qfalse) {
    if (val) *val = false;
    return SWIG_OK;
  } else {
    int res = 0;
    if (SWIG_AsVal_int (obj, &res) == SWIG_OK) {    
      if (val) *val = res ? true : false;
      return SWIG_OK;
    }
  }  
  return SWIG_TypeError;
}


      namespace swig {
	template <>  struct traits<std::vector<si_taxi::BWPax, std::allocator< si_taxi::BWPax > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "si_taxi::BWPax" "," "std::allocator< si_taxi::BWPax >" " >";
	  }
	};
      }
    
SWIGINTERN std::vector< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *std_vector_Sl_si_taxi_BWPax_Sg__dup(std::vector< si_taxi::BWPax > *self){
      return new std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >(*self);
    }
SWIGINTERN VALUE std_vector_Sl_si_taxi_BWPax_Sg__inspect(std::vector< si_taxi::BWPax > *self){
      std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::const_iterator i = self->begin();
      std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::const_iterator e = self->end();
      const char *type_name = swig::type_name< std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > > >();
      VALUE str = rb_str_new2(type_name);
      str = rb_str_cat2( str, " [" );
      bool comma = false;
      VALUE tmp;
      for ( ; i != e; ++i, comma = true )
	{
	  if (comma) str = rb_str_cat2( str, "," );
	  tmp = swig::from< std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::value_type >( *i );
	  tmp = rb_inspect( tmp );
	  str = rb_str_buf_append( str, tmp );
	}
      str = rb_str_cat2( str, "]" );
      return str;
    }
SWIGINTERN VALUE std_vector_Sl_si_taxi_BWPax_Sg__to_a(std::vector< si_taxi::BWPax > *self){
      std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::const_iterator i = self->begin();
      std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::const_iterator e = self->end();
      VALUE ary = rb_ary_new2( std::distance( i, e ) );
      VALUE tmp;
      for ( ; i != e; ++i )
	{
	  tmp = swig::from< std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::value_type >( *i );
	  rb_ary_push( ary, tmp );
	}
      return ary;
    }
SWIGINTERN VALUE std_vector_Sl_si_taxi_BWPax_Sg__to_s(std::vector< si_taxi::BWPax > *self){
      std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::iterator i = self->begin();
      std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::iterator e = self->end();
      VALUE str = rb_str_new2( "" );
      VALUE tmp;
      for ( ; i != e; ++i )
	{
	  tmp = swig::from< std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::value_type >( *i );
	  tmp = rb_obj_as_string( tmp );
	  str = rb_str_buf_append( str, tmp );
	}
      return str;
    }
SWIGINTERN VALUE std_vector_Sl_si_taxi_BWPax_Sg__slice(std::vector< si_taxi::BWPax > *self,std::vector< si_taxi::BWPax >::difference_type i,std::vector< si_taxi::BWPax >::difference_type j){
	if ( j <= 0 ) return Qnil;
	std::size_t len = self->size();
	if ( i < 0 ) i = len - i;
	j += i;
	if ( static_cast<std::size_t>(j) >= len ) j = len-1;

	VALUE r = Qnil;
	try {
	  r = swig::from< const std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >* >( swig::getslice(self, i, j) );
	}
	catch( std::out_of_range )
	  {
	  }
	return r;
      }
SWIGINTERN std::vector< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *std_vector_Sl_si_taxi_BWPax_Sg__each(std::vector< si_taxi::BWPax > *self){
	if ( !rb_block_given_p() )
	  rb_raise( rb_eArgError, "no block given");

	VALUE r;
	std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::const_iterator i = self->begin();
	std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::const_iterator e = self->end();
	for ( ; i != e; ++i )
	  {
	    r = swig::from< std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::value_type >(*i);
	    rb_yield(r);
	  }
	
	return self;
      }
SWIGINTERN std::vector< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *std_vector_Sl_si_taxi_BWPax_Sg__select(std::vector< si_taxi::BWPax > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >* r = new std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >;
      std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::const_iterator i = self->begin();
      std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::const_iterator e = self->end();
      for ( ; i != e; ++i )
	{
	  VALUE v = swig::from< std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::value_type >(*i);
	  if ( RTEST( rb_yield(v) ) )
	    self->insert( r->end(), *i);
	}
	
      return r;
    }
SWIGINTERN std::vector< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *std_vector_Sl_si_taxi_BWPax_Sg__reject_bang(std::vector< si_taxi::BWPax > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::iterator i = self->begin();
      std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::iterator e = self->end();
      for ( ; i != e; )
	{
	  VALUE r = swig::from< std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::value_type >(*i);
	  if ( RTEST( rb_yield(r) ) ) {
	    self->erase(i++);
            e = self->end();
	  } else {
	    ++i;
          }
	}
	
      return self;
    }
SWIGINTERN VALUE std_vector_Sl_si_taxi_BWPax_Sg__delete_at(std::vector< si_taxi::BWPax > *self,std::vector< si_taxi::BWPax >::difference_type i){
      VALUE r = Qnil;
      try {
	std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::iterator at = swig::getpos(self, i);
	r = swig::from< std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::value_type >( *(at) );
	self->erase(at); 
      }
      catch (std::out_of_range)
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_si_taxi_BWPax_Sg____delete2__(std::vector< si_taxi::BWPax > *self,std::vector< si_taxi::BWPax >::value_type const &i){
      VALUE r = Qnil;
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_si_taxi_BWPax_Sg__pop(std::vector< si_taxi::BWPax > *self){
      if (self->empty()) return Qnil;
      std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::value_type x = self->back();
      self->pop_back();
      return swig::from< std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::value_type >( x );
    }
SWIGINTERN std::vector< si_taxi::BWPax >::value_type const std_vector_Sl_si_taxi_BWPax_Sg__push(std::vector< si_taxi::BWPax > *self,std::vector< si_taxi::BWPax >::value_type const &e){
      self->push_back( e );
      return e;
    }
SWIGINTERN std::vector< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *std_vector_Sl_si_taxi_BWPax_Sg__reject(std::vector< si_taxi::BWPax > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >* r = new std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >;
      std::remove_copy_if( self->begin(), self->end(),              
			   std::back_inserter(*r),
			   swig::yield< std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::value_type >() );
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_si_taxi_BWPax_Sg__at(std::vector< si_taxi::BWPax > const *self,std::vector< si_taxi::BWPax >::difference_type i){
      VALUE r = Qnil;
      try {
	r = swig::from< std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::value_type >( *(swig::cgetpos(self, i)) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_si_taxi_BWPax_Sg____getitem____SWIG_0(std::vector< si_taxi::BWPax > const *self,std::vector< si_taxi::BWPax >::difference_type i,std::vector< si_taxi::BWPax >::difference_type j){
      if ( j <= 0 ) return Qnil;
      std::size_t len = self->size();
      if ( i < 0 ) i = len - i;
      j += i; if ( static_cast<std::size_t>(j) >= len ) j = len-1;

      VALUE r = Qnil;
      try {
	r = swig::from< const std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >* >( swig::getslice(self, i, j) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_si_taxi_BWPax_Sg____getitem____SWIG_1(std::vector< si_taxi::BWPax > const *self,std::vector< si_taxi::BWPax >::difference_type i){
      VALUE r = Qnil;
      try {
	r = swig::from< std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::value_type >( *(swig::cgetpos(self, i)) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_si_taxi_BWPax_Sg____getitem____SWIG_2(std::vector< si_taxi::BWPax > const *self,VALUE i){
      if ( rb_obj_is_kind_of( i, rb_cRange ) == Qfalse )
	{
	  rb_raise( rb_eTypeError, "not a valid index or range" );
	}

      VALUE r = Qnil;
      static ID id_end   = rb_intern("end");
      static ID id_start = rb_intern("begin");
      static ID id_noend = rb_intern("exclude_end?");

      VALUE start = rb_funcall( i, id_start, 0 );
      VALUE end   = rb_funcall( i, id_end, 0 );
      bool  noend = ( rb_funcall( i, id_noend, 0 ) == Qtrue );

      int len = self->size();

      int s = NUM2INT( start );
      if ( s < 0 ) s = len + s;
      else if ( s >= len ) return Qnil;

      int e = NUM2INT( end );
      if ( e < 0 ) e = len + e;

      if ( e < s ) return Qnil; //std::swap( s, e );

      if ( noend ) e -= 1;
      if ( e >= len ) e = len - 1;

      return swig::from< std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >* >( swig::getslice(self, s, e+1) );
    }
SWIGINTERN VALUE std_vector_Sl_si_taxi_BWPax_Sg____setitem____SWIG_0(std::vector< si_taxi::BWPax > *self,std::vector< si_taxi::BWPax >::difference_type i,std::vector< si_taxi::BWPax >::value_type const &x){
	std::size_t len = self->size();
	if ( i < 0 ) i = len - i;
	else if ( static_cast<std::size_t>(i) >= len )
	  self->resize( i+1, x );
	else
	  *(swig::getpos(self,i)) = x;

	return swig::from< std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::value_type >( x );
      }
SWIGINTERN VALUE std_vector_Sl_si_taxi_BWPax_Sg____setitem____SWIG_1(std::vector< si_taxi::BWPax > *self,std::vector< si_taxi::BWPax >::difference_type i,std::vector< si_taxi::BWPax >::difference_type j,std::vector< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > const &v){

      if ( j <= 0 ) return Qnil;
      std::size_t len = self->size();
      if ( i < 0 ) i = len - i;
      j += i; 
      if ( static_cast<std::size_t>(j) >= len ) {
	self->resize( j+1, *(v.begin()) );
	j = len-1;
      }

      VALUE r = Qnil;
      swig::setslice(self, i, j, v);
      r = swig::from< const std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >* >( &v );
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_si_taxi_BWPax_Sg__shift(std::vector< si_taxi::BWPax > *self){
      if (self->empty()) return Qnil;
      std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::value_type x = self->front();
      self->erase( self->begin() );
      return swig::from< std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::value_type >( x );
    }
SWIGINTERN std::vector< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *std_vector_Sl_si_taxi_BWPax_Sg__insert__SWIG_0(std::vector< si_taxi::BWPax > *self,std::vector< si_taxi::BWPax >::difference_type pos,int argc,VALUE *argv,...){
      std::size_t len = self->size();
      std::size_t   i = swig::check_index( pos, len, true );
      std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::iterator start;

      VALUE elem = argv[0];
      int idx = 0;
      try {
	std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::value_type val = swig::as<std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::value_type>( elem, true );
	if ( i >= len ) {
	  self->resize(i-1, val);
	  return self;
	}
	start = self->begin();
	std::advance( start, i );
	self->insert( start++, val );

	for ( ++idx; idx < argc; ++idx )
	  {
	    elem = argv[idx];
	    val = swig::as<std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::value_type>( elem );
	    self->insert( start++, val );
	  }

      } 
      catch( std::invalid_argument )
	{
	  rb_raise( rb_eArgError, "%s",
		    Ruby_Format_TypeError( "", 
					   swig::type_name<std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::value_type>(),
					   __FUNCTION__, idx+2, elem ));
	}


      return self;
    }
SWIGINTERN std::vector< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *std_vector_Sl_si_taxi_BWPax_Sg__unshift(std::vector< si_taxi::BWPax > *self,int argc,VALUE *argv,...){
      for ( int idx = argc-1; idx >= 0; --idx )
	{
	  std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::iterator start = self->begin();
	  VALUE elem = argv[idx];
	  try {
	    std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::value_type val = swig::as<std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::value_type>( elem, true );
	    self->insert( start, val );
	  }
	  catch( std::invalid_argument )
	    {
	      rb_raise( rb_eArgError, "%s",
			Ruby_Format_TypeError( "", 
					       swig::type_name<std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::value_type>(),
					       __FUNCTION__, idx+2, elem ));
	    }
	}

      return self;
    }

  namespace swig {
    template <class T>
    struct traits_asptr<std::deque<T> >  {
      static int asptr(VALUE obj, std::deque<T>  **vec) {
	return traits_asptr_stdseq<std::deque<T> >::asptr(obj, vec);
      }
    };

    template <class T>
    struct traits_from<std::deque<T> > {
      static VALUE from(const std::deque<T> & vec) {
	return traits_from_stdseq<std::deque<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::deque<si_taxi::BWPax, std::allocator< si_taxi::BWPax > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::deque<" "si_taxi::BWPax" " >";
	  }
	};
      }
    
SWIGINTERN std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *std_deque_Sl_si_taxi_BWPax_Sg__dup(std::deque< si_taxi::BWPax > *self){
      return new std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >(*self);
    }
SWIGINTERN VALUE std_deque_Sl_si_taxi_BWPax_Sg__inspect(std::deque< si_taxi::BWPax > *self){
      std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::const_iterator i = self->begin();
      std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::const_iterator e = self->end();
      const char *type_name = swig::type_name< std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > > >();
      VALUE str = rb_str_new2(type_name);
      str = rb_str_cat2( str, " [" );
      bool comma = false;
      VALUE tmp;
      for ( ; i != e; ++i, comma = true )
	{
	  if (comma) str = rb_str_cat2( str, "," );
	  tmp = swig::from< std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::value_type >( *i );
	  tmp = rb_inspect( tmp );
	  str = rb_str_buf_append( str, tmp );
	}
      str = rb_str_cat2( str, "]" );
      return str;
    }
SWIGINTERN VALUE std_deque_Sl_si_taxi_BWPax_Sg__to_a(std::deque< si_taxi::BWPax > *self){
      std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::const_iterator i = self->begin();
      std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::const_iterator e = self->end();
      VALUE ary = rb_ary_new2( std::distance( i, e ) );
      VALUE tmp;
      for ( ; i != e; ++i )
	{
	  tmp = swig::from< std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::value_type >( *i );
	  rb_ary_push( ary, tmp );
	}
      return ary;
    }
SWIGINTERN VALUE std_deque_Sl_si_taxi_BWPax_Sg__to_s(std::deque< si_taxi::BWPax > *self){
      std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::iterator i = self->begin();
      std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::iterator e = self->end();
      VALUE str = rb_str_new2( "" );
      VALUE tmp;
      for ( ; i != e; ++i )
	{
	  tmp = swig::from< std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::value_type >( *i );
	  tmp = rb_obj_as_string( tmp );
	  str = rb_str_buf_append( str, tmp );
	}
      return str;
    }
SWIGINTERN VALUE std_deque_Sl_si_taxi_BWPax_Sg__slice(std::deque< si_taxi::BWPax > *self,std::deque< si_taxi::BWPax >::difference_type i,std::deque< si_taxi::BWPax >::difference_type j){
	if ( j <= 0 ) return Qnil;
	std::size_t len = self->size();
	if ( i < 0 ) i = len - i;
	j += i;
	if ( static_cast<std::size_t>(j) >= len ) j = len-1;

	VALUE r = Qnil;
	try {
	  r = swig::from< const std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >* >( swig::getslice(self, i, j) );
	}
	catch( std::out_of_range )
	  {
	  }
	return r;
      }
SWIGINTERN std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *std_deque_Sl_si_taxi_BWPax_Sg__each(std::deque< si_taxi::BWPax > *self){
	if ( !rb_block_given_p() )
	  rb_raise( rb_eArgError, "no block given");

	VALUE r;
	std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::const_iterator i = self->begin();
	std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::const_iterator e = self->end();
	for ( ; i != e; ++i )
	  {
	    r = swig::from< std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::value_type >(*i);
	    rb_yield(r);
	  }
	
	return self;
      }
SWIGINTERN std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *std_deque_Sl_si_taxi_BWPax_Sg__select(std::deque< si_taxi::BWPax > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >* r = new std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >;
      std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::const_iterator i = self->begin();
      std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::const_iterator e = self->end();
      for ( ; i != e; ++i )
	{
	  VALUE v = swig::from< std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::value_type >(*i);
	  if ( RTEST( rb_yield(v) ) )
	    self->insert( r->end(), *i);
	}
	
      return r;
    }
SWIGINTERN std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *std_deque_Sl_si_taxi_BWPax_Sg__reject_bang(std::deque< si_taxi::BWPax > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::iterator i = self->begin();
      std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::iterator e = self->end();
      for ( ; i != e; )
	{
	  VALUE r = swig::from< std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::value_type >(*i);
	  if ( RTEST( rb_yield(r) ) ) {
	    self->erase(i++);
            e = self->end();
	  } else {
	    ++i;
          }
	}
	
      return self;
    }
SWIGINTERN VALUE std_deque_Sl_si_taxi_BWPax_Sg__delete_at(std::deque< si_taxi::BWPax > *self,std::deque< si_taxi::BWPax >::difference_type i){
      VALUE r = Qnil;
      try {
	std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::iterator at = swig::getpos(self, i);
	r = swig::from< std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::value_type >( *(at) );
	self->erase(at); 
      }
      catch (std::out_of_range)
	{
	}
      return r;
    }
SWIGINTERN VALUE std_deque_Sl_si_taxi_BWPax_Sg____delete2__(std::deque< si_taxi::BWPax > *self,std::deque< si_taxi::BWPax >::value_type const &i){
      VALUE r = Qnil;
      return r;
    }
SWIGINTERN VALUE std_deque_Sl_si_taxi_BWPax_Sg__pop(std::deque< si_taxi::BWPax > *self){
      if (self->empty()) return Qnil;
      std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::value_type x = self->back();
      self->pop_back();
      return swig::from< std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::value_type >( x );
    }
SWIGINTERN std::deque< si_taxi::BWPax >::value_type const std_deque_Sl_si_taxi_BWPax_Sg__push(std::deque< si_taxi::BWPax > *self,std::deque< si_taxi::BWPax >::value_type const &e){
      self->push_back( e );
      return e;
    }
SWIGINTERN std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *std_deque_Sl_si_taxi_BWPax_Sg__reject(std::deque< si_taxi::BWPax > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >* r = new std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >;
      std::remove_copy_if( self->begin(), self->end(),              
			   std::back_inserter(*r),
			   swig::yield< std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::value_type >() );
      return r;
    }
SWIGINTERN VALUE std_deque_Sl_si_taxi_BWPax_Sg__at(std::deque< si_taxi::BWPax > const *self,std::deque< si_taxi::BWPax >::difference_type i){
      VALUE r = Qnil;
      try {
	r = swig::from< std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::value_type >( *(swig::cgetpos(self, i)) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_deque_Sl_si_taxi_BWPax_Sg____getitem____SWIG_0(std::deque< si_taxi::BWPax > const *self,std::deque< si_taxi::BWPax >::difference_type i,std::deque< si_taxi::BWPax >::difference_type j){
      if ( j <= 0 ) return Qnil;
      std::size_t len = self->size();
      if ( i < 0 ) i = len - i;
      j += i; if ( static_cast<std::size_t>(j) >= len ) j = len-1;

      VALUE r = Qnil;
      try {
	r = swig::from< const std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >* >( swig::getslice(self, i, j) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_deque_Sl_si_taxi_BWPax_Sg____getitem____SWIG_1(std::deque< si_taxi::BWPax > const *self,std::deque< si_taxi::BWPax >::difference_type i){
      VALUE r = Qnil;
      try {
	r = swig::from< std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::value_type >( *(swig::cgetpos(self, i)) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_deque_Sl_si_taxi_BWPax_Sg____getitem____SWIG_2(std::deque< si_taxi::BWPax > const *self,VALUE i){
      if ( rb_obj_is_kind_of( i, rb_cRange ) == Qfalse )
	{
	  rb_raise( rb_eTypeError, "not a valid index or range" );
	}

      VALUE r = Qnil;
      static ID id_end   = rb_intern("end");
      static ID id_start = rb_intern("begin");
      static ID id_noend = rb_intern("exclude_end?");

      VALUE start = rb_funcall( i, id_start, 0 );
      VALUE end   = rb_funcall( i, id_end, 0 );
      bool  noend = ( rb_funcall( i, id_noend, 0 ) == Qtrue );

      int len = self->size();

      int s = NUM2INT( start );
      if ( s < 0 ) s = len + s;
      else if ( s >= len ) return Qnil;

      int e = NUM2INT( end );
      if ( e < 0 ) e = len + e;

      if ( e < s ) return Qnil; //std::swap( s, e );

      if ( noend ) e -= 1;
      if ( e >= len ) e = len - 1;

      return swig::from< std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >* >( swig::getslice(self, s, e+1) );
    }
SWIGINTERN VALUE std_deque_Sl_si_taxi_BWPax_Sg____setitem____SWIG_0(std::deque< si_taxi::BWPax > *self,std::deque< si_taxi::BWPax >::difference_type i,std::deque< si_taxi::BWPax >::value_type const &x){
	std::size_t len = self->size();
	if ( i < 0 ) i = len - i;
	else if ( static_cast<std::size_t>(i) >= len )
	  self->resize( i+1, x );
	else
	  *(swig::getpos(self,i)) = x;

	return swig::from< std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >::value_type >( x );
      }
SWIGINTERN VALUE std_deque_Sl_si_taxi_BWPax_Sg____setitem____SWIG_1(std::deque< si_taxi::BWPax > *self,std::deque< si_taxi::BWPax >::difference_type i,std::deque< si_taxi::BWPax >::difference_type j,std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > const &v){

      if ( j <= 0 ) return Qnil;
      std::size_t len = self->size();
      if ( i < 0 ) i = len - i;
      j += i; 
      if ( static_cast<std::size_t>(j) >= len ) {
	self->resize( j+1, *(v.begin()) );
	j = len-1;
      }

      VALUE r = Qnil;
      swig::setslice(self, i, j, v);
      r = swig::from< const std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >* >( &v );
      return r;
    }

namespace swig {
  template <> struct traits<long > {
    typedef value_category category;
    static const char* type_name() { return"long"; }
  };  
  template <>  struct traits_asval<long > {   
    typedef long value_type;
    static int asval(VALUE obj, value_type *val) { 
      return SWIG_AsVal_long (obj, val);
    }
  };
  template <>  struct traits_from<long > {
    typedef long value_type;
    static VALUE from(const value_type& val) {
      return SWIG_From_long  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::deque<long, std::allocator< long > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::deque<" "long" " >";
	  }
	};
      }
    
SWIGINTERN std::deque< long,std::allocator< long > > *std_deque_Sl_si_taxi_BWTime_Sg__dup(std::deque< si_taxi::BWTime > *self){
      return new std::deque<long,std::allocator< long > >(*self);
    }
SWIGINTERN VALUE std_deque_Sl_si_taxi_BWTime_Sg__inspect(std::deque< si_taxi::BWTime > *self){
      std::deque<long,std::allocator< long > >::const_iterator i = self->begin();
      std::deque<long,std::allocator< long > >::const_iterator e = self->end();
      const char *type_name = swig::type_name< std::deque<long,std::allocator< long > > >();
      VALUE str = rb_str_new2(type_name);
      str = rb_str_cat2( str, " [" );
      bool comma = false;
      VALUE tmp;
      for ( ; i != e; ++i, comma = true )
	{
	  if (comma) str = rb_str_cat2( str, "," );
	  tmp = swig::from< std::deque<long,std::allocator< long > >::value_type >( *i );
	  tmp = rb_inspect( tmp );
	  str = rb_str_buf_append( str, tmp );
	}
      str = rb_str_cat2( str, "]" );
      return str;
    }
SWIGINTERN VALUE std_deque_Sl_si_taxi_BWTime_Sg__to_a(std::deque< si_taxi::BWTime > *self){
      std::deque<long,std::allocator< long > >::const_iterator i = self->begin();
      std::deque<long,std::allocator< long > >::const_iterator e = self->end();
      VALUE ary = rb_ary_new2( std::distance( i, e ) );
      VALUE tmp;
      for ( ; i != e; ++i )
	{
	  tmp = swig::from< std::deque<long,std::allocator< long > >::value_type >( *i );
	  rb_ary_push( ary, tmp );
	}
      return ary;
    }
SWIGINTERN VALUE std_deque_Sl_si_taxi_BWTime_Sg__to_s(std::deque< si_taxi::BWTime > *self){
      std::deque<long,std::allocator< long > >::iterator i = self->begin();
      std::deque<long,std::allocator< long > >::iterator e = self->end();
      VALUE str = rb_str_new2( "" );
      VALUE tmp;
      for ( ; i != e; ++i )
	{
	  tmp = swig::from< std::deque<long,std::allocator< long > >::value_type >( *i );
	  tmp = rb_obj_as_string( tmp );
	  str = rb_str_buf_append( str, tmp );
	}
      return str;
    }
SWIGINTERN VALUE std_deque_Sl_si_taxi_BWTime_Sg__slice(std::deque< si_taxi::BWTime > *self,std::deque< long >::difference_type i,std::deque< long >::difference_type j){
	if ( j <= 0 ) return Qnil;
	std::size_t len = self->size();
	if ( i < 0 ) i = len - i;
	j += i;
	if ( static_cast<std::size_t>(j) >= len ) j = len-1;

	VALUE r = Qnil;
	try {
	  r = swig::from< const std::deque<long,std::allocator< long > >* >( swig::getslice(self, i, j) );
	}
	catch( std::out_of_range )
	  {
	  }
	return r;
      }
SWIGINTERN std::deque< long,std::allocator< long > > *std_deque_Sl_si_taxi_BWTime_Sg__each(std::deque< si_taxi::BWTime > *self){
	if ( !rb_block_given_p() )
	  rb_raise( rb_eArgError, "no block given");

	VALUE r;
	std::deque<long,std::allocator< long > >::const_iterator i = self->begin();
	std::deque<long,std::allocator< long > >::const_iterator e = self->end();
	for ( ; i != e; ++i )
	  {
	    r = swig::from< std::deque<long,std::allocator< long > >::value_type >(*i);
	    rb_yield(r);
	  }
	
	return self;
      }
SWIGINTERN std::deque< long,std::allocator< long > > *std_deque_Sl_si_taxi_BWTime_Sg__select(std::deque< si_taxi::BWTime > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::deque<long,std::allocator< long > >* r = new std::deque<long,std::allocator< long > >;
      std::deque<long,std::allocator< long > >::const_iterator i = self->begin();
      std::deque<long,std::allocator< long > >::const_iterator e = self->end();
      for ( ; i != e; ++i )
	{
	  VALUE v = swig::from< std::deque<long,std::allocator< long > >::value_type >(*i);
	  if ( RTEST( rb_yield(v) ) )
	    self->insert( r->end(), *i);
	}
	
      return r;
    }
SWIGINTERN std::deque< long,std::allocator< long > > *std_deque_Sl_si_taxi_BWTime_Sg__reject_bang(std::deque< si_taxi::BWTime > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::deque<long,std::allocator< long > >::iterator i = self->begin();
      std::deque<long,std::allocator< long > >::iterator e = self->end();
      for ( ; i != e; )
	{
	  VALUE r = swig::from< std::deque<long,std::allocator< long > >::value_type >(*i);
	  if ( RTEST( rb_yield(r) ) ) {
	    self->erase(i++);
            e = self->end();
	  } else {
	    ++i;
          }
	}
	
      return self;
    }
SWIGINTERN VALUE std_deque_Sl_si_taxi_BWTime_Sg__delete_at(std::deque< si_taxi::BWTime > *self,std::deque< long >::difference_type i){
      VALUE r = Qnil;
      try {
	std::deque<long,std::allocator< long > >::iterator at = swig::getpos(self, i);
	r = swig::from< std::deque<long,std::allocator< long > >::value_type >( *(at) );
	self->erase(at); 
      }
      catch (std::out_of_range)
	{
	}
      return r;
    }
SWIGINTERN VALUE std_deque_Sl_si_taxi_BWTime_Sg____delete2__(std::deque< si_taxi::BWTime > *self,std::deque< long >::value_type const &i){
      VALUE r = Qnil;
      return r;
    }
SWIGINTERN VALUE std_deque_Sl_si_taxi_BWTime_Sg__pop(std::deque< si_taxi::BWTime > *self){
      if (self->empty()) return Qnil;
      std::deque<long,std::allocator< long > >::value_type x = self->back();
      self->pop_back();
      return swig::from< std::deque<long,std::allocator< long > >::value_type >( x );
    }
SWIGINTERN std::deque< long >::value_type const std_deque_Sl_si_taxi_BWTime_Sg__push(std::deque< si_taxi::BWTime > *self,std::deque< long >::value_type const &e){
      self->push_back( e );
      return e;
    }
SWIGINTERN std::deque< long,std::allocator< long > > *std_deque_Sl_si_taxi_BWTime_Sg__reject(std::deque< si_taxi::BWTime > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::deque<long,std::allocator< long > >* r = new std::deque<long,std::allocator< long > >;
      std::remove_copy_if( self->begin(), self->end(),              
			   std::back_inserter(*r),
			   swig::yield< std::deque<long,std::allocator< long > >::value_type >() );
      return r;
    }
SWIGINTERN VALUE std_deque_Sl_si_taxi_BWTime_Sg__at(std::deque< si_taxi::BWTime > const *self,std::deque< long >::difference_type i){
      VALUE r = Qnil;
      try {
	r = swig::from< std::deque<long,std::allocator< long > >::value_type >( *(swig::cgetpos(self, i)) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_deque_Sl_si_taxi_BWTime_Sg____getitem____SWIG_0(std::deque< si_taxi::BWTime > const *self,std::deque< long >::difference_type i,std::deque< long >::difference_type j){
      if ( j <= 0 ) return Qnil;
      std::size_t len = self->size();
      if ( i < 0 ) i = len - i;
      j += i; if ( static_cast<std::size_t>(j) >= len ) j = len-1;

      VALUE r = Qnil;
      try {
	r = swig::from< const std::deque<long,std::allocator< long > >* >( swig::getslice(self, i, j) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_deque_Sl_si_taxi_BWTime_Sg____getitem____SWIG_1(std::deque< si_taxi::BWTime > const *self,std::deque< long >::difference_type i){
      VALUE r = Qnil;
      try {
	r = swig::from< std::deque<long,std::allocator< long > >::value_type >( *(swig::cgetpos(self, i)) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_deque_Sl_si_taxi_BWTime_Sg____getitem____SWIG_2(std::deque< si_taxi::BWTime > const *self,VALUE i){
      if ( rb_obj_is_kind_of( i, rb_cRange ) == Qfalse )
	{
	  rb_raise( rb_eTypeError, "not a valid index or range" );
	}

      VALUE r = Qnil;
      static ID id_end   = rb_intern("end");
      static ID id_start = rb_intern("begin");
      static ID id_noend = rb_intern("exclude_end?");

      VALUE start = rb_funcall( i, id_start, 0 );
      VALUE end   = rb_funcall( i, id_end, 0 );
      bool  noend = ( rb_funcall( i, id_noend, 0 ) == Qtrue );

      int len = self->size();

      int s = NUM2INT( start );
      if ( s < 0 ) s = len + s;
      else if ( s >= len ) return Qnil;

      int e = NUM2INT( end );
      if ( e < 0 ) e = len + e;

      if ( e < s ) return Qnil; //std::swap( s, e );

      if ( noend ) e -= 1;
      if ( e >= len ) e = len - 1;

      return swig::from< std::deque<long,std::allocator< long > >* >( swig::getslice(self, s, e+1) );
    }
SWIGINTERN VALUE std_deque_Sl_si_taxi_BWTime_Sg____setitem____SWIG_0(std::deque< si_taxi::BWTime > *self,std::deque< long >::difference_type i,std::deque< long >::value_type const &x){
	std::size_t len = self->size();
	if ( i < 0 ) i = len - i;
	else if ( static_cast<std::size_t>(i) >= len )
	  self->resize( i+1, x );
	else
	  *(swig::getpos(self,i)) = x;

	return swig::from< std::deque<long,std::allocator< long > >::value_type >( x );
      }
SWIGINTERN VALUE std_deque_Sl_si_taxi_BWTime_Sg____setitem____SWIG_1(std::deque< si_taxi::BWTime > *self,std::deque< long >::difference_type i,std::deque< long >::difference_type j,std::deque< long,std::allocator< long > > const &v){

      if ( j <= 0 ) return Qnil;
      std::size_t len = self->size();
      if ( i < 0 ) i = len - i;
      j += i; 
      if ( static_cast<std::size_t>(j) >= len ) {
	self->resize( j+1, *(v.begin()) );
	j = len-1;
      }

      VALUE r = Qnil;
      swig::setslice(self, i, j, v);
      r = swig::from< const std::deque<long,std::allocator< long > >* >( &v );
      return r;
    }

      namespace swig {
	template <>  struct traits<std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >, std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >" "," "std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > >" " >";
	  }
	};
      }
    
SWIGINTERN std::vector< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > > *std_vector_Sl_std_deque_Sl_si_taxi_BWTime_Sg__Sg__dup(std::vector< std::deque< si_taxi::BWTime > > *self){
      return new std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >(*self);
    }
SWIGINTERN VALUE std_vector_Sl_std_deque_Sl_si_taxi_BWTime_Sg__Sg__inspect(std::vector< std::deque< si_taxi::BWTime > > *self){
      std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >::const_iterator i = self->begin();
      std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >::const_iterator e = self->end();
      const char *type_name = swig::type_name< std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > > >();
      VALUE str = rb_str_new2(type_name);
      str = rb_str_cat2( str, " [" );
      bool comma = false;
      VALUE tmp;
      for ( ; i != e; ++i, comma = true )
	{
	  if (comma) str = rb_str_cat2( str, "," );
	  tmp = swig::from< std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >::value_type >( *i );
	  tmp = rb_inspect( tmp );
	  str = rb_str_buf_append( str, tmp );
	}
      str = rb_str_cat2( str, "]" );
      return str;
    }
SWIGINTERN VALUE std_vector_Sl_std_deque_Sl_si_taxi_BWTime_Sg__Sg__to_a(std::vector< std::deque< si_taxi::BWTime > > *self){
      std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >::const_iterator i = self->begin();
      std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >::const_iterator e = self->end();
      VALUE ary = rb_ary_new2( std::distance( i, e ) );
      VALUE tmp;
      for ( ; i != e; ++i )
	{
	  tmp = swig::from< std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >::value_type >( *i );
	  rb_ary_push( ary, tmp );
	}
      return ary;
    }
SWIGINTERN VALUE std_vector_Sl_std_deque_Sl_si_taxi_BWTime_Sg__Sg__to_s(std::vector< std::deque< si_taxi::BWTime > > *self){
      std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >::iterator i = self->begin();
      std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >::iterator e = self->end();
      VALUE str = rb_str_new2( "" );
      VALUE tmp;
      for ( ; i != e; ++i )
	{
	  tmp = swig::from< std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >::value_type >( *i );
	  tmp = rb_obj_as_string( tmp );
	  str = rb_str_buf_append( str, tmp );
	}
      return str;
    }
SWIGINTERN VALUE std_vector_Sl_std_deque_Sl_si_taxi_BWTime_Sg__Sg__slice(std::vector< std::deque< si_taxi::BWTime > > *self,std::vector< std::deque< long > >::difference_type i,std::vector< std::deque< long > >::difference_type j){
	if ( j <= 0 ) return Qnil;
	std::size_t len = self->size();
	if ( i < 0 ) i = len - i;
	j += i;
	if ( static_cast<std::size_t>(j) >= len ) j = len-1;

	VALUE r = Qnil;
	try {
	  r = swig::from< const std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >* >( swig::getslice(self, i, j) );
	}
	catch( std::out_of_range )
	  {
	  }
	return r;
      }
SWIGINTERN std::vector< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > > *std_vector_Sl_std_deque_Sl_si_taxi_BWTime_Sg__Sg__each(std::vector< std::deque< si_taxi::BWTime > > *self){
	if ( !rb_block_given_p() )
	  rb_raise( rb_eArgError, "no block given");

	VALUE r;
	std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >::const_iterator i = self->begin();
	std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >::const_iterator e = self->end();
	for ( ; i != e; ++i )
	  {
	    r = swig::from< std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >::value_type >(*i);
	    rb_yield(r);
	  }
	
	return self;
      }
SWIGINTERN std::vector< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > > *std_vector_Sl_std_deque_Sl_si_taxi_BWTime_Sg__Sg__select(std::vector< std::deque< si_taxi::BWTime > > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >* r = new std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >;
      std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >::const_iterator i = self->begin();
      std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >::const_iterator e = self->end();
      for ( ; i != e; ++i )
	{
	  VALUE v = swig::from< std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >::value_type >(*i);
	  if ( RTEST( rb_yield(v) ) )
	    self->insert( r->end(), *i);
	}
	
      return r;
    }
SWIGINTERN std::vector< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > > *std_vector_Sl_std_deque_Sl_si_taxi_BWTime_Sg__Sg__reject_bang(std::vector< std::deque< si_taxi::BWTime > > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >::iterator i = self->begin();
      std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >::iterator e = self->end();
      for ( ; i != e; )
	{
	  VALUE r = swig::from< std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >::value_type >(*i);
	  if ( RTEST( rb_yield(r) ) ) {
	    self->erase(i++);
            e = self->end();
	  } else {
	    ++i;
          }
	}
	
      return self;
    }
SWIGINTERN VALUE std_vector_Sl_std_deque_Sl_si_taxi_BWTime_Sg__Sg__delete_at(std::vector< std::deque< si_taxi::BWTime > > *self,std::vector< std::deque< long > >::difference_type i){
      VALUE r = Qnil;
      try {
	std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >::iterator at = swig::getpos(self, i);
	r = swig::from< std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >::value_type >( *(at) );
	self->erase(at); 
      }
      catch (std::out_of_range)
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_std_deque_Sl_si_taxi_BWTime_Sg__Sg____delete2__(std::vector< std::deque< si_taxi::BWTime > > *self,std::vector< std::deque< long > >::value_type const &i){
      VALUE r = Qnil;
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_std_deque_Sl_si_taxi_BWTime_Sg__Sg__pop(std::vector< std::deque< si_taxi::BWTime > > *self){
      if (self->empty()) return Qnil;
      std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >::value_type x = self->back();
      self->pop_back();
      return swig::from< std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >::value_type >( x );
    }
SWIGINTERN std::vector< std::deque< long > >::value_type const std_vector_Sl_std_deque_Sl_si_taxi_BWTime_Sg__Sg__push(std::vector< std::deque< si_taxi::BWTime > > *self,std::vector< std::deque< long > >::value_type const &e){
      self->push_back( e );
      return e;
    }
SWIGINTERN std::vector< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > > *std_vector_Sl_std_deque_Sl_si_taxi_BWTime_Sg__Sg__reject(std::vector< std::deque< si_taxi::BWTime > > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >* r = new std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >;
      std::remove_copy_if( self->begin(), self->end(),              
			   std::back_inserter(*r),
			   swig::yield< std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >::value_type >() );
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_std_deque_Sl_si_taxi_BWTime_Sg__Sg__at(std::vector< std::deque< si_taxi::BWTime > > const *self,std::vector< std::deque< long > >::difference_type i){
      VALUE r = Qnil;
      try {
	r = swig::from< std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >::value_type >( *(swig::cgetpos(self, i)) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_std_deque_Sl_si_taxi_BWTime_Sg__Sg____getitem____SWIG_0(std::vector< std::deque< si_taxi::BWTime > > const *self,std::vector< std::deque< long > >::difference_type i,std::vector< std::deque< long > >::difference_type j){
      if ( j <= 0 ) return Qnil;
      std::size_t len = self->size();
      if ( i < 0 ) i = len - i;
      j += i; if ( static_cast<std::size_t>(j) >= len ) j = len-1;

      VALUE r = Qnil;
      try {
	r = swig::from< const std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >* >( swig::getslice(self, i, j) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_std_deque_Sl_si_taxi_BWTime_Sg__Sg____getitem____SWIG_1(std::vector< std::deque< si_taxi::BWTime > > const *self,std::vector< std::deque< long > >::difference_type i){
      VALUE r = Qnil;
      try {
	r = swig::from< std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >::value_type >( *(swig::cgetpos(self, i)) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_std_deque_Sl_si_taxi_BWTime_Sg__Sg____getitem____SWIG_2(std::vector< std::deque< si_taxi::BWTime > > const *self,VALUE i){
      if ( rb_obj_is_kind_of( i, rb_cRange ) == Qfalse )
	{
	  rb_raise( rb_eTypeError, "not a valid index or range" );
	}

      VALUE r = Qnil;
      static ID id_end   = rb_intern("end");
      static ID id_start = rb_intern("begin");
      static ID id_noend = rb_intern("exclude_end?");

      VALUE start = rb_funcall( i, id_start, 0 );
      VALUE end   = rb_funcall( i, id_end, 0 );
      bool  noend = ( rb_funcall( i, id_noend, 0 ) == Qtrue );

      int len = self->size();

      int s = NUM2INT( start );
      if ( s < 0 ) s = len + s;
      else if ( s >= len ) return Qnil;

      int e = NUM2INT( end );
      if ( e < 0 ) e = len + e;

      if ( e < s ) return Qnil; //std::swap( s, e );

      if ( noend ) e -= 1;
      if ( e >= len ) e = len - 1;

      return swig::from< std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >* >( swig::getslice(self, s, e+1) );
    }
SWIGINTERN VALUE std_vector_Sl_std_deque_Sl_si_taxi_BWTime_Sg__Sg____setitem____SWIG_0(std::vector< std::deque< si_taxi::BWTime > > *self,std::vector< std::deque< long > >::difference_type i,std::vector< std::deque< long > >::value_type const &x){
	std::size_t len = self->size();
	if ( i < 0 ) i = len - i;
	else if ( static_cast<std::size_t>(i) >= len )
	  self->resize( i+1, x );
	else
	  *(swig::getpos(self,i)) = x;

	return swig::from< std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >::value_type >( x );
      }
SWIGINTERN VALUE std_vector_Sl_std_deque_Sl_si_taxi_BWTime_Sg__Sg____setitem____SWIG_1(std::vector< std::deque< si_taxi::BWTime > > *self,std::vector< std::deque< long > >::difference_type i,std::vector< std::deque< long > >::difference_type j,std::vector< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > > const &v){

      if ( j <= 0 ) return Qnil;
      std::size_t len = self->size();
      if ( i < 0 ) i = len - i;
      j += i; 
      if ( static_cast<std::size_t>(j) >= len ) {
	self->resize( j+1, *(v.begin()) );
	j = len-1;
      }

      VALUE r = Qnil;
      swig::setslice(self, i, j, v);
      r = swig::from< const std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >* >( &v );
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_std_deque_Sl_si_taxi_BWTime_Sg__Sg__shift(std::vector< std::deque< si_taxi::BWTime > > *self){
      if (self->empty()) return Qnil;
      std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >::value_type x = self->front();
      self->erase( self->begin() );
      return swig::from< std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >::value_type >( x );
    }
SWIGINTERN std::vector< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > > *std_vector_Sl_std_deque_Sl_si_taxi_BWTime_Sg__Sg__insert__SWIG_0(std::vector< std::deque< si_taxi::BWTime > > *self,std::vector< std::deque< long > >::difference_type pos,int argc,VALUE *argv,...){
      std::size_t len = self->size();
      std::size_t   i = swig::check_index( pos, len, true );
      std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >::iterator start;

      VALUE elem = argv[0];
      int idx = 0;
      try {
	std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >::value_type val = swig::as<std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >::value_type>( elem, true );
	if ( i >= len ) {
	  self->resize(i-1, val);
	  return self;
	}
	start = self->begin();
	std::advance( start, i );
	self->insert( start++, val );

	for ( ++idx; idx < argc; ++idx )
	  {
	    elem = argv[idx];
	    val = swig::as<std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >::value_type>( elem );
	    self->insert( start++, val );
	  }

      } 
      catch( std::invalid_argument )
	{
	  rb_raise( rb_eArgError, "%s",
		    Ruby_Format_TypeError( "", 
					   swig::type_name<std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >::value_type>(),
					   __FUNCTION__, idx+2, elem ));
	}


      return self;
    }
SWIGINTERN std::vector< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > > *std_vector_Sl_std_deque_Sl_si_taxi_BWTime_Sg__Sg__unshift(std::vector< std::deque< si_taxi::BWTime > > *self,int argc,VALUE *argv,...){
      for ( int idx = argc-1; idx >= 0; --idx )
	{
	  std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >::iterator start = self->begin();
	  VALUE elem = argv[idx];
	  try {
	    std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >::value_type val = swig::as<std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >::value_type>( elem, true );
	    self->insert( start, val );
	  }
	  catch( std::invalid_argument )
	    {
	      rb_raise( rb_eArgError, "%s",
			Ruby_Format_TypeError( "", 
					       swig::type_name<std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >::value_type>(),
					       __FUNCTION__, idx+2, elem ));
	    }
	}

      return self;
    }

      namespace swig {
	template <>  struct traits<std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >, std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >" "," "std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > >" " >";
	  }
	};
      }
    
SWIGINTERN std::vector< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > > *std_vector_Sl_std_deque_Sl_si_taxi_BWPax_Sg__Sg__dup(std::vector< std::deque< si_taxi::BWPax > > *self){
      return new std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >(*self);
    }
SWIGINTERN VALUE std_vector_Sl_std_deque_Sl_si_taxi_BWPax_Sg__Sg__inspect(std::vector< std::deque< si_taxi::BWPax > > *self){
      std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >::const_iterator i = self->begin();
      std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >::const_iterator e = self->end();
      const char *type_name = swig::type_name< std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > > >();
      VALUE str = rb_str_new2(type_name);
      str = rb_str_cat2( str, " [" );
      bool comma = false;
      VALUE tmp;
      for ( ; i != e; ++i, comma = true )
	{
	  if (comma) str = rb_str_cat2( str, "," );
	  tmp = swig::from< std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >::value_type >( *i );
	  tmp = rb_inspect( tmp );
	  str = rb_str_buf_append( str, tmp );
	}
      str = rb_str_cat2( str, "]" );
      return str;
    }
SWIGINTERN VALUE std_vector_Sl_std_deque_Sl_si_taxi_BWPax_Sg__Sg__to_a(std::vector< std::deque< si_taxi::BWPax > > *self){
      std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >::const_iterator i = self->begin();
      std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >::const_iterator e = self->end();
      VALUE ary = rb_ary_new2( std::distance( i, e ) );
      VALUE tmp;
      for ( ; i != e; ++i )
	{
	  tmp = swig::from< std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >::value_type >( *i );
	  rb_ary_push( ary, tmp );
	}
      return ary;
    }
SWIGINTERN VALUE std_vector_Sl_std_deque_Sl_si_taxi_BWPax_Sg__Sg__to_s(std::vector< std::deque< si_taxi::BWPax > > *self){
      std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >::iterator i = self->begin();
      std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >::iterator e = self->end();
      VALUE str = rb_str_new2( "" );
      VALUE tmp;
      for ( ; i != e; ++i )
	{
	  tmp = swig::from< std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >::value_type >( *i );
	  tmp = rb_obj_as_string( tmp );
	  str = rb_str_buf_append( str, tmp );
	}
      return str;
    }
SWIGINTERN VALUE std_vector_Sl_std_deque_Sl_si_taxi_BWPax_Sg__Sg__slice(std::vector< std::deque< si_taxi::BWPax > > *self,std::vector< std::deque< si_taxi::BWPax > >::difference_type i,std::vector< std::deque< si_taxi::BWPax > >::difference_type j){
	if ( j <= 0 ) return Qnil;
	std::size_t len = self->size();
	if ( i < 0 ) i = len - i;
	j += i;
	if ( static_cast<std::size_t>(j) >= len ) j = len-1;

	VALUE r = Qnil;
	try {
	  r = swig::from< const std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >* >( swig::getslice(self, i, j) );
	}
	catch( std::out_of_range )
	  {
	  }
	return r;
      }
SWIGINTERN std::vector< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > > *std_vector_Sl_std_deque_Sl_si_taxi_BWPax_Sg__Sg__each(std::vector< std::deque< si_taxi::BWPax > > *self){
	if ( !rb_block_given_p() )
	  rb_raise( rb_eArgError, "no block given");

	VALUE r;
	std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >::const_iterator i = self->begin();
	std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >::const_iterator e = self->end();
	for ( ; i != e; ++i )
	  {
	    r = swig::from< std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >::value_type >(*i);
	    rb_yield(r);
	  }
	
	return self;
      }
SWIGINTERN std::vector< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > > *std_vector_Sl_std_deque_Sl_si_taxi_BWPax_Sg__Sg__select(std::vector< std::deque< si_taxi::BWPax > > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >* r = new std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >;
      std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >::const_iterator i = self->begin();
      std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >::const_iterator e = self->end();
      for ( ; i != e; ++i )
	{
	  VALUE v = swig::from< std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >::value_type >(*i);
	  if ( RTEST( rb_yield(v) ) )
	    self->insert( r->end(), *i);
	}
	
      return r;
    }
SWIGINTERN std::vector< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > > *std_vector_Sl_std_deque_Sl_si_taxi_BWPax_Sg__Sg__reject_bang(std::vector< std::deque< si_taxi::BWPax > > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >::iterator i = self->begin();
      std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >::iterator e = self->end();
      for ( ; i != e; )
	{
	  VALUE r = swig::from< std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >::value_type >(*i);
	  if ( RTEST( rb_yield(r) ) ) {
	    self->erase(i++);
            e = self->end();
	  } else {
	    ++i;
          }
	}
	
      return self;
    }
SWIGINTERN VALUE std_vector_Sl_std_deque_Sl_si_taxi_BWPax_Sg__Sg__delete_at(std::vector< std::deque< si_taxi::BWPax > > *self,std::vector< std::deque< si_taxi::BWPax > >::difference_type i){
      VALUE r = Qnil;
      try {
	std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >::iterator at = swig::getpos(self, i);
	r = swig::from< std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >::value_type >( *(at) );
	self->erase(at); 
      }
      catch (std::out_of_range)
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_std_deque_Sl_si_taxi_BWPax_Sg__Sg____delete2__(std::vector< std::deque< si_taxi::BWPax > > *self,std::vector< std::deque< si_taxi::BWPax > >::value_type const &i){
      VALUE r = Qnil;
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_std_deque_Sl_si_taxi_BWPax_Sg__Sg__pop(std::vector< std::deque< si_taxi::BWPax > > *self){
      if (self->empty()) return Qnil;
      std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >::value_type x = self->back();
      self->pop_back();
      return swig::from< std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >::value_type >( x );
    }
SWIGINTERN std::vector< std::deque< si_taxi::BWPax > >::value_type const std_vector_Sl_std_deque_Sl_si_taxi_BWPax_Sg__Sg__push(std::vector< std::deque< si_taxi::BWPax > > *self,std::vector< std::deque< si_taxi::BWPax > >::value_type const &e){
      self->push_back( e );
      return e;
    }
SWIGINTERN std::vector< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > > *std_vector_Sl_std_deque_Sl_si_taxi_BWPax_Sg__Sg__reject(std::vector< std::deque< si_taxi::BWPax > > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >* r = new std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >;
      std::remove_copy_if( self->begin(), self->end(),              
			   std::back_inserter(*r),
			   swig::yield< std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >::value_type >() );
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_std_deque_Sl_si_taxi_BWPax_Sg__Sg__at(std::vector< std::deque< si_taxi::BWPax > > const *self,std::vector< std::deque< si_taxi::BWPax > >::difference_type i){
      VALUE r = Qnil;
      try {
	r = swig::from< std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >::value_type >( *(swig::cgetpos(self, i)) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_std_deque_Sl_si_taxi_BWPax_Sg__Sg____getitem____SWIG_0(std::vector< std::deque< si_taxi::BWPax > > const *self,std::vector< std::deque< si_taxi::BWPax > >::difference_type i,std::vector< std::deque< si_taxi::BWPax > >::difference_type j){
      if ( j <= 0 ) return Qnil;
      std::size_t len = self->size();
      if ( i < 0 ) i = len - i;
      j += i; if ( static_cast<std::size_t>(j) >= len ) j = len-1;

      VALUE r = Qnil;
      try {
	r = swig::from< const std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >* >( swig::getslice(self, i, j) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_std_deque_Sl_si_taxi_BWPax_Sg__Sg____getitem____SWIG_1(std::vector< std::deque< si_taxi::BWPax > > const *self,std::vector< std::deque< si_taxi::BWPax > >::difference_type i){
      VALUE r = Qnil;
      try {
	r = swig::from< std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >::value_type >( *(swig::cgetpos(self, i)) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_std_deque_Sl_si_taxi_BWPax_Sg__Sg____getitem____SWIG_2(std::vector< std::deque< si_taxi::BWPax > > const *self,VALUE i){
      if ( rb_obj_is_kind_of( i, rb_cRange ) == Qfalse )
	{
	  rb_raise( rb_eTypeError, "not a valid index or range" );
	}

      VALUE r = Qnil;
      static ID id_end   = rb_intern("end");
      static ID id_start = rb_intern("begin");
      static ID id_noend = rb_intern("exclude_end?");

      VALUE start = rb_funcall( i, id_start, 0 );
      VALUE end   = rb_funcall( i, id_end, 0 );
      bool  noend = ( rb_funcall( i, id_noend, 0 ) == Qtrue );

      int len = self->size();

      int s = NUM2INT( start );
      if ( s < 0 ) s = len + s;
      else if ( s >= len ) return Qnil;

      int e = NUM2INT( end );
      if ( e < 0 ) e = len + e;

      if ( e < s ) return Qnil; //std::swap( s, e );

      if ( noend ) e -= 1;
      if ( e >= len ) e = len - 1;

      return swig::from< std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >* >( swig::getslice(self, s, e+1) );
    }
SWIGINTERN VALUE std_vector_Sl_std_deque_Sl_si_taxi_BWPax_Sg__Sg____setitem____SWIG_0(std::vector< std::deque< si_taxi::BWPax > > *self,std::vector< std::deque< si_taxi::BWPax > >::difference_type i,std::vector< std::deque< si_taxi::BWPax > >::value_type const &x){
	std::size_t len = self->size();
	if ( i < 0 ) i = len - i;
	else if ( static_cast<std::size_t>(i) >= len )
	  self->resize( i+1, x );
	else
	  *(swig::getpos(self,i)) = x;

	return swig::from< std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >::value_type >( x );
      }
SWIGINTERN VALUE std_vector_Sl_std_deque_Sl_si_taxi_BWPax_Sg__Sg____setitem____SWIG_1(std::vector< std::deque< si_taxi::BWPax > > *self,std::vector< std::deque< si_taxi::BWPax > >::difference_type i,std::vector< std::deque< si_taxi::BWPax > >::difference_type j,std::vector< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > > const &v){

      if ( j <= 0 ) return Qnil;
      std::size_t len = self->size();
      if ( i < 0 ) i = len - i;
      j += i; 
      if ( static_cast<std::size_t>(j) >= len ) {
	self->resize( j+1, *(v.begin()) );
	j = len-1;
      }

      VALUE r = Qnil;
      swig::setslice(self, i, j, v);
      r = swig::from< const std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >* >( &v );
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_std_deque_Sl_si_taxi_BWPax_Sg__Sg__shift(std::vector< std::deque< si_taxi::BWPax > > *self){
      if (self->empty()) return Qnil;
      std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >::value_type x = self->front();
      self->erase( self->begin() );
      return swig::from< std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >::value_type >( x );
    }
SWIGINTERN std::vector< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > > *std_vector_Sl_std_deque_Sl_si_taxi_BWPax_Sg__Sg__insert__SWIG_0(std::vector< std::deque< si_taxi::BWPax > > *self,std::vector< std::deque< si_taxi::BWPax > >::difference_type pos,int argc,VALUE *argv,...){
      std::size_t len = self->size();
      std::size_t   i = swig::check_index( pos, len, true );
      std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >::iterator start;

      VALUE elem = argv[0];
      int idx = 0;
      try {
	std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >::value_type val = swig::as<std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >::value_type>( elem, true );
	if ( i >= len ) {
	  self->resize(i-1, val);
	  return self;
	}
	start = self->begin();
	std::advance( start, i );
	self->insert( start++, val );

	for ( ++idx; idx < argc; ++idx )
	  {
	    elem = argv[idx];
	    val = swig::as<std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >::value_type>( elem );
	    self->insert( start++, val );
	  }

      } 
      catch( std::invalid_argument )
	{
	  rb_raise( rb_eArgError, "%s",
		    Ruby_Format_TypeError( "", 
					   swig::type_name<std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >::value_type>(),
					   __FUNCTION__, idx+2, elem ));
	}


      return self;
    }
SWIGINTERN std::vector< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > > *std_vector_Sl_std_deque_Sl_si_taxi_BWPax_Sg__Sg__unshift(std::vector< std::deque< si_taxi::BWPax > > *self,int argc,VALUE *argv,...){
      for ( int idx = argc-1; idx >= 0; --idx )
	{
	  std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >::iterator start = self->begin();
	  VALUE elem = argv[idx];
	  try {
	    std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >::value_type val = swig::as<std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >::value_type>( elem, true );
	    self->insert( start, val );
	  }
	  catch( std::invalid_argument )
	    {
	      rb_raise( rb_eArgError, "%s",
			Ruby_Format_TypeError( "", 
					       swig::type_name<std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >::value_type>(),
					       __FUNCTION__, idx+2, elem ));
	    }
	}

      return self;
    }
/* ---------------------------------------------------
 * C++ director class helpers
 * --------------------------------------------------- */



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "siTaxi_wrap.h"

SwigDirector_BWProactiveHandler::SwigDirector_BWProactiveHandler(VALUE self, si_taxi::BWSim &sim): si_taxi::BWProactiveHandler(sim), Swig::Director(self) {
  
}



SwigDirector_BWProactiveHandler::~SwigDirector_BWProactiveHandler() {
}

void SwigDirector_BWProactiveHandler::init() {
  VALUE result;
  
  result = rb_funcall(swig_get_self(), rb_intern("init"), 0, NULL);
}


void SwigDirector_BWProactiveHandler::handle_pax_served(size_t empty_origin) {
  VALUE obj0 = Qnil ;
  VALUE result;
  
  obj0 = SWIG_From_size_t(static_cast< size_t >(empty_origin));
  result = rb_funcall(swig_get_self(), rb_intern("handle_pax_served"), 1,obj0);
}


void SwigDirector_BWProactiveHandler::handle_idle(si_taxi::BWVehicle &veh) {
  VALUE obj0 = Qnil ;
  VALUE result;
  
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(&veh), SWIGTYPE_p_si_taxi__BWVehicle,  0 );
  result = rb_funcall(swig_get_self(), rb_intern("handle_idle"), 1,obj0);
}


void SwigDirector_BWProactiveHandler::handle_strobe() {
  VALUE result;
  
  result = rb_funcall(swig_get_self(), rb_intern("handle_strobe"), 0, NULL);
}


swig_class SwigClassGC_VALUE;


/*
  Document-method: SiTaxi::GC_VALUE.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_GC_VALUE_inspect(int argc, VALUE *argv, VALUE self) {
  swig::GC_VALUE *arg1 = (swig::GC_VALUE *) 0 ;
  swig::GC_VALUE r1 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  r1 = self; arg1 = &r1;
  result = (VALUE)((swig::GC_VALUE const *)arg1)->inspect();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::GC_VALUE.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_GC_VALUE_to_s(int argc, VALUE *argv, VALUE self) {
  swig::GC_VALUE *arg1 = (swig::GC_VALUE *) 0 ;
  swig::GC_VALUE r1 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  r1 = self; arg1 = &r1;
  result = (VALUE)((swig::GC_VALUE const *)arg1)->to_s();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


swig_class SwigClassConstIterator;

SWIGINTERN void
free_swig_ConstIterator(swig::ConstIterator *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_ConstIterator_value(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","value", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  try {
    result = (VALUE)((swig::ConstIterator const *)arg1)->value();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::ConstIterator.dup

  call-seq:
    dup -> ConstIterator

Create a duplicate of the class and unfreeze it if needed.
*/
SWIGINTERN VALUE
_wrap_ConstIterator_dup(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","dup", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  result = (swig::ConstIterator *)((swig::ConstIterator const *)arg1)->dup();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::ConstIterator.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_ConstIterator_inspect(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","inspect", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  result = (VALUE)((swig::ConstIterator const *)arg1)->inspect();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::ConstIterator.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_ConstIterator_to_s(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","to_s", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  result = (VALUE)((swig::ConstIterator const *)arg1)->to_s();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstIterator_next__SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator *","next", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","next", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  result = (swig::ConstIterator *)(arg1)->next(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstIterator_next__SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator *","next", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  try {
    result = (swig::ConstIterator *)(arg1)->next();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ConstIterator_next(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ConstIterator_next__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ConstIterator_next__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "ConstIterator.next", 
    "    swig::ConstIterator * ConstIterator.next(size_t n)\n"
    "    swig::ConstIterator * ConstIterator.next()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstIterator_previous__SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator *","previous", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","previous", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  result = (swig::ConstIterator *)(arg1)->previous(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstIterator_previous__SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator *","previous", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  try {
    result = (swig::ConstIterator *)(arg1)->previous();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ConstIterator_previous(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ConstIterator_previous__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ConstIterator_previous__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "ConstIterator.previous", 
    "    swig::ConstIterator * ConstIterator.previous(size_t n)\n"
    "    swig::ConstIterator * ConstIterator.previous()\n");
  
  return Qnil;
}



/*
  Document-method: SiTaxi::ConstIterator.==

  call-seq:
    ==(x) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_ConstIterator___eq__(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  swig::ConstIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_swig__ConstIterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "swig::ConstIterator const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "swig::ConstIterator const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< swig::ConstIterator * >(argp2);
  result = (bool)((swig::ConstIterator const *)arg1)->operator ==((swig::ConstIterator const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::ConstIterator.+

  call-seq:
    +(n) -> ConstIterator

Add operator.
*/
SWIGINTERN VALUE
_wrap_ConstIterator___add__(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "ptrdiff_t","operator +", 2, argv[0] ));
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::ConstIterator *)((swig::ConstIterator const *)arg1)->operator +(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::ConstIterator.-

  call-seq:
    -(n) -> ConstIterator
    -(x) -> ptrdiff_t

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_ConstIterator___sub____SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "ptrdiff_t","operator -", 2, argv[0] ));
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::ConstIterator *)((swig::ConstIterator const *)arg1)->operator -(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstIterator___sub____SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  swig::ConstIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ptrdiff_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_swig__ConstIterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "swig::ConstIterator const &","operator -", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "swig::ConstIterator const &","operator -", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< swig::ConstIterator * >(argp2);
  result = ((swig::ConstIterator const *)arg1)->operator -((swig::ConstIterator const &)*arg2);
  vresult = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ConstIterator___sub__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ConstIterator___sub____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ConstIterator___sub____SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "__sub__.new", 
    "    __sub__.new(ptrdiff_t n)\n"
    "    __sub__.new(swig::ConstIterator const &x)\n");
  
  return Qnil;
}


swig_class SwigClassIterator;

SWIGINTERN VALUE
_wrap_Iterator_valuee___(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  VALUE *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE temp2 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator *","setValue", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  temp2 = static_cast< VALUE >(argv[0]);
  arg2 = &temp2;
  result = (VALUE)(arg1)->setValue((VALUE const &)*arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::Iterator.dup

  call-seq:
    dup -> Iterator

Create a duplicate of the class and unfreeze it if needed.
*/
SWIGINTERN VALUE
_wrap_Iterator_dup(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","dup", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  result = (swig::Iterator *)((swig::Iterator const *)arg1)->dup();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Iterator_next__SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator *","next", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","next", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  result = (swig::Iterator *)(arg1)->next(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Iterator_next__SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator *","next", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  try {
    result = (swig::Iterator *)(arg1)->next();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Iterator_next(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Iterator_next__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Iterator_next__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Iterator.next", 
    "    swig::Iterator * Iterator.next(size_t n)\n"
    "    swig::Iterator * Iterator.next()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Iterator_previous__SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator *","previous", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","previous", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  result = (swig::Iterator *)(arg1)->previous(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Iterator_previous__SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator *","previous", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  try {
    result = (swig::Iterator *)(arg1)->previous();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Iterator_previous(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Iterator_previous__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Iterator_previous__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Iterator.previous", 
    "    swig::Iterator * Iterator.previous(size_t n)\n"
    "    swig::Iterator * Iterator.previous()\n");
  
  return Qnil;
}



/*
  Document-method: SiTaxi::Iterator.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_Iterator_inspect(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","inspect", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  result = (VALUE)((swig::Iterator const *)arg1)->inspect();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::Iterator.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_Iterator_to_s(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","to_s", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  result = (VALUE)((swig::Iterator const *)arg1)->to_s();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::Iterator.==

  call-seq:
    ==(x) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_Iterator___eq__(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  swig::Iterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_swig__Iterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "swig::Iterator const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "swig::Iterator const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< swig::Iterator * >(argp2);
  result = (bool)((swig::Iterator const *)arg1)->operator ==((swig::Iterator const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::Iterator.+

  call-seq:
    +(n) -> Iterator

Add operator.
*/
SWIGINTERN VALUE
_wrap_Iterator___add__(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "ptrdiff_t","operator +", 2, argv[0] ));
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::Iterator *)((swig::Iterator const *)arg1)->operator +(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::Iterator.-

  call-seq:
    -(n) -> Iterator
    -(x) -> ptrdiff_t

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_Iterator___sub____SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "ptrdiff_t","operator -", 2, argv[0] ));
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::Iterator *)((swig::Iterator const *)arg1)->operator -(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Iterator___sub____SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  swig::Iterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ptrdiff_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_swig__Iterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "swig::Iterator const &","operator -", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "swig::Iterator const &","operator -", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< swig::Iterator * >(argp2);
  result = ((swig::Iterator const *)arg1)->operator -((swig::Iterator const &)*arg2);
  vresult = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Iterator___sub__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_swig__Iterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Iterator___sub____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Iterator___sub____SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "__sub__.new", 
    "    __sub__.new(ptrdiff_t n)\n"
    "    __sub__.new(swig::Iterator const &x)\n");
  
  return Qnil;
}


SWIGINTERN void
free_swig_Iterator(swig::Iterator *arg1) {
    delete arg1;
}

swig_class SwigClassSizeTVector;


/*
  Document-method: SiTaxi::SizeTVector.dup

  call-seq:
    dup -> SizeTVector

Create a duplicate of the class and unfreeze it if needed.
*/
SWIGINTERN VALUE
_wrap_SizeTVector_dup(int argc, VALUE *argv, VALUE self) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< size_t,std::allocator< size_t > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< size_t > *","dup", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  {
    try {
      result = (std::vector< size_t,std::allocator< size_t > > *)std_vector_Sl_size_t_Sg__dup(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::SizeTVector.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_SizeTVector_inspect(int argc, VALUE *argv, VALUE self) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< size_t > *","inspect", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  {
    try {
      result = (VALUE)std_vector_Sl_size_t_Sg__inspect(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::SizeTVector.to_a

  call-seq:
    to_a -> VALUE

Convert SizeTVector to an Array.
*/
SWIGINTERN VALUE
_wrap_SizeTVector_to_a(int argc, VALUE *argv, VALUE self) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< size_t > *","to_a", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  {
    try {
      result = (VALUE)std_vector_Sl_size_t_Sg__to_a(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::SizeTVector.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_SizeTVector_to_s(int argc, VALUE *argv, VALUE self) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< size_t > *","to_s", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  {
    try {
      result = (VALUE)std_vector_Sl_size_t_Sg__to_s(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::SizeTVector.slice

  call-seq:
    slice(i, j) -> VALUE

Return a slice (portion of) the SizeTVector.
*/
SWIGINTERN VALUE
_wrap_SizeTVector_slice(int argc, VALUE *argv, VALUE self) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::difference_type arg2 ;
  std::vector< size_t >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< size_t > *","slice", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< size_t >::difference_type","slice", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< size_t >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< size_t >::difference_type","slice", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< size_t >::difference_type >(val3);
  {
    try {
      result = (VALUE)std_vector_Sl_size_t_Sg__slice(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::SizeTVector.each

  call-seq:
    each -> SizeTVector

Iterate thru each element in the SizeTVector.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_SizeTVector_each(int argc, VALUE *argv, VALUE self) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< size_t,std::allocator< size_t > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< size_t > *","each", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  {
    try {
      result = (std::vector< size_t,std::allocator< size_t > > *)std_vector_Sl_size_t_Sg__each(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::SizeTVector.select

  call-seq:
    select -> SizeTVector

Iterate thru each element in the SizeTVector and select those that match a condition.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_SizeTVector_select(int argc, VALUE *argv, VALUE self) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< size_t,std::allocator< size_t > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< size_t > *","select", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  {
    try {
      result = (std::vector< size_t,std::allocator< size_t > > *)std_vector_Sl_size_t_Sg__select(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::SizeTVector.reject!

  call-seq:
    reject! -> SizeTVector

Iterate thru each element in the SizeTVector and reject those that fail a condition.  A block must be provided.  SizeTVector is modified in place.
*/
SWIGINTERN VALUE
_wrap_SizeTVector_rejectN___(int argc, VALUE *argv, VALUE self) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< size_t,std::allocator< size_t > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< size_t > *","reject_bang", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  {
    try {
      result = (std::vector< size_t,std::allocator< size_t > > *)std_vector_Sl_size_t_Sg__reject_bang(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::SizeTVector.delete_at

  call-seq:
    delete_at(i) -> VALUE

Delete an element at a certain index.
*/
SWIGINTERN VALUE
_wrap_SizeTVector_delete_at(int argc, VALUE *argv, VALUE self) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< size_t > *","delete_at", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< size_t >::difference_type","delete_at", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< size_t >::difference_type >(val2);
  {
    try {
      result = (VALUE)std_vector_Sl_size_t_Sg__delete_at(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SizeTVector___delete2__(int argc, VALUE *argv, VALUE self) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< size_t >::value_type temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< size_t > *","__delete2__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< size_t >::value_type","__delete2__", 2, argv[0] ));
  } 
  temp2 = static_cast< std::vector< size_t >::value_type >(val2);
  arg2 = &temp2;
  {
    try {
      result = (VALUE)std_vector_Sl_size_t_Sg____delete2__(arg1,(size_t const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::SizeTVector.pop

  call-seq:
    pop -> VALUE

Remove and return element at the end of the SizeTVector.
*/
SWIGINTERN VALUE
_wrap_SizeTVector_pop(int argc, VALUE *argv, VALUE self) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< size_t > *","pop", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  {
    try {
      result = (VALUE)std_vector_Sl_size_t_Sg__pop(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::SizeTVector.push

  call-seq:
    push(e) -> value_type

Add an element at the end of the SizeTVector.
*/
SWIGINTERN VALUE
_wrap_SizeTVector_push(int argc, VALUE *argv, VALUE self) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< size_t >::value_type temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< size_t >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< size_t > *","push", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< size_t >::value_type","push", 2, argv[0] ));
  } 
  temp2 = static_cast< std::vector< size_t >::value_type >(val2);
  arg2 = &temp2;
  {
    try {
      result = std_vector_Sl_size_t_Sg__push(arg1,(size_t const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::SizeTVector.reject

  call-seq:
    reject -> SizeTVector

Iterate thru each element in the SizeTVector and reject those that fail a condition returning a new SizeTVector.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_SizeTVector_reject(int argc, VALUE *argv, VALUE self) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< size_t,std::allocator< size_t > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< size_t > *","reject", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  {
    try {
      result = (std::vector< size_t,std::allocator< size_t > > *)std_vector_Sl_size_t_Sg__reject(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::SizeTVector.at

  call-seq:
    at(i) -> VALUE

Return element at a certain index.
*/
SWIGINTERN VALUE
_wrap_SizeTVector_at(int argc, VALUE *argv, VALUE self) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< size_t > const *","at", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< size_t >::difference_type","at", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< size_t >::difference_type >(val2);
  {
    try {
      result = (VALUE)std_vector_Sl_size_t_Sg__at((std::vector< size_t > const *)arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::SizeTVector.[]

  call-seq:
    [](i, j) -> VALUE
    [](i) -> VALUE
    [](i) -> VALUE

Element accessor/slicing.
*/
SWIGINTERN VALUE
_wrap_SizeTVector___getitem____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::difference_type arg2 ;
  std::vector< size_t >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< size_t > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< size_t >::difference_type","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< size_t >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< size_t >::difference_type","__getitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< size_t >::difference_type >(val3);
  {
    try {
      result = (VALUE)std_vector_Sl_size_t_Sg____getitem____SWIG_0((std::vector< size_t > const *)arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SizeTVector___getitem____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< size_t > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< size_t >::difference_type","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< size_t >::difference_type >(val2);
  {
    try {
      result = (VALUE)std_vector_Sl_size_t_Sg____getitem____SWIG_1((std::vector< size_t > const *)arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SizeTVector___getitem____SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  VALUE arg2 = (VALUE) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< size_t > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  arg2 = argv[0];
  {
    try {
      result = (VALUE)std_vector_Sl_size_t_Sg____getitem____SWIG_2((std::vector< size_t > const *)arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_SizeTVector___getitem__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<size_t,std::allocator< size_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SizeTVector___getitem____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<size_t,std::allocator< size_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_SizeTVector___getitem____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<size_t,std::allocator< size_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_SizeTVector___getitem____SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "__getitem__", 
    "    VALUE __getitem__(std::vector< size_t >::difference_type i, std::vector< size_t >::difference_type j)\n"
    "    VALUE __getitem__(std::vector< size_t >::difference_type i)\n"
    "    VALUE __getitem__(VALUE i)\n");
  
  return Qnil;
}



/*
  Document-method: SiTaxi::SizeTVector.[]=

  call-seq:
    []=(i, x) -> VALUE
    []=(i, j, v) -> VALUE

Element setter/slicing.
*/
SWIGINTERN VALUE
_wrap_SizeTVector___setitem____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::difference_type arg2 ;
  std::vector< size_t >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< size_t >::value_type temp3 ;
  size_t val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< size_t > *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< size_t >::difference_type","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< size_t >::difference_type >(val2);
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< size_t >::value_type","__setitem__", 3, argv[1] ));
  } 
  temp3 = static_cast< std::vector< size_t >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      result = (VALUE)std_vector_Sl_size_t_Sg____setitem____SWIG_0(arg1,arg2,(size_t const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SizeTVector___setitem____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::difference_type arg2 ;
  std::vector< size_t >::difference_type arg3 ;
  std::vector< size_t,std::allocator< size_t > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< size_t > *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< size_t >::difference_type","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< size_t >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< size_t >::difference_type","__setitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< size_t >::difference_type >(val3);
  {
    std::vector<size_t,std::allocator< size_t > > *ptr = (std::vector<size_t,std::allocator< size_t > > *)0;
    res4 = swig::asptr(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "std::vector< size_t,std::allocator< size_t > > const &","__setitem__", 4, argv[2] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< size_t,std::allocator< size_t > > const &","__setitem__", 4, argv[2])); 
    }
    arg4 = ptr;
  }
  {
    try {
      try {
        result = (VALUE)std_vector_Sl_size_t_Sg____setitem____SWIG_1(arg1,arg2,arg3,(std::vector< size_t,std::allocator< size_t > > const &)*arg4);
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return vresult;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
}


SWIGINTERN VALUE _wrap_SizeTVector___setitem__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<size_t,std::allocator< size_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_SizeTVector___setitem____SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<size_t,std::allocator< size_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<size_t,std::allocator< size_t > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_SizeTVector___setitem____SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "__setitem__", 
    "    VALUE __setitem__(std::vector< size_t >::difference_type i, std::vector< size_t >::value_type const &x)\n"
    "    VALUE __setitem__(std::vector< size_t >::difference_type i, std::vector< size_t >::difference_type j, std::vector< size_t,std::allocator< size_t > > const &v)\n");
  
  return Qnil;
}



/*
  Document-method: SiTaxi::SizeTVector.shift

  call-seq:
    shift -> VALUE

Remove and return element at the beginning of the SizeTVector.
*/
SWIGINTERN VALUE
_wrap_SizeTVector_shift(int argc, VALUE *argv, VALUE self) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< size_t > *","shift", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  {
    try {
      result = (VALUE)std_vector_Sl_size_t_Sg__shift(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::SizeTVector.insert

  call-seq:
    insert(pos, argc, ?) -> SizeTVector
    insert(pos, x) -> iterator
    insert(pos, n, x)

Insert one or more new elements in the SizeTVector.
*/
SWIGINTERN VALUE
_wrap_SizeTVector_insert__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::difference_type arg2 ;
  int arg3 ;
  VALUE *arg4 = (VALUE *) 0 ;
  void *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< size_t,std::allocator< size_t > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if (argc < 2) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< size_t > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< size_t >::difference_type","insert", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< size_t >::difference_type >(val2);
  {
    arg3 = argc - 1;
    arg4 = argv + 1;
  }
  {
    try {
      result = (std::vector< size_t,std::allocator< size_t > > *)std_vector_Sl_size_t_Sg__insert__SWIG_0(arg1,arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::SizeTVector.unshift

  call-seq:
    unshift(argc, ?) -> SizeTVector

Add one or more elements at the beginning of the SizeTVector.
*/
SWIGINTERN VALUE
_wrap_SizeTVector_unshift(int argc, VALUE *argv, VALUE self) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  int arg2 ;
  VALUE *arg3 = (VALUE *) 0 ;
  void *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< size_t,std::allocator< size_t > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if (argc < 1) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< size_t > *","unshift", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  {
    arg2 = argc;
    arg3 = argv;
  }
  {
    try {
      result = (std::vector< size_t,std::allocator< size_t > > *)std_vector_Sl_size_t_Sg__unshift(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_SizeTVector__SWIG_0(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "SiTaxi::SizeTVector";
  std::vector< size_t > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (std::vector< size_t > *)new std::vector< size_t >();
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_SizeTVector__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< size_t > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  const char *classname SWIGUNUSED = "SiTaxi::SizeTVector";
  std::vector< size_t > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    std::vector<size_t,std::allocator< size_t > > *ptr = (std::vector<size_t,std::allocator< size_t > > *)0;
    res1 = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< size_t > const &","std::vector<(size_t)>", 1, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< size_t > const &","std::vector<(size_t)>", 1, argv[0])); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< size_t > *)new std::vector< size_t >((std::vector< size_t > const &)*arg1);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return self;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return Qnil;
}



/*
  Document-method: SiTaxi::SizeTVector.empty?

  call-seq:
    empty? -> bool

Check if the SizeTVector is empty or not.
*/
SWIGINTERN VALUE
_wrap_SizeTVector_emptyq___(int argc, VALUE *argv, VALUE self) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< size_t > const *","empty", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  {
    try {
      result = (bool)((std::vector< size_t > const *)arg1)->empty();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::SizeTVector.size

  call-seq:
    size -> size_type

Size or Length of the SizeTVector.
*/
SWIGINTERN VALUE
_wrap_SizeTVector_size(int argc, VALUE *argv, VALUE self) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< size_t >::size_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< size_t > const *","size", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  {
    try {
      result = ((std::vector< size_t > const *)arg1)->size();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::SizeTVector.clear

  call-seq:
    clear

Clear SizeTVector contents.
*/
SWIGINTERN VALUE
_wrap_SizeTVector_clear(int argc, VALUE *argv, VALUE self) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< size_t > *","clear", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  {
    try {
      (arg1)->clear();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SizeTVector_swap(int argc, VALUE *argv, VALUE self) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< size_t > *","swap", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< size_t > &","swap", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< size_t > &","swap", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< size_t > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SizeTVector_get_allocator(int argc, VALUE *argv, VALUE self) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::allocator< size_t > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< size_t > const *","get_allocator", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  {
    try {
      result = ((std::vector< size_t > const *)arg1)->get_allocator();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new std::vector< size_t >::allocator_type(static_cast< const std::vector< size_t >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_size_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::SizeTVector.begin

  call-seq:
    begin -> iterator

Return an iterator to the beginning of the SizeTVector.
*/
SWIGINTERN VALUE
_wrap_SizeTVector_begin(int argc, VALUE *argv, VALUE self) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< size_t >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< size_t > *","begin", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< size_t >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::SizeTVector.end

  call-seq:
    end -> iterator

Return an iterator to past the end of the SizeTVector.
*/
SWIGINTERN VALUE
_wrap_SizeTVector_end(int argc, VALUE *argv, VALUE self) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< size_t >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< size_t > *","end", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  {
    try {
      result = (arg1)->end();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< size_t >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::SizeTVector.rbegin

  call-seq:
    rbegin -> reverse_iterator

Return a reverse iterator to the beginning (the end) of the SizeTVector.
*/
SWIGINTERN VALUE
_wrap_SizeTVector_rbegin(int argc, VALUE *argv, VALUE self) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< size_t >::reverse_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< size_t > *","rbegin", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< size_t >::reverse_iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::SizeTVector.rend

  call-seq:
    rend -> reverse_iterator

Return a reverse iterator to past the end (past the beginning) of the SizeTVector.
*/
SWIGINTERN VALUE
_wrap_SizeTVector_rend(int argc, VALUE *argv, VALUE self) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< size_t >::reverse_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< size_t > *","rend", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< size_t >::reverse_iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_SizeTVector__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< size_t >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  const char *classname SWIGUNUSED = "SiTaxi::SizeTVector";
  std::vector< size_t > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "std::vector< size_t >::size_type","std::vector<(size_t)>", 1, argv[0] ));
  } 
  arg1 = static_cast< std::vector< size_t >::size_type >(val1);
  {
    try {
      result = (std::vector< size_t > *)new std::vector< size_t >(arg1);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::SizeTVector.resize

  call-seq:
    resize(new_size)
    resize(new_size, x)

Resize the size of the SizeTVector.
*/
SWIGINTERN VALUE
_wrap_SizeTVector_resize__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< size_t > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< size_t >::size_type","resize", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< size_t >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::SizeTVector.erase

  call-seq:
    erase(pos) -> iterator
    erase(first, last) -> iterator

Delete a portion of the SizeTVector.
*/
SWIGINTERN VALUE
_wrap_SizeTVector_erase__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  std::vector< size_t >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< size_t > *","erase", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< size_t >::iterator","erase", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< size_t >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< size_t >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< size_t >::iterator","erase", 2, argv[0] ));
    }
  }
  {
    try {
      result = (arg1)->erase(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< size_t >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SizeTVector_erase__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::iterator arg2 ;
  std::vector< size_t >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  swig::Iterator *iter3 = 0 ;
  int res3 ;
  std::vector< size_t >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< size_t > *","erase", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< size_t >::iterator","erase", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< size_t >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< size_t >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< size_t >::iterator","erase", 2, argv[0] ));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter3), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< size_t >::iterator","erase", 3, argv[1] ));
  } else {
    swig::Iterator_T<std::vector< size_t >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< size_t >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< size_t >::iterator","erase", 3, argv[1] ));
    }
  }
  {
    try {
      result = (arg1)->erase(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< size_t >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_SizeTVector_erase(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<size_t,std::allocator< size_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< size_t >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_SizeTVector_erase__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<size_t,std::allocator< size_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< size_t >::iterator > *>(iter) != 0));
      if (_v) {
        swig::ConstIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), 
          swig::Iterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< size_t >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_SizeTVector_erase__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "SizeTVector.erase", 
    "    std::vector< size_t >::iterator SizeTVector.erase(std::vector< size_t >::iterator pos)\n"
    "    std::vector< size_t >::iterator SizeTVector.erase(std::vector< size_t >::iterator first, std::vector< size_t >::iterator last)\n");
  
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_SizeTVector_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_SizeTVector_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_SizeTVector__SWIG_3(int argc, VALUE *argv, VALUE self) {
  std::vector< size_t >::size_type arg1 ;
  std::vector< size_t >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< size_t >::value_type temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  const char *classname SWIGUNUSED = "SiTaxi::SizeTVector";
  std::vector< size_t > *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "std::vector< size_t >::size_type","std::vector<(size_t)>", 1, argv[0] ));
  } 
  arg1 = static_cast< std::vector< size_t >::size_type >(val1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< size_t >::value_type","std::vector<(size_t)>", 2, argv[1] ));
  } 
  temp2 = static_cast< std::vector< size_t >::value_type >(val2);
  arg2 = &temp2;
  {
    try {
      result = (std::vector< size_t > *)new std::vector< size_t >(arg1,(std::vector< size_t >::value_type const &)*arg2);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_SizeTVector(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_SizeTVector__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_SizeTVector__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<size_t,std::allocator< size_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SizeTVector__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_SizeTVector__SWIG_3(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "SizeTVector.new", 
    "    SizeTVector.new()\n"
    "    SizeTVector.new(std::vector< size_t > const &)\n"
    "    SizeTVector.new(std::vector< size_t >::size_type size)\n"
    "    SizeTVector.new(std::vector< size_t >::size_type size, std::vector< size_t >::value_type const &value)\n");
  
  return Qnil;
}



/*
  Document-method: SiTaxi::SizeTVector.front

  call-seq:
    front -> value_type

Return the first element in SizeTVector.
*/
SWIGINTERN VALUE
_wrap_SizeTVector_front(int argc, VALUE *argv, VALUE self) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< size_t >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< size_t > const *","front", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  {
    try {
      result = (std::vector< size_t >::value_type *) &((std::vector< size_t > const *)arg1)->front();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_size_t(static_cast< size_t >(*result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::SizeTVector.back

  call-seq:
    back -> value_type

Return the last element in SizeTVector.
*/
SWIGINTERN VALUE
_wrap_SizeTVector_back(int argc, VALUE *argv, VALUE self) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< size_t >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< size_t > const *","back", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  {
    try {
      result = (std::vector< size_t >::value_type *) &((std::vector< size_t > const *)arg1)->back();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_size_t(static_cast< size_t >(*result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::SizeTVector.assign

  call-seq:
    assign(n, x)

Assign a new SizeTVector or portion of it.
*/
SWIGINTERN VALUE
_wrap_SizeTVector_assign(int argc, VALUE *argv, VALUE self) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::size_type arg2 ;
  std::vector< size_t >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< size_t >::value_type temp3 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< size_t > *","assign", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< size_t >::size_type","assign", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< size_t >::size_type >(val2);
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< size_t >::value_type","assign", 3, argv[1] ));
  } 
  temp3 = static_cast< std::vector< size_t >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      (arg1)->assign(arg2,(std::vector< size_t >::value_type const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::SizeTVector.resize

  call-seq:
    resize(new_size)
    resize(new_size, x)

Resize the size of the SizeTVector.
*/
SWIGINTERN VALUE
_wrap_SizeTVector_resize__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::size_type arg2 ;
  std::vector< size_t >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< size_t >::value_type temp3 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< size_t > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< size_t >::size_type","resize", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< size_t >::size_type >(val2);
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< size_t >::value_type","resize", 3, argv[1] ));
  } 
  temp3 = static_cast< std::vector< size_t >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      (arg1)->resize(arg2,(std::vector< size_t >::value_type const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_SizeTVector_resize(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<size_t,std::allocator< size_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SizeTVector_resize__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<size_t,std::allocator< size_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_SizeTVector_resize__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "SizeTVector.resize", 
    "    void SizeTVector.resize(std::vector< size_t >::size_type new_size)\n"
    "    void SizeTVector.resize(std::vector< size_t >::size_type new_size, std::vector< size_t >::value_type const &x)\n");
  
  return Qnil;
}



/*
  Document-method: SiTaxi::SizeTVector.insert

  call-seq:
    insert(pos, argc, ?) -> SizeTVector
    insert(pos, x) -> iterator
    insert(pos, n, x)

Insert one or more new elements in the SizeTVector.
*/
SWIGINTERN VALUE
_wrap_SizeTVector_insert__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::iterator arg2 ;
  std::vector< size_t >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  std::vector< size_t >::value_type temp3 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< size_t >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< size_t > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< size_t >::iterator","insert", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< size_t >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< size_t >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< size_t >::iterator","insert", 2, argv[0] ));
    }
  }
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< size_t >::value_type","insert", 3, argv[1] ));
  } 
  temp3 = static_cast< std::vector< size_t >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      result = (arg1)->insert(arg2,(std::vector< size_t >::value_type const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< size_t >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SizeTVector_insert__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::iterator arg2 ;
  std::vector< size_t >::size_type arg3 ;
  std::vector< size_t >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< size_t >::value_type temp4 ;
  size_t val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< size_t > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< size_t >::iterator","insert", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< size_t >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< size_t >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< size_t >::iterator","insert", 2, argv[0] ));
    }
  }
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< size_t >::size_type","insert", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< size_t >::size_type >(val3);
  ecode4 = SWIG_AsVal_size_t(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "std::vector< size_t >::value_type","insert", 4, argv[2] ));
  } 
  temp4 = static_cast< std::vector< size_t >::value_type >(val4);
  arg4 = &temp4;
  {
    try {
      (arg1)->insert(arg2,arg3,(std::vector< size_t >::value_type const &)*arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_SizeTVector_insert(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<size_t,std::allocator< size_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< size_t >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_SizeTVector_insert__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<size_t,std::allocator< size_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_SizeTVector_insert__SWIG_0(nargs, args, self);
          }
          return _wrap_SizeTVector_insert__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<size_t,std::allocator< size_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< size_t >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_SizeTVector_insert__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "insert", 
    "    void insert(std::vector< size_t >::difference_type pos, int argc, VALUE *argv, ...)\n"
    "    void insert(std::vector< size_t >::iterator pos, std::vector< size_t >::value_type const &x)\n"
    "    void insert(std::vector< size_t >::iterator pos, std::vector< size_t >::size_type n, std::vector< size_t >::value_type const &x)\n");
  
  return Qnil;
}



/*
  Document-method: SiTaxi::SizeTVector.reserve

  call-seq:
    reserve(n)

Reserve memory in the SizeTVector for a number of elements.
*/
SWIGINTERN VALUE
_wrap_SizeTVector_reserve(int argc, VALUE *argv, VALUE self) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< size_t > *","reserve", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< size_t >::size_type","reserve", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< size_t >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::SizeTVector.capacity

  call-seq:
    capacity -> size_type

Reserved capacity of the SizeTVector.
*/
SWIGINTERN VALUE
_wrap_SizeTVector_capacity(int argc, VALUE *argv, VALUE self) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< size_t >::size_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< size_t > const *","capacity", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  {
    try {
      result = ((std::vector< size_t > const *)arg1)->capacity();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_std_vector_Sl_size_t_Sg_(std::vector< size_t > *arg1) {
    delete arg1;
}

swig_class SwigClassDoubleVector;


/*
  Document-method: SiTaxi::DoubleVector.dup

  call-seq:
    dup -> DoubleVector

Create a duplicate of the class and unfreeze it if needed.
*/
SWIGINTERN VALUE
_wrap_DoubleVector_dup(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","dup", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (std::vector< double,std::allocator< double > > *)std_vector_Sl_double_Sg__dup(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::DoubleVector.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_DoubleVector_inspect(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","inspect", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (VALUE)std_vector_Sl_double_Sg__inspect(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::DoubleVector.to_a

  call-seq:
    to_a -> VALUE

Convert DoubleVector to an Array.
*/
SWIGINTERN VALUE
_wrap_DoubleVector_to_a(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","to_a", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (VALUE)std_vector_Sl_double_Sg__to_a(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::DoubleVector.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_DoubleVector_to_s(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","to_s", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (VALUE)std_vector_Sl_double_Sg__to_s(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::DoubleVector.slice

  call-seq:
    slice(i, j) -> VALUE

Return a slice (portion of) the DoubleVector.
*/
SWIGINTERN VALUE
_wrap_DoubleVector_slice(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","slice", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< double >::difference_type","slice", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< double >::difference_type","slice", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  {
    try {
      result = (VALUE)std_vector_Sl_double_Sg__slice(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::DoubleVector.each

  call-seq:
    each -> DoubleVector

Iterate thru each element in the DoubleVector.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_DoubleVector_each(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","each", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (std::vector< double,std::allocator< double > > *)std_vector_Sl_double_Sg__each(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::DoubleVector.select

  call-seq:
    select -> DoubleVector

Iterate thru each element in the DoubleVector and select those that match a condition.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_DoubleVector_select(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","select", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (std::vector< double,std::allocator< double > > *)std_vector_Sl_double_Sg__select(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::DoubleVector.reject!

  call-seq:
    reject! -> DoubleVector

Iterate thru each element in the DoubleVector and reject those that fail a condition.  A block must be provided.  DoubleVector is modified in place.
*/
SWIGINTERN VALUE
_wrap_DoubleVector_rejectN___(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","reject_bang", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (std::vector< double,std::allocator< double > > *)std_vector_Sl_double_Sg__reject_bang(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::DoubleVector.delete_at

  call-seq:
    delete_at(i) -> VALUE

Delete an element at a certain index.
*/
SWIGINTERN VALUE
_wrap_DoubleVector_delete_at(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","delete_at", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< double >::difference_type","delete_at", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  {
    try {
      result = (VALUE)std_vector_Sl_double_Sg__delete_at(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_DoubleVector___delete2__(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","__delete2__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< double >::value_type","__delete2__", 2, argv[0] ));
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  {
    try {
      result = (VALUE)std_vector_Sl_double_Sg____delete2__(arg1,(double const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::DoubleVector.pop

  call-seq:
    pop -> VALUE

Remove and return element at the end of the DoubleVector.
*/
SWIGINTERN VALUE
_wrap_DoubleVector_pop(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","pop", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (VALUE)std_vector_Sl_double_Sg__pop(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::DoubleVector.push

  call-seq:
    push(e) -> value_type

Add an element at the end of the DoubleVector.
*/
SWIGINTERN VALUE
_wrap_DoubleVector_push(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","push", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< double >::value_type","push", 2, argv[0] ));
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  {
    try {
      result = (std::vector< double >::value_type)std_vector_Sl_double_Sg__push(arg1,(double const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::DoubleVector.reject

  call-seq:
    reject -> DoubleVector

Iterate thru each element in the DoubleVector and reject those that fail a condition returning a new DoubleVector.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_DoubleVector_reject(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","reject", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (std::vector< double,std::allocator< double > > *)std_vector_Sl_double_Sg__reject(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::DoubleVector.at

  call-seq:
    at(i) -> VALUE

Return element at a certain index.
*/
SWIGINTERN VALUE
_wrap_DoubleVector_at(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > const *","at", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< double >::difference_type","at", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  {
    try {
      result = (VALUE)std_vector_Sl_double_Sg__at((std::vector< double > const *)arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::DoubleVector.[]

  call-seq:
    [](i, j) -> VALUE
    [](i) -> VALUE
    [](i) -> VALUE

Element accessor/slicing.
*/
SWIGINTERN VALUE
_wrap_DoubleVector___getitem____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< double >::difference_type","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< double >::difference_type","__getitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  {
    try {
      result = (VALUE)std_vector_Sl_double_Sg____getitem____SWIG_0((std::vector< double > const *)arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_DoubleVector___getitem____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< double >::difference_type","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  {
    try {
      result = (VALUE)std_vector_Sl_double_Sg____getitem____SWIG_1((std::vector< double > const *)arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_DoubleVector___getitem____SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  VALUE arg2 = (VALUE) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  arg2 = argv[0];
  {
    try {
      result = (VALUE)std_vector_Sl_double_Sg____getitem____SWIG_2((std::vector< double > const *)arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_DoubleVector___getitem__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DoubleVector___getitem____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_DoubleVector___getitem____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DoubleVector___getitem____SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "__getitem__", 
    "    VALUE __getitem__(std::vector< double >::difference_type i, std::vector< double >::difference_type j)\n"
    "    VALUE __getitem__(std::vector< double >::difference_type i)\n"
    "    VALUE __getitem__(VALUE i)\n");
  
  return Qnil;
}



/*
  Document-method: SiTaxi::DoubleVector.[]=

  call-seq:
    []=(i, x) -> VALUE
    []=(i, j, v) -> VALUE

Element setter/slicing.
*/
SWIGINTERN VALUE
_wrap_DoubleVector___setitem____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< double >::difference_type","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< double >::value_type","__setitem__", 3, argv[1] ));
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      result = (VALUE)std_vector_Sl_double_Sg____setitem____SWIG_0(arg1,arg2,(double const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_DoubleVector___setitem____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  std::vector< double,std::allocator< double > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< double >::difference_type","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< double >::difference_type","__setitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res4 = swig::asptr(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "std::vector< double,std::allocator< double > > const &","__setitem__", 4, argv[2] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< double,std::allocator< double > > const &","__setitem__", 4, argv[2])); 
    }
    arg4 = ptr;
  }
  {
    try {
      try {
        result = (VALUE)std_vector_Sl_double_Sg____setitem____SWIG_1(arg1,arg2,arg3,(std::vector< double,std::allocator< double > > const &)*arg4);
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return vresult;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
}


SWIGINTERN VALUE _wrap_DoubleVector___setitem__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DoubleVector___setitem____SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_DoubleVector___setitem____SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "__setitem__", 
    "    VALUE __setitem__(std::vector< double >::difference_type i, std::vector< double >::value_type const &x)\n"
    "    VALUE __setitem__(std::vector< double >::difference_type i, std::vector< double >::difference_type j, std::vector< double,std::allocator< double > > const &v)\n");
  
  return Qnil;
}



/*
  Document-method: SiTaxi::DoubleVector.shift

  call-seq:
    shift -> VALUE

Remove and return element at the beginning of the DoubleVector.
*/
SWIGINTERN VALUE
_wrap_DoubleVector_shift(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","shift", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (VALUE)std_vector_Sl_double_Sg__shift(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::DoubleVector.insert

  call-seq:
    insert(pos, argc, ?) -> DoubleVector
    insert(pos, x) -> iterator
    insert(pos, n, x)

Insert one or more new elements in the DoubleVector.
*/
SWIGINTERN VALUE
_wrap_DoubleVector_insert__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  int arg3 ;
  VALUE *arg4 = (VALUE *) 0 ;
  void *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if (argc < 2) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< double >::difference_type","insert", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  {
    arg3 = argc - 1;
    arg4 = argv + 1;
  }
  {
    try {
      result = (std::vector< double,std::allocator< double > > *)std_vector_Sl_double_Sg__insert__SWIG_0(arg1,arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::DoubleVector.unshift

  call-seq:
    unshift(argc, ?) -> DoubleVector

Add one or more elements at the beginning of the DoubleVector.
*/
SWIGINTERN VALUE
_wrap_DoubleVector_unshift(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  VALUE *arg3 = (VALUE *) 0 ;
  void *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if (argc < 1) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","unshift", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    arg2 = argc;
    arg3 = argv;
  }
  {
    try {
      result = (std::vector< double,std::allocator< double > > *)std_vector_Sl_double_Sg__unshift(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_DoubleVector__SWIG_0(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "SiTaxi::DoubleVector";
  std::vector< double > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (std::vector< double > *)new std::vector< double >();
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_DoubleVector__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  const char *classname SWIGUNUSED = "SiTaxi::DoubleVector";
  std::vector< double > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res1 = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > const &","std::vector<(double)>", 1, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< double > const &","std::vector<(double)>", 1, argv[0])); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return self;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return Qnil;
}



/*
  Document-method: SiTaxi::DoubleVector.empty?

  call-seq:
    empty? -> bool

Check if the DoubleVector is empty or not.
*/
SWIGINTERN VALUE
_wrap_DoubleVector_emptyq___(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > const *","empty", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (bool)((std::vector< double > const *)arg1)->empty();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::DoubleVector.size

  call-seq:
    size -> size_type

Size or Length of the DoubleVector.
*/
SWIGINTERN VALUE
_wrap_DoubleVector_size(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::size_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > const *","size", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = ((std::vector< double > const *)arg1)->size();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::DoubleVector.clear

  call-seq:
    clear

Clear DoubleVector contents.
*/
SWIGINTERN VALUE
_wrap_DoubleVector_clear(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","clear", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      (arg1)->clear();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_DoubleVector_swap(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","swap", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< double > &","swap", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< double > &","swap", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< double > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_DoubleVector_get_allocator(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::allocator< double > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > const *","get_allocator", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = ((std::vector< double > const *)arg1)->get_allocator();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new std::vector< double >::allocator_type(static_cast< const std::vector< double >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_double_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::DoubleVector.begin

  call-seq:
    begin -> iterator

Return an iterator to the beginning of the DoubleVector.
*/
SWIGINTERN VALUE
_wrap_DoubleVector_begin(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","begin", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< double >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::DoubleVector.end

  call-seq:
    end -> iterator

Return an iterator to past the end of the DoubleVector.
*/
SWIGINTERN VALUE
_wrap_DoubleVector_end(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","end", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (arg1)->end();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< double >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::DoubleVector.rbegin

  call-seq:
    rbegin -> reverse_iterator

Return a reverse iterator to the beginning (the end) of the DoubleVector.
*/
SWIGINTERN VALUE
_wrap_DoubleVector_rbegin(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::reverse_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","rbegin", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< double >::reverse_iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::DoubleVector.rend

  call-seq:
    rend -> reverse_iterator

Return a reverse iterator to past the end (past the beginning) of the DoubleVector.
*/
SWIGINTERN VALUE
_wrap_DoubleVector_rend(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::reverse_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","rend", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< double >::reverse_iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_DoubleVector__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< double >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  const char *classname SWIGUNUSED = "SiTaxi::DoubleVector";
  std::vector< double > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "std::vector< double >::size_type","std::vector<(double)>", 1, argv[0] ));
  } 
  arg1 = static_cast< std::vector< double >::size_type >(val1);
  {
    try {
      result = (std::vector< double > *)new std::vector< double >(arg1);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::DoubleVector.resize

  call-seq:
    resize(new_size)
    resize(new_size, x)

Resize the size of the DoubleVector.
*/
SWIGINTERN VALUE
_wrap_DoubleVector_resize__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< double >::size_type","resize", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::DoubleVector.erase

  call-seq:
    erase(pos) -> iterator
    erase(first, last) -> iterator

Delete a portion of the DoubleVector.
*/
SWIGINTERN VALUE
_wrap_DoubleVector_erase__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  std::vector< double >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","erase", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< double >::iterator","erase", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< double >::iterator","erase", 2, argv[0] ));
    }
  }
  {
    try {
      result = (arg1)->erase(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< double >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_DoubleVector_erase__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  swig::Iterator *iter3 = 0 ;
  int res3 ;
  std::vector< double >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","erase", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< double >::iterator","erase", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< double >::iterator","erase", 2, argv[0] ));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter3), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< double >::iterator","erase", 3, argv[1] ));
  } else {
    swig::Iterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< double >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< double >::iterator","erase", 3, argv[1] ));
    }
  }
  {
    try {
      result = (arg1)->erase(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< double >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_DoubleVector_erase(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_DoubleVector_erase__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        swig::ConstIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), 
          swig::Iterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< double >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_DoubleVector_erase__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "DoubleVector.erase", 
    "    std::vector< double >::iterator DoubleVector.erase(std::vector< double >::iterator pos)\n"
    "    std::vector< double >::iterator DoubleVector.erase(std::vector< double >::iterator first, std::vector< double >::iterator last)\n");
  
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_DoubleVector_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_DoubleVector_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_DoubleVector__SWIG_3(int argc, VALUE *argv, VALUE self) {
  std::vector< double >::size_type arg1 ;
  std::vector< double >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  const char *classname SWIGUNUSED = "SiTaxi::DoubleVector";
  std::vector< double > *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "std::vector< double >::size_type","std::vector<(double)>", 1, argv[0] ));
  } 
  arg1 = static_cast< std::vector< double >::size_type >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< double >::value_type","std::vector<(double)>", 2, argv[1] ));
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  {
    try {
      result = (std::vector< double > *)new std::vector< double >(arg1,(std::vector< double >::value_type const &)*arg2);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_DoubleVector(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_DoubleVector__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_DoubleVector__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DoubleVector__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_DoubleVector__SWIG_3(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "DoubleVector.new", 
    "    DoubleVector.new()\n"
    "    DoubleVector.new(std::vector< double > const &)\n"
    "    DoubleVector.new(std::vector< double >::size_type size)\n"
    "    DoubleVector.new(std::vector< double >::size_type size, std::vector< double >::value_type const &value)\n");
  
  return Qnil;
}



/*
  Document-method: SiTaxi::DoubleVector.front

  call-seq:
    front -> value_type

Return the first element in DoubleVector.
*/
SWIGINTERN VALUE
_wrap_DoubleVector_front(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > const *","front", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (std::vector< double >::value_type *) &((std::vector< double > const *)arg1)->front();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(*result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::DoubleVector.back

  call-seq:
    back -> value_type

Return the last element in DoubleVector.
*/
SWIGINTERN VALUE
_wrap_DoubleVector_back(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > const *","back", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (std::vector< double >::value_type *) &((std::vector< double > const *)arg1)->back();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(*result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::DoubleVector.assign

  call-seq:
    assign(n, x)

Assign a new DoubleVector or portion of it.
*/
SWIGINTERN VALUE
_wrap_DoubleVector_assign(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","assign", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< double >::size_type","assign", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< double >::value_type","assign", 3, argv[1] ));
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      (arg1)->assign(arg2,(std::vector< double >::value_type const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::DoubleVector.resize

  call-seq:
    resize(new_size)
    resize(new_size, x)

Resize the size of the DoubleVector.
*/
SWIGINTERN VALUE
_wrap_DoubleVector_resize__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< double >::size_type","resize", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< double >::value_type","resize", 3, argv[1] ));
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      (arg1)->resize(arg2,(std::vector< double >::value_type const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_DoubleVector_resize(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DoubleVector_resize__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DoubleVector_resize__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "DoubleVector.resize", 
    "    void DoubleVector.resize(std::vector< double >::size_type new_size)\n"
    "    void DoubleVector.resize(std::vector< double >::size_type new_size, std::vector< double >::value_type const &x)\n");
  
  return Qnil;
}



/*
  Document-method: SiTaxi::DoubleVector.insert

  call-seq:
    insert(pos, argc, ?) -> DoubleVector
    insert(pos, x) -> iterator
    insert(pos, n, x)

Insert one or more new elements in the DoubleVector.
*/
SWIGINTERN VALUE
_wrap_DoubleVector_insert__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  std::vector< double >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< double >::iterator","insert", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< double >::iterator","insert", 2, argv[0] ));
    }
  }
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< double >::value_type","insert", 3, argv[1] ));
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      result = (arg1)->insert(arg2,(std::vector< double >::value_type const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< double >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_DoubleVector_insert__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::size_type arg3 ;
  std::vector< double >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< double >::value_type temp4 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< double >::iterator","insert", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< double >::iterator","insert", 2, argv[0] ));
    }
  }
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< double >::size_type","insert", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< double >::size_type >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "std::vector< double >::value_type","insert", 4, argv[2] ));
  } 
  temp4 = static_cast< std::vector< double >::value_type >(val4);
  arg4 = &temp4;
  {
    try {
      (arg1)->insert(arg2,arg3,(std::vector< double >::value_type const &)*arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_DoubleVector_insert(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DoubleVector_insert__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_DoubleVector_insert__SWIG_0(nargs, args, self);
          }
          return _wrap_DoubleVector_insert__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_DoubleVector_insert__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "insert", 
    "    void insert(std::vector< double >::difference_type pos, int argc, VALUE *argv, ...)\n"
    "    void insert(std::vector< double >::iterator pos, std::vector< double >::value_type const &x)\n"
    "    void insert(std::vector< double >::iterator pos, std::vector< double >::size_type n, std::vector< double >::value_type const &x)\n");
  
  return Qnil;
}



/*
  Document-method: SiTaxi::DoubleVector.reserve

  call-seq:
    reserve(n)

Reserve memory in the DoubleVector for a number of elements.
*/
SWIGINTERN VALUE
_wrap_DoubleVector_reserve(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","reserve", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< double >::size_type","reserve", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::DoubleVector.capacity

  call-seq:
    capacity -> size_type

Reserved capacity of the DoubleVector.
*/
SWIGINTERN VALUE
_wrap_DoubleVector_capacity(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::size_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > const *","capacity", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = ((std::vector< double > const *)arg1)->capacity();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_DoubleVector_map_bang(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","map_bang", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (std::vector< double,std::allocator< double > > *)std_vector_Sl_double_Sg__map_bang(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::DoubleVector.__delete__

  call-seq:
    __delete__(val) -> VALUE

Delete a matching element.
*/
SWIGINTERN VALUE
_wrap_DoubleVector___delete__(int argc, VALUE *argv, VALUE self) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double > *","__delete__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","__delete__", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  result = (VALUE)std_vector_Sl_double_Sg____delete__(arg1,(double const &)*arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_std_vector_Sl_double_Sg_(std::vector< double > *arg1) {
    delete arg1;
}

swig_class SwigClassIntVector;


/*
  Document-method: SiTaxi::IntVector.dup

  call-seq:
    dup -> IntVector

Create a duplicate of the class and unfreeze it if needed.
*/
SWIGINTERN VALUE
_wrap_IntVector_dup(int argc, VALUE *argv, VALUE self) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< int > *","dup", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = (std::vector< int,std::allocator< int > > *)std_vector_Sl_int_Sg__dup(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::IntVector.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_IntVector_inspect(int argc, VALUE *argv, VALUE self) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< int > *","inspect", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = (VALUE)std_vector_Sl_int_Sg__inspect(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::IntVector.to_a

  call-seq:
    to_a -> VALUE

Convert IntVector to an Array.
*/
SWIGINTERN VALUE
_wrap_IntVector_to_a(int argc, VALUE *argv, VALUE self) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< int > *","to_a", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = (VALUE)std_vector_Sl_int_Sg__to_a(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::IntVector.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_IntVector_to_s(int argc, VALUE *argv, VALUE self) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< int > *","to_s", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = (VALUE)std_vector_Sl_int_Sg__to_s(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::IntVector.slice

  call-seq:
    slice(i, j) -> VALUE

Return a slice (portion of) the IntVector.
*/
SWIGINTERN VALUE
_wrap_IntVector_slice(int argc, VALUE *argv, VALUE self) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< int > *","slice", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< int >::difference_type","slice", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< int >::difference_type","slice", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  {
    try {
      result = (VALUE)std_vector_Sl_int_Sg__slice(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::IntVector.each

  call-seq:
    each -> IntVector

Iterate thru each element in the IntVector.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_IntVector_each(int argc, VALUE *argv, VALUE self) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< int > *","each", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = (std::vector< int,std::allocator< int > > *)std_vector_Sl_int_Sg__each(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::IntVector.select

  call-seq:
    select -> IntVector

Iterate thru each element in the IntVector and select those that match a condition.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_IntVector_select(int argc, VALUE *argv, VALUE self) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< int > *","select", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = (std::vector< int,std::allocator< int > > *)std_vector_Sl_int_Sg__select(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::IntVector.reject!

  call-seq:
    reject! -> IntVector

Iterate thru each element in the IntVector and reject those that fail a condition.  A block must be provided.  IntVector is modified in place.
*/
SWIGINTERN VALUE
_wrap_IntVector_rejectN___(int argc, VALUE *argv, VALUE self) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< int > *","reject_bang", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = (std::vector< int,std::allocator< int > > *)std_vector_Sl_int_Sg__reject_bang(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::IntVector.delete_at

  call-seq:
    delete_at(i) -> VALUE

Delete an element at a certain index.
*/
SWIGINTERN VALUE
_wrap_IntVector_delete_at(int argc, VALUE *argv, VALUE self) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< int > *","delete_at", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< int >::difference_type","delete_at", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  {
    try {
      result = (VALUE)std_vector_Sl_int_Sg__delete_at(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IntVector___delete2__(int argc, VALUE *argv, VALUE self) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< int > *","__delete2__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< int >::value_type","__delete2__", 2, argv[0] ));
  } 
  temp2 = static_cast< std::vector< int >::value_type >(val2);
  arg2 = &temp2;
  {
    try {
      result = (VALUE)std_vector_Sl_int_Sg____delete2__(arg1,(int const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::IntVector.pop

  call-seq:
    pop -> VALUE

Remove and return element at the end of the IntVector.
*/
SWIGINTERN VALUE
_wrap_IntVector_pop(int argc, VALUE *argv, VALUE self) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< int > *","pop", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = (VALUE)std_vector_Sl_int_Sg__pop(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::IntVector.push

  call-seq:
    push(e) -> value_type

Add an element at the end of the IntVector.
*/
SWIGINTERN VALUE
_wrap_IntVector_push(int argc, VALUE *argv, VALUE self) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< int > *","push", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< int >::value_type","push", 2, argv[0] ));
  } 
  temp2 = static_cast< std::vector< int >::value_type >(val2);
  arg2 = &temp2;
  {
    try {
      result = (std::vector< int >::value_type)std_vector_Sl_int_Sg__push(arg1,(int const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::IntVector.reject

  call-seq:
    reject -> IntVector

Iterate thru each element in the IntVector and reject those that fail a condition returning a new IntVector.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_IntVector_reject(int argc, VALUE *argv, VALUE self) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< int > *","reject", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = (std::vector< int,std::allocator< int > > *)std_vector_Sl_int_Sg__reject(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::IntVector.at

  call-seq:
    at(i) -> VALUE

Return element at a certain index.
*/
SWIGINTERN VALUE
_wrap_IntVector_at(int argc, VALUE *argv, VALUE self) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< int > const *","at", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< int >::difference_type","at", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  {
    try {
      result = (VALUE)std_vector_Sl_int_Sg__at((std::vector< int > const *)arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::IntVector.[]

  call-seq:
    [](i, j) -> VALUE
    [](i) -> VALUE
    [](i) -> VALUE

Element accessor/slicing.
*/
SWIGINTERN VALUE
_wrap_IntVector___getitem____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< int > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< int >::difference_type","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< int >::difference_type","__getitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  {
    try {
      result = (VALUE)std_vector_Sl_int_Sg____getitem____SWIG_0((std::vector< int > const *)arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IntVector___getitem____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< int > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< int >::difference_type","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  {
    try {
      result = (VALUE)std_vector_Sl_int_Sg____getitem____SWIG_1((std::vector< int > const *)arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IntVector___getitem____SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  VALUE arg2 = (VALUE) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< int > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  arg2 = argv[0];
  {
    try {
      result = (VALUE)std_vector_Sl_int_Sg____getitem____SWIG_2((std::vector< int > const *)arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_IntVector___getitem__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IntVector___getitem____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_IntVector___getitem____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IntVector___getitem____SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "__getitem__", 
    "    VALUE __getitem__(std::vector< int >::difference_type i, std::vector< int >::difference_type j)\n"
    "    VALUE __getitem__(std::vector< int >::difference_type i)\n"
    "    VALUE __getitem__(VALUE i)\n");
  
  return Qnil;
}



/*
  Document-method: SiTaxi::IntVector.[]=

  call-seq:
    []=(i, x) -> VALUE
    []=(i, j, v) -> VALUE

Element setter/slicing.
*/
SWIGINTERN VALUE
_wrap_IntVector___setitem____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< int > *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< int >::difference_type","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< int >::value_type","__setitem__", 3, argv[1] ));
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      result = (VALUE)std_vector_Sl_int_Sg____setitem____SWIG_0(arg1,arg2,(int const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IntVector___setitem____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  std::vector< int,std::allocator< int > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< int > *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< int >::difference_type","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< int >::difference_type","__setitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res4 = swig::asptr(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "std::vector< int,std::allocator< int > > const &","__setitem__", 4, argv[2] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< int,std::allocator< int > > const &","__setitem__", 4, argv[2])); 
    }
    arg4 = ptr;
  }
  {
    try {
      try {
        result = (VALUE)std_vector_Sl_int_Sg____setitem____SWIG_1(arg1,arg2,arg3,(std::vector< int,std::allocator< int > > const &)*arg4);
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return vresult;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
}


SWIGINTERN VALUE _wrap_IntVector___setitem__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IntVector___setitem____SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<int,std::allocator< int > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_IntVector___setitem____SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "__setitem__", 
    "    VALUE __setitem__(std::vector< int >::difference_type i, std::vector< int >::value_type const &x)\n"
    "    VALUE __setitem__(std::vector< int >::difference_type i, std::vector< int >::difference_type j, std::vector< int,std::allocator< int > > const &v)\n");
  
  return Qnil;
}



/*
  Document-method: SiTaxi::IntVector.shift

  call-seq:
    shift -> VALUE

Remove and return element at the beginning of the IntVector.
*/
SWIGINTERN VALUE
_wrap_IntVector_shift(int argc, VALUE *argv, VALUE self) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< int > *","shift", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = (VALUE)std_vector_Sl_int_Sg__shift(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::IntVector.insert

  call-seq:
    insert(pos, argc, ?) -> IntVector
    insert(pos, x) -> iterator
    insert(pos, n, x)

Insert one or more new elements in the IntVector.
*/
SWIGINTERN VALUE
_wrap_IntVector_insert__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  int arg3 ;
  VALUE *arg4 = (VALUE *) 0 ;
  void *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if (argc < 2) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< int > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< int >::difference_type","insert", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  {
    arg3 = argc - 1;
    arg4 = argv + 1;
  }
  {
    try {
      result = (std::vector< int,std::allocator< int > > *)std_vector_Sl_int_Sg__insert__SWIG_0(arg1,arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::IntVector.unshift

  call-seq:
    unshift(argc, ?) -> IntVector

Add one or more elements at the beginning of the IntVector.
*/
SWIGINTERN VALUE
_wrap_IntVector_unshift(int argc, VALUE *argv, VALUE self) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  VALUE *arg3 = (VALUE *) 0 ;
  void *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if (argc < 1) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< int > *","unshift", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    arg2 = argc;
    arg3 = argv;
  }
  {
    try {
      result = (std::vector< int,std::allocator< int > > *)std_vector_Sl_int_Sg__unshift(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_IntVector__SWIG_0(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "SiTaxi::IntVector";
  std::vector< int > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (std::vector< int > *)new std::vector< int >();
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_IntVector__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< int > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  const char *classname SWIGUNUSED = "SiTaxi::IntVector";
  std::vector< int > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res1 = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< int > const &","std::vector<(int)>", 1, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< int > const &","std::vector<(int)>", 1, argv[0])); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< int > *)new std::vector< int >((std::vector< int > const &)*arg1);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return self;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return Qnil;
}



/*
  Document-method: SiTaxi::IntVector.empty?

  call-seq:
    empty? -> bool

Check if the IntVector is empty or not.
*/
SWIGINTERN VALUE
_wrap_IntVector_emptyq___(int argc, VALUE *argv, VALUE self) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< int > const *","empty", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = (bool)((std::vector< int > const *)arg1)->empty();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::IntVector.size

  call-seq:
    size -> size_type

Size or Length of the IntVector.
*/
SWIGINTERN VALUE
_wrap_IntVector_size(int argc, VALUE *argv, VALUE self) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int >::size_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< int > const *","size", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = ((std::vector< int > const *)arg1)->size();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::IntVector.clear

  call-seq:
    clear

Clear IntVector contents.
*/
SWIGINTERN VALUE
_wrap_IntVector_clear(int argc, VALUE *argv, VALUE self) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< int > *","clear", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      (arg1)->clear();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IntVector_swap(int argc, VALUE *argv, VALUE self) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< int > *","swap", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< int > &","swap", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< int > &","swap", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< int > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IntVector_get_allocator(int argc, VALUE *argv, VALUE self) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::allocator< int > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< int > const *","get_allocator", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = ((std::vector< int > const *)arg1)->get_allocator();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new std::vector< int >::allocator_type(static_cast< const std::vector< int >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_int_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::IntVector.begin

  call-seq:
    begin -> iterator

Return an iterator to the beginning of the IntVector.
*/
SWIGINTERN VALUE
_wrap_IntVector_begin(int argc, VALUE *argv, VALUE self) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< int > *","begin", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< int >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::IntVector.end

  call-seq:
    end -> iterator

Return an iterator to past the end of the IntVector.
*/
SWIGINTERN VALUE
_wrap_IntVector_end(int argc, VALUE *argv, VALUE self) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< int > *","end", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = (arg1)->end();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< int >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::IntVector.rbegin

  call-seq:
    rbegin -> reverse_iterator

Return a reverse iterator to the beginning (the end) of the IntVector.
*/
SWIGINTERN VALUE
_wrap_IntVector_rbegin(int argc, VALUE *argv, VALUE self) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int >::reverse_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< int > *","rbegin", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< int >::reverse_iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::IntVector.rend

  call-seq:
    rend -> reverse_iterator

Return a reverse iterator to past the end (past the beginning) of the IntVector.
*/
SWIGINTERN VALUE
_wrap_IntVector_rend(int argc, VALUE *argv, VALUE self) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int >::reverse_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< int > *","rend", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< int >::reverse_iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_IntVector__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< int >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  const char *classname SWIGUNUSED = "SiTaxi::IntVector";
  std::vector< int > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "std::vector< int >::size_type","std::vector<(int)>", 1, argv[0] ));
  } 
  arg1 = static_cast< std::vector< int >::size_type >(val1);
  {
    try {
      result = (std::vector< int > *)new std::vector< int >(arg1);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::IntVector.resize

  call-seq:
    resize(new_size)
    resize(new_size, x)

Resize the size of the IntVector.
*/
SWIGINTERN VALUE
_wrap_IntVector_resize__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< int > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< int >::size_type","resize", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::IntVector.erase

  call-seq:
    erase(pos) -> iterator
    erase(first, last) -> iterator

Delete a portion of the IntVector.
*/
SWIGINTERN VALUE
_wrap_IntVector_erase__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  std::vector< int >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< int > *","erase", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< int >::iterator","erase", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< int >::iterator","erase", 2, argv[0] ));
    }
  }
  {
    try {
      result = (arg1)->erase(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< int >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IntVector_erase__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  std::vector< int >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  swig::Iterator *iter3 = 0 ;
  int res3 ;
  std::vector< int >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< int > *","erase", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< int >::iterator","erase", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< int >::iterator","erase", 2, argv[0] ));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter3), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< int >::iterator","erase", 3, argv[1] ));
  } else {
    swig::Iterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< int >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< int >::iterator","erase", 3, argv[1] ));
    }
  }
  {
    try {
      result = (arg1)->erase(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< int >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_IntVector_erase(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< int >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_IntVector_erase__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< int >::iterator > *>(iter) != 0));
      if (_v) {
        swig::ConstIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), 
          swig::Iterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< int >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_IntVector_erase__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "IntVector.erase", 
    "    std::vector< int >::iterator IntVector.erase(std::vector< int >::iterator pos)\n"
    "    std::vector< int >::iterator IntVector.erase(std::vector< int >::iterator first, std::vector< int >::iterator last)\n");
  
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_IntVector_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_IntVector_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_IntVector__SWIG_3(int argc, VALUE *argv, VALUE self) {
  std::vector< int >::size_type arg1 ;
  std::vector< int >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  const char *classname SWIGUNUSED = "SiTaxi::IntVector";
  std::vector< int > *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "std::vector< int >::size_type","std::vector<(int)>", 1, argv[0] ));
  } 
  arg1 = static_cast< std::vector< int >::size_type >(val1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< int >::value_type","std::vector<(int)>", 2, argv[1] ));
  } 
  temp2 = static_cast< std::vector< int >::value_type >(val2);
  arg2 = &temp2;
  {
    try {
      result = (std::vector< int > *)new std::vector< int >(arg1,(std::vector< int >::value_type const &)*arg2);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_IntVector(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_IntVector__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_IntVector__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_IntVector__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_IntVector__SWIG_3(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "IntVector.new", 
    "    IntVector.new()\n"
    "    IntVector.new(std::vector< int > const &)\n"
    "    IntVector.new(std::vector< int >::size_type size)\n"
    "    IntVector.new(std::vector< int >::size_type size, std::vector< int >::value_type const &value)\n");
  
  return Qnil;
}



/*
  Document-method: SiTaxi::IntVector.front

  call-seq:
    front -> value_type

Return the first element in IntVector.
*/
SWIGINTERN VALUE
_wrap_IntVector_front(int argc, VALUE *argv, VALUE self) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< int > const *","front", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = (std::vector< int >::value_type *) &((std::vector< int > const *)arg1)->front();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(*result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::IntVector.back

  call-seq:
    back -> value_type

Return the last element in IntVector.
*/
SWIGINTERN VALUE
_wrap_IntVector_back(int argc, VALUE *argv, VALUE self) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< int > const *","back", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = (std::vector< int >::value_type *) &((std::vector< int > const *)arg1)->back();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(*result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::IntVector.assign

  call-seq:
    assign(n, x)

Assign a new IntVector or portion of it.
*/
SWIGINTERN VALUE
_wrap_IntVector_assign(int argc, VALUE *argv, VALUE self) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< int > *","assign", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< int >::size_type","assign", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< int >::value_type","assign", 3, argv[1] ));
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      (arg1)->assign(arg2,(std::vector< int >::value_type const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::IntVector.resize

  call-seq:
    resize(new_size)
    resize(new_size, x)

Resize the size of the IntVector.
*/
SWIGINTERN VALUE
_wrap_IntVector_resize__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< int > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< int >::size_type","resize", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< int >::value_type","resize", 3, argv[1] ));
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      (arg1)->resize(arg2,(std::vector< int >::value_type const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_IntVector_resize(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IntVector_resize__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IntVector_resize__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "IntVector.resize", 
    "    void IntVector.resize(std::vector< int >::size_type new_size)\n"
    "    void IntVector.resize(std::vector< int >::size_type new_size, std::vector< int >::value_type const &x)\n");
  
  return Qnil;
}



/*
  Document-method: SiTaxi::IntVector.insert

  call-seq:
    insert(pos, argc, ?) -> IntVector
    insert(pos, x) -> iterator
    insert(pos, n, x)

Insert one or more new elements in the IntVector.
*/
SWIGINTERN VALUE
_wrap_IntVector_insert__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  std::vector< int >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< int > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< int >::iterator","insert", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< int >::iterator","insert", 2, argv[0] ));
    }
  }
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< int >::value_type","insert", 3, argv[1] ));
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      result = (arg1)->insert(arg2,(std::vector< int >::value_type const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< int >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IntVector_insert__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  std::vector< int >::size_type arg3 ;
  std::vector< int >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< int >::value_type temp4 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< int > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< int >::iterator","insert", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< int >::iterator","insert", 2, argv[0] ));
    }
  }
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< int >::size_type","insert", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< int >::size_type >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "std::vector< int >::value_type","insert", 4, argv[2] ));
  } 
  temp4 = static_cast< std::vector< int >::value_type >(val4);
  arg4 = &temp4;
  {
    try {
      (arg1)->insert(arg2,arg3,(std::vector< int >::value_type const &)*arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_IntVector_insert(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< int >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IntVector_insert__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_IntVector_insert__SWIG_0(nargs, args, self);
          }
          return _wrap_IntVector_insert__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< int >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_IntVector_insert__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "insert", 
    "    void insert(std::vector< int >::difference_type pos, int argc, VALUE *argv, ...)\n"
    "    void insert(std::vector< int >::iterator pos, std::vector< int >::value_type const &x)\n"
    "    void insert(std::vector< int >::iterator pos, std::vector< int >::size_type n, std::vector< int >::value_type const &x)\n");
  
  return Qnil;
}



/*
  Document-method: SiTaxi::IntVector.reserve

  call-seq:
    reserve(n)

Reserve memory in the IntVector for a number of elements.
*/
SWIGINTERN VALUE
_wrap_IntVector_reserve(int argc, VALUE *argv, VALUE self) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< int > *","reserve", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< int >::size_type","reserve", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::IntVector.capacity

  call-seq:
    capacity -> size_type

Reserved capacity of the IntVector.
*/
SWIGINTERN VALUE
_wrap_IntVector_capacity(int argc, VALUE *argv, VALUE self) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int >::size_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< int > const *","capacity", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = ((std::vector< int > const *)arg1)->capacity();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IntVector_map_bang(int argc, VALUE *argv, VALUE self) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< int > *","map_bang", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (std::vector< int,std::allocator< int > > *)std_vector_Sl_int_Sg__map_bang(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::IntVector.__delete__

  call-seq:
    __delete__(val) -> VALUE

Delete a matching element.
*/
SWIGINTERN VALUE
_wrap_IntVector___delete__(int argc, VALUE *argv, VALUE self) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< int > *","__delete__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","__delete__", 2, argv[0] ));
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  result = (VALUE)std_vector_Sl_int_Sg____delete__(arg1,(int const &)*arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_std_vector_Sl_int_Sg_(std::vector< int > *arg1) {
    delete arg1;
}

swig_class SwigClassIntQueue;

SWIGINTERN VALUE
_wrap_new_IntQueue__SWIG_0(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "SiTaxi::IntQueue";
  std::queue< int > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (std::queue< int > *)new std::queue< int >();
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_IntQueue_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_IntQueue_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_std__queueT_int_std__dequeT_int_std__allocatorT_int_t_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_IntQueue__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::deque< int,std::allocator< int > > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  const char *classname SWIGUNUSED = "SiTaxi::IntQueue";
  std::queue< int > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__dequeT_int_std__allocatorT_int_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< int,std::allocator< int > > const &","std::queue<(int)>", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::deque< int,std::allocator< int > > const &","std::queue<(int)>", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::deque< int,std::allocator< int > > * >(argp1);
  {
    try {
      result = (std::queue< int > *)new std::queue< int >((std::deque< int,std::allocator< int > > const &)*arg1);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_IntQueue(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_IntQueue__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__dequeT_int_std__allocatorT_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_IntQueue__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "IntQueue.new", 
    "    IntQueue.new()\n"
    "    IntQueue.new(std::deque< int,std::allocator< int > > const &)\n");
  
  return Qnil;
}



/*
  Document-method: SiTaxi::IntQueue.empty?

  call-seq:
    empty? -> bool

Check if the IntQueue is empty or not.
*/
SWIGINTERN VALUE
_wrap_IntQueue_emptyq___(int argc, VALUE *argv, VALUE self) {
  std::queue< int > *arg1 = (std::queue< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__queueT_int_std__dequeT_int_std__allocatorT_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::queue< int > const *","empty", 1, self )); 
  }
  arg1 = reinterpret_cast< std::queue< int > * >(argp1);
  {
    try {
      result = (bool)((std::queue< int > const *)arg1)->empty();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::IntQueue.size

  call-seq:
    size -> size_type

Size or Length of the IntQueue.
*/
SWIGINTERN VALUE
_wrap_IntQueue_size(int argc, VALUE *argv, VALUE self) {
  std::queue< int > *arg1 = (std::queue< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::queue< int >::size_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__queueT_int_std__dequeT_int_std__allocatorT_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::queue< int > const *","size", 1, self )); 
  }
  arg1 = reinterpret_cast< std::queue< int > * >(argp1);
  {
    try {
      result = ((std::queue< int > const *)arg1)->size();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::IntQueue.front

  call-seq:
    front -> value_type

Return the first element in IntQueue.
*/
SWIGINTERN VALUE
_wrap_IntQueue_front(int argc, VALUE *argv, VALUE self) {
  std::queue< int > *arg1 = (std::queue< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::queue< int >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__queueT_int_std__dequeT_int_std__allocatorT_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::queue< int > const *","front", 1, self )); 
  }
  arg1 = reinterpret_cast< std::queue< int > * >(argp1);
  {
    try {
      result = (std::queue< int >::value_type *) &((std::queue< int > const *)arg1)->front();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(*result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::IntQueue.back

  call-seq:
    back -> value_type

Return the last element in IntQueue.
*/
SWIGINTERN VALUE
_wrap_IntQueue_back(int argc, VALUE *argv, VALUE self) {
  std::queue< int > *arg1 = (std::queue< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::queue< int >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__queueT_int_std__dequeT_int_std__allocatorT_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::queue< int > const *","back", 1, self )); 
  }
  arg1 = reinterpret_cast< std::queue< int > * >(argp1);
  {
    try {
      result = (std::queue< int >::value_type *) &((std::queue< int > const *)arg1)->back();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(*result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::IntQueue.pop

  call-seq:
    pop

Remove and return element at the end of the IntQueue.
*/
SWIGINTERN VALUE
_wrap_IntQueue_pop(int argc, VALUE *argv, VALUE self) {
  std::queue< int > *arg1 = (std::queue< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__queueT_int_std__dequeT_int_std__allocatorT_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::queue< int > *","pop", 1, self )); 
  }
  arg1 = reinterpret_cast< std::queue< int > * >(argp1);
  {
    try {
      (arg1)->pop();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::IntQueue.push

  call-seq:
    push(?)

Add an element at the end of the IntQueue.
*/
SWIGINTERN VALUE
_wrap_IntQueue_push(int argc, VALUE *argv, VALUE self) {
  std::queue< int > *arg1 = (std::queue< int > *) 0 ;
  std::queue< int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::queue< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__queueT_int_std__dequeT_int_std__allocatorT_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::queue< int > *","push", 1, self )); 
  }
  arg1 = reinterpret_cast< std::queue< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::queue< int >::value_type","push", 2, argv[0] ));
  } 
  temp2 = static_cast< std::queue< int >::value_type >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->push((std::queue< int >::value_type const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN void
free_std_queue_Sl_int_Sg_(std::queue< int > *arg1) {
    delete arg1;
}

swig_class SwigClassNaturalHistogramVector;


/*
  Document-method: SiTaxi::NaturalHistogramVector.dup

  call-seq:
    dup -> NaturalHistogramVector

Create a duplicate of the class and unfreeze it if needed.
*/
SWIGINTERN VALUE
_wrap_NaturalHistogramVector_dup(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::NaturalHistogram > *arg1 = (std::vector< si_taxi::NaturalHistogram > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram > *","dup", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::NaturalHistogram > * >(argp1);
  {
    try {
      result = (std::vector< si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > > *)std_vector_Sl_si_taxi_NaturalHistogram_Sg__dup(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::NaturalHistogramVector.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_NaturalHistogramVector_inspect(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::NaturalHistogram > *arg1 = (std::vector< si_taxi::NaturalHistogram > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram > *","inspect", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::NaturalHistogram > * >(argp1);
  {
    try {
      result = (VALUE)std_vector_Sl_si_taxi_NaturalHistogram_Sg__inspect(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::NaturalHistogramVector.to_a

  call-seq:
    to_a -> VALUE

Convert NaturalHistogramVector to an Array.
*/
SWIGINTERN VALUE
_wrap_NaturalHistogramVector_to_a(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::NaturalHistogram > *arg1 = (std::vector< si_taxi::NaturalHistogram > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram > *","to_a", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::NaturalHistogram > * >(argp1);
  {
    try {
      result = (VALUE)std_vector_Sl_si_taxi_NaturalHistogram_Sg__to_a(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::NaturalHistogramVector.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_NaturalHistogramVector_to_s(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::NaturalHistogram > *arg1 = (std::vector< si_taxi::NaturalHistogram > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram > *","to_s", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::NaturalHistogram > * >(argp1);
  {
    try {
      result = (VALUE)std_vector_Sl_si_taxi_NaturalHistogram_Sg__to_s(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::NaturalHistogramVector.slice

  call-seq:
    slice(i, j) -> VALUE

Return a slice (portion of) the NaturalHistogramVector.
*/
SWIGINTERN VALUE
_wrap_NaturalHistogramVector_slice(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::NaturalHistogram > *arg1 = (std::vector< si_taxi::NaturalHistogram > *) 0 ;
  std::vector< si_taxi::NaturalHistogram >::difference_type arg2 ;
  std::vector< si_taxi::NaturalHistogram >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram > *","slice", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::NaturalHistogram > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram >::difference_type","slice", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< si_taxi::NaturalHistogram >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram >::difference_type","slice", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< si_taxi::NaturalHistogram >::difference_type >(val3);
  {
    try {
      result = (VALUE)std_vector_Sl_si_taxi_NaturalHistogram_Sg__slice(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::NaturalHistogramVector.each

  call-seq:
    each -> NaturalHistogramVector

Iterate thru each element in the NaturalHistogramVector.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_NaturalHistogramVector_each(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::NaturalHistogram > *arg1 = (std::vector< si_taxi::NaturalHistogram > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram > *","each", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::NaturalHistogram > * >(argp1);
  {
    try {
      result = (std::vector< si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > > *)std_vector_Sl_si_taxi_NaturalHistogram_Sg__each(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::NaturalHistogramVector.select

  call-seq:
    select -> NaturalHistogramVector

Iterate thru each element in the NaturalHistogramVector and select those that match a condition.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_NaturalHistogramVector_select(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::NaturalHistogram > *arg1 = (std::vector< si_taxi::NaturalHistogram > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram > *","select", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::NaturalHistogram > * >(argp1);
  {
    try {
      result = (std::vector< si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > > *)std_vector_Sl_si_taxi_NaturalHistogram_Sg__select(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::NaturalHistogramVector.reject!

  call-seq:
    reject! -> NaturalHistogramVector

Iterate thru each element in the NaturalHistogramVector and reject those that fail a condition.  A block must be provided.  NaturalHistogramVector is modified in place.
*/
SWIGINTERN VALUE
_wrap_NaturalHistogramVector_rejectN___(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::NaturalHistogram > *arg1 = (std::vector< si_taxi::NaturalHistogram > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram > *","reject_bang", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::NaturalHistogram > * >(argp1);
  {
    try {
      result = (std::vector< si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > > *)std_vector_Sl_si_taxi_NaturalHistogram_Sg__reject_bang(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::NaturalHistogramVector.delete_at

  call-seq:
    delete_at(i) -> VALUE

Delete an element at a certain index.
*/
SWIGINTERN VALUE
_wrap_NaturalHistogramVector_delete_at(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::NaturalHistogram > *arg1 = (std::vector< si_taxi::NaturalHistogram > *) 0 ;
  std::vector< si_taxi::NaturalHistogram >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram > *","delete_at", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::NaturalHistogram > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram >::difference_type","delete_at", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< si_taxi::NaturalHistogram >::difference_type >(val2);
  {
    try {
      result = (VALUE)std_vector_Sl_si_taxi_NaturalHistogram_Sg__delete_at(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NaturalHistogramVector___delete2__(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::NaturalHistogram > *arg1 = (std::vector< si_taxi::NaturalHistogram > *) 0 ;
  std::vector< si_taxi::NaturalHistogram >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram > *","__delete2__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::NaturalHistogram > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_si_taxi__NaturalHistogram,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram >::value_type const &","__delete2__", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< si_taxi::NaturalHistogram >::value_type const &","__delete2__", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< si_taxi::NaturalHistogram >::value_type * >(argp2);
  {
    try {
      result = (VALUE)std_vector_Sl_si_taxi_NaturalHistogram_Sg____delete2__(arg1,(si_taxi::NaturalHistogram const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::NaturalHistogramVector.pop

  call-seq:
    pop -> VALUE

Remove and return element at the end of the NaturalHistogramVector.
*/
SWIGINTERN VALUE
_wrap_NaturalHistogramVector_pop(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::NaturalHistogram > *arg1 = (std::vector< si_taxi::NaturalHistogram > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram > *","pop", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::NaturalHistogram > * >(argp1);
  {
    try {
      result = (VALUE)std_vector_Sl_si_taxi_NaturalHistogram_Sg__pop(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::NaturalHistogramVector.push

  call-seq:
    push(e) -> value_type

Add an element at the end of the NaturalHistogramVector.
*/
SWIGINTERN VALUE
_wrap_NaturalHistogramVector_push(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::NaturalHistogram > *arg1 = (std::vector< si_taxi::NaturalHistogram > *) 0 ;
  std::vector< si_taxi::NaturalHistogram >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< si_taxi::NaturalHistogram >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram > *","push", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::NaturalHistogram > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_si_taxi__NaturalHistogram,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram >::value_type const &","push", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< si_taxi::NaturalHistogram >::value_type const &","push", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< si_taxi::NaturalHistogram >::value_type * >(argp2);
  {
    try {
      result = std_vector_Sl_si_taxi_NaturalHistogram_Sg__push(arg1,(si_taxi::NaturalHistogram const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new std::vector< si_taxi::NaturalHistogram >::value_type(static_cast< const std::vector< si_taxi::NaturalHistogram >::value_type& >(result))), SWIGTYPE_p_si_taxi__NaturalHistogram, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::NaturalHistogramVector.reject

  call-seq:
    reject -> NaturalHistogramVector

Iterate thru each element in the NaturalHistogramVector and reject those that fail a condition returning a new NaturalHistogramVector.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_NaturalHistogramVector_reject(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::NaturalHistogram > *arg1 = (std::vector< si_taxi::NaturalHistogram > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram > *","reject", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::NaturalHistogram > * >(argp1);
  {
    try {
      result = (std::vector< si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > > *)std_vector_Sl_si_taxi_NaturalHistogram_Sg__reject(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::NaturalHistogramVector.at

  call-seq:
    at(i) -> VALUE

Return element at a certain index.
*/
SWIGINTERN VALUE
_wrap_NaturalHistogramVector_at(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::NaturalHistogram > *arg1 = (std::vector< si_taxi::NaturalHistogram > *) 0 ;
  std::vector< si_taxi::NaturalHistogram >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram > const *","at", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::NaturalHistogram > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram >::difference_type","at", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< si_taxi::NaturalHistogram >::difference_type >(val2);
  {
    try {
      result = (VALUE)std_vector_Sl_si_taxi_NaturalHistogram_Sg__at((std::vector< si_taxi::NaturalHistogram > const *)arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::NaturalHistogramVector.[]

  call-seq:
    [](i, j) -> VALUE
    [](i) -> VALUE
    [](i) -> VALUE

Element accessor/slicing.
*/
SWIGINTERN VALUE
_wrap_NaturalHistogramVector___getitem____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::NaturalHistogram > *arg1 = (std::vector< si_taxi::NaturalHistogram > *) 0 ;
  std::vector< si_taxi::NaturalHistogram >::difference_type arg2 ;
  std::vector< si_taxi::NaturalHistogram >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::NaturalHistogram > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram >::difference_type","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< si_taxi::NaturalHistogram >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram >::difference_type","__getitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< si_taxi::NaturalHistogram >::difference_type >(val3);
  {
    try {
      result = (VALUE)std_vector_Sl_si_taxi_NaturalHistogram_Sg____getitem____SWIG_0((std::vector< si_taxi::NaturalHistogram > const *)arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NaturalHistogramVector___getitem____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::NaturalHistogram > *arg1 = (std::vector< si_taxi::NaturalHistogram > *) 0 ;
  std::vector< si_taxi::NaturalHistogram >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::NaturalHistogram > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram >::difference_type","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< si_taxi::NaturalHistogram >::difference_type >(val2);
  {
    try {
      result = (VALUE)std_vector_Sl_si_taxi_NaturalHistogram_Sg____getitem____SWIG_1((std::vector< si_taxi::NaturalHistogram > const *)arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NaturalHistogramVector___getitem____SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::NaturalHistogram > *arg1 = (std::vector< si_taxi::NaturalHistogram > *) 0 ;
  VALUE arg2 = (VALUE) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::NaturalHistogram > * >(argp1);
  arg2 = argv[0];
  {
    try {
      result = (VALUE)std_vector_Sl_si_taxi_NaturalHistogram_Sg____getitem____SWIG_2((std::vector< si_taxi::NaturalHistogram > const *)arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_NaturalHistogramVector___getitem__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_NaturalHistogramVector___getitem____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_NaturalHistogramVector___getitem____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_NaturalHistogramVector___getitem____SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "__getitem__", 
    "    VALUE __getitem__(std::vector< si_taxi::NaturalHistogram >::difference_type i, std::vector< si_taxi::NaturalHistogram >::difference_type j)\n"
    "    VALUE __getitem__(std::vector< si_taxi::NaturalHistogram >::difference_type i)\n"
    "    VALUE __getitem__(VALUE i)\n");
  
  return Qnil;
}



/*
  Document-method: SiTaxi::NaturalHistogramVector.[]=

  call-seq:
    []=(i, x) -> VALUE
    []=(i, j, v) -> VALUE

Element setter/slicing.
*/
SWIGINTERN VALUE
_wrap_NaturalHistogramVector___setitem____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::NaturalHistogram > *arg1 = (std::vector< si_taxi::NaturalHistogram > *) 0 ;
  std::vector< si_taxi::NaturalHistogram >::difference_type arg2 ;
  std::vector< si_taxi::NaturalHistogram >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram > *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::NaturalHistogram > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram >::difference_type","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< si_taxi::NaturalHistogram >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_si_taxi__NaturalHistogram,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram >::value_type const &","__setitem__", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< si_taxi::NaturalHistogram >::value_type const &","__setitem__", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< si_taxi::NaturalHistogram >::value_type * >(argp3);
  {
    try {
      result = (VALUE)std_vector_Sl_si_taxi_NaturalHistogram_Sg____setitem____SWIG_0(arg1,arg2,(si_taxi::NaturalHistogram const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NaturalHistogramVector___setitem____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::NaturalHistogram > *arg1 = (std::vector< si_taxi::NaturalHistogram > *) 0 ;
  std::vector< si_taxi::NaturalHistogram >::difference_type arg2 ;
  std::vector< si_taxi::NaturalHistogram >::difference_type arg3 ;
  std::vector< si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram > *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::NaturalHistogram > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram >::difference_type","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< si_taxi::NaturalHistogram >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram >::difference_type","__setitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< si_taxi::NaturalHistogram >::difference_type >(val3);
  {
    std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > > *ptr = (std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > > *)0;
    res4 = swig::asptr(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > > const &","__setitem__", 4, argv[2] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > > const &","__setitem__", 4, argv[2])); 
    }
    arg4 = ptr;
  }
  {
    try {
      try {
        result = (VALUE)std_vector_Sl_si_taxi_NaturalHistogram_Sg____setitem____SWIG_1(arg1,arg2,arg3,(std::vector< si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > > const &)*arg4);
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return vresult;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
}


SWIGINTERN VALUE _wrap_NaturalHistogramVector___setitem__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_si_taxi__NaturalHistogram, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_NaturalHistogramVector___setitem____SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_NaturalHistogramVector___setitem____SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "__setitem__", 
    "    VALUE __setitem__(std::vector< si_taxi::NaturalHistogram >::difference_type i, std::vector< si_taxi::NaturalHistogram >::value_type const &x)\n"
    "    VALUE __setitem__(std::vector< si_taxi::NaturalHistogram >::difference_type i, std::vector< si_taxi::NaturalHistogram >::difference_type j, std::vector< si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > > const &v)\n");
  
  return Qnil;
}



/*
  Document-method: SiTaxi::NaturalHistogramVector.shift

  call-seq:
    shift -> VALUE

Remove and return element at the beginning of the NaturalHistogramVector.
*/
SWIGINTERN VALUE
_wrap_NaturalHistogramVector_shift(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::NaturalHistogram > *arg1 = (std::vector< si_taxi::NaturalHistogram > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram > *","shift", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::NaturalHistogram > * >(argp1);
  {
    try {
      result = (VALUE)std_vector_Sl_si_taxi_NaturalHistogram_Sg__shift(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::NaturalHistogramVector.insert

  call-seq:
    insert(pos, argc, ?) -> NaturalHistogramVector
    insert(pos, x) -> iterator
    insert(pos, n, x)

Insert one or more new elements in the NaturalHistogramVector.
*/
SWIGINTERN VALUE
_wrap_NaturalHistogramVector_insert__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::NaturalHistogram > *arg1 = (std::vector< si_taxi::NaturalHistogram > *) 0 ;
  std::vector< si_taxi::NaturalHistogram >::difference_type arg2 ;
  int arg3 ;
  VALUE *arg4 = (VALUE *) 0 ;
  void *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if (argc < 2) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::NaturalHistogram > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram >::difference_type","insert", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< si_taxi::NaturalHistogram >::difference_type >(val2);
  {
    arg3 = argc - 1;
    arg4 = argv + 1;
  }
  {
    try {
      result = (std::vector< si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > > *)std_vector_Sl_si_taxi_NaturalHistogram_Sg__insert__SWIG_0(arg1,arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::NaturalHistogramVector.unshift

  call-seq:
    unshift(argc, ?) -> NaturalHistogramVector

Add one or more elements at the beginning of the NaturalHistogramVector.
*/
SWIGINTERN VALUE
_wrap_NaturalHistogramVector_unshift(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::NaturalHistogram > *arg1 = (std::vector< si_taxi::NaturalHistogram > *) 0 ;
  int arg2 ;
  VALUE *arg3 = (VALUE *) 0 ;
  void *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if (argc < 1) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram > *","unshift", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::NaturalHistogram > * >(argp1);
  {
    arg2 = argc;
    arg3 = argv;
  }
  {
    try {
      result = (std::vector< si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > > *)std_vector_Sl_si_taxi_NaturalHistogram_Sg__unshift(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_NaturalHistogramVector__SWIG_0(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "SiTaxi::NaturalHistogramVector";
  std::vector< si_taxi::NaturalHistogram > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (std::vector< si_taxi::NaturalHistogram > *)new std::vector< si_taxi::NaturalHistogram >();
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_NaturalHistogramVector__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::NaturalHistogram > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  const char *classname SWIGUNUSED = "SiTaxi::NaturalHistogramVector";
  std::vector< si_taxi::NaturalHistogram > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > > *ptr = (std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > > *)0;
    res1 = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram > const &","std::vector<(si_taxi::NaturalHistogram)>", 1, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< si_taxi::NaturalHistogram > const &","std::vector<(si_taxi::NaturalHistogram)>", 1, argv[0])); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< si_taxi::NaturalHistogram > *)new std::vector< si_taxi::NaturalHistogram >((std::vector< si_taxi::NaturalHistogram > const &)*arg1);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return self;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return Qnil;
}



/*
  Document-method: SiTaxi::NaturalHistogramVector.empty?

  call-seq:
    empty? -> bool

Check if the NaturalHistogramVector is empty or not.
*/
SWIGINTERN VALUE
_wrap_NaturalHistogramVector_emptyq___(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::NaturalHistogram > *arg1 = (std::vector< si_taxi::NaturalHistogram > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram > const *","empty", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::NaturalHistogram > * >(argp1);
  {
    try {
      result = (bool)((std::vector< si_taxi::NaturalHistogram > const *)arg1)->empty();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::NaturalHistogramVector.size

  call-seq:
    size -> size_type

Size or Length of the NaturalHistogramVector.
*/
SWIGINTERN VALUE
_wrap_NaturalHistogramVector_size(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::NaturalHistogram > *arg1 = (std::vector< si_taxi::NaturalHistogram > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::NaturalHistogram >::size_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram > const *","size", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::NaturalHistogram > * >(argp1);
  {
    try {
      result = ((std::vector< si_taxi::NaturalHistogram > const *)arg1)->size();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::NaturalHistogramVector.clear

  call-seq:
    clear

Clear NaturalHistogramVector contents.
*/
SWIGINTERN VALUE
_wrap_NaturalHistogramVector_clear(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::NaturalHistogram > *arg1 = (std::vector< si_taxi::NaturalHistogram > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram > *","clear", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::NaturalHistogram > * >(argp1);
  {
    try {
      (arg1)->clear();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NaturalHistogramVector_swap(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::NaturalHistogram > *arg1 = (std::vector< si_taxi::NaturalHistogram > *) 0 ;
  std::vector< si_taxi::NaturalHistogram > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram > *","swap", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::NaturalHistogram > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram > &","swap", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< si_taxi::NaturalHistogram > &","swap", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< si_taxi::NaturalHistogram > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NaturalHistogramVector_get_allocator(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::NaturalHistogram > *arg1 = (std::vector< si_taxi::NaturalHistogram > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::allocator< si_taxi::NaturalHistogram > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram > const *","get_allocator", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::NaturalHistogram > * >(argp1);
  {
    try {
      result = ((std::vector< si_taxi::NaturalHistogram > const *)arg1)->get_allocator();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new std::vector< si_taxi::NaturalHistogram >::allocator_type(static_cast< const std::vector< si_taxi::NaturalHistogram >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_si_taxi__NaturalHistogram_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::NaturalHistogramVector.begin

  call-seq:
    begin -> iterator

Return an iterator to the beginning of the NaturalHistogramVector.
*/
SWIGINTERN VALUE
_wrap_NaturalHistogramVector_begin(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::NaturalHistogram > *arg1 = (std::vector< si_taxi::NaturalHistogram > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::NaturalHistogram >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram > *","begin", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::NaturalHistogram > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< si_taxi::NaturalHistogram >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::NaturalHistogramVector.end

  call-seq:
    end -> iterator

Return an iterator to past the end of the NaturalHistogramVector.
*/
SWIGINTERN VALUE
_wrap_NaturalHistogramVector_end(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::NaturalHistogram > *arg1 = (std::vector< si_taxi::NaturalHistogram > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::NaturalHistogram >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram > *","end", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::NaturalHistogram > * >(argp1);
  {
    try {
      result = (arg1)->end();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< si_taxi::NaturalHistogram >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::NaturalHistogramVector.rbegin

  call-seq:
    rbegin -> reverse_iterator

Return a reverse iterator to the beginning (the end) of the NaturalHistogramVector.
*/
SWIGINTERN VALUE
_wrap_NaturalHistogramVector_rbegin(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::NaturalHistogram > *arg1 = (std::vector< si_taxi::NaturalHistogram > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::NaturalHistogram >::reverse_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram > *","rbegin", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::NaturalHistogram > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< si_taxi::NaturalHistogram >::reverse_iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::NaturalHistogramVector.rend

  call-seq:
    rend -> reverse_iterator

Return a reverse iterator to past the end (past the beginning) of the NaturalHistogramVector.
*/
SWIGINTERN VALUE
_wrap_NaturalHistogramVector_rend(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::NaturalHistogram > *arg1 = (std::vector< si_taxi::NaturalHistogram > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::NaturalHistogram >::reverse_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram > *","rend", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::NaturalHistogram > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< si_taxi::NaturalHistogram >::reverse_iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_NaturalHistogramVector__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::NaturalHistogram >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  const char *classname SWIGUNUSED = "SiTaxi::NaturalHistogramVector";
  std::vector< si_taxi::NaturalHistogram > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram >::size_type","std::vector<(si_taxi::NaturalHistogram)>", 1, argv[0] ));
  } 
  arg1 = static_cast< std::vector< si_taxi::NaturalHistogram >::size_type >(val1);
  {
    try {
      result = (std::vector< si_taxi::NaturalHistogram > *)new std::vector< si_taxi::NaturalHistogram >(arg1);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::NaturalHistogramVector.resize

  call-seq:
    resize(new_size)
    resize(new_size, x)

Resize the size of the NaturalHistogramVector.
*/
SWIGINTERN VALUE
_wrap_NaturalHistogramVector_resize__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::NaturalHistogram > *arg1 = (std::vector< si_taxi::NaturalHistogram > *) 0 ;
  std::vector< si_taxi::NaturalHistogram >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::NaturalHistogram > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram >::size_type","resize", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< si_taxi::NaturalHistogram >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::NaturalHistogramVector.erase

  call-seq:
    erase(pos) -> iterator
    erase(first, last) -> iterator

Delete a portion of the NaturalHistogramVector.
*/
SWIGINTERN VALUE
_wrap_NaturalHistogramVector_erase__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::NaturalHistogram > *arg1 = (std::vector< si_taxi::NaturalHistogram > *) 0 ;
  std::vector< si_taxi::NaturalHistogram >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  std::vector< si_taxi::NaturalHistogram >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram > *","erase", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::NaturalHistogram > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram >::iterator","erase", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< si_taxi::NaturalHistogram >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< si_taxi::NaturalHistogram >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram >::iterator","erase", 2, argv[0] ));
    }
  }
  {
    try {
      result = (arg1)->erase(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< si_taxi::NaturalHistogram >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NaturalHistogramVector_erase__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::NaturalHistogram > *arg1 = (std::vector< si_taxi::NaturalHistogram > *) 0 ;
  std::vector< si_taxi::NaturalHistogram >::iterator arg2 ;
  std::vector< si_taxi::NaturalHistogram >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  swig::Iterator *iter3 = 0 ;
  int res3 ;
  std::vector< si_taxi::NaturalHistogram >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram > *","erase", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::NaturalHistogram > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram >::iterator","erase", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< si_taxi::NaturalHistogram >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< si_taxi::NaturalHistogram >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram >::iterator","erase", 2, argv[0] ));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter3), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram >::iterator","erase", 3, argv[1] ));
  } else {
    swig::Iterator_T<std::vector< si_taxi::NaturalHistogram >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< si_taxi::NaturalHistogram >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram >::iterator","erase", 3, argv[1] ));
    }
  }
  {
    try {
      result = (arg1)->erase(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< si_taxi::NaturalHistogram >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_NaturalHistogramVector_erase(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< si_taxi::NaturalHistogram >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_NaturalHistogramVector_erase__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< si_taxi::NaturalHistogram >::iterator > *>(iter) != 0));
      if (_v) {
        swig::ConstIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), 
          swig::Iterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< si_taxi::NaturalHistogram >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_NaturalHistogramVector_erase__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "NaturalHistogramVector.erase", 
    "    std::vector< si_taxi::NaturalHistogram >::iterator NaturalHistogramVector.erase(std::vector< si_taxi::NaturalHistogram >::iterator pos)\n"
    "    std::vector< si_taxi::NaturalHistogram >::iterator NaturalHistogramVector.erase(std::vector< si_taxi::NaturalHistogram >::iterator first, std::vector< si_taxi::NaturalHistogram >::iterator last)\n");
  
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_NaturalHistogramVector_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_NaturalHistogramVector_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_NaturalHistogramVector__SWIG_3(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::NaturalHistogram >::size_type arg1 ;
  std::vector< si_taxi::NaturalHistogram >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  const char *classname SWIGUNUSED = "SiTaxi::NaturalHistogramVector";
  std::vector< si_taxi::NaturalHistogram > *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram >::size_type","std::vector<(si_taxi::NaturalHistogram)>", 1, argv[0] ));
  } 
  arg1 = static_cast< std::vector< si_taxi::NaturalHistogram >::size_type >(val1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_si_taxi__NaturalHistogram,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram >::value_type const &","std::vector<(si_taxi::NaturalHistogram)>", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< si_taxi::NaturalHistogram >::value_type const &","std::vector<(si_taxi::NaturalHistogram)>", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< std::vector< si_taxi::NaturalHistogram >::value_type * >(argp2);
  {
    try {
      result = (std::vector< si_taxi::NaturalHistogram > *)new std::vector< si_taxi::NaturalHistogram >(arg1,(std::vector< si_taxi::NaturalHistogram >::value_type const &)*arg2);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_NaturalHistogramVector(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_NaturalHistogramVector__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_NaturalHistogramVector__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_NaturalHistogramVector__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_si_taxi__NaturalHistogram, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_NaturalHistogramVector__SWIG_3(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "NaturalHistogramVector.new", 
    "    NaturalHistogramVector.new()\n"
    "    NaturalHistogramVector.new(std::vector< si_taxi::NaturalHistogram > const &)\n"
    "    NaturalHistogramVector.new(std::vector< si_taxi::NaturalHistogram >::size_type size)\n"
    "    NaturalHistogramVector.new(std::vector< si_taxi::NaturalHistogram >::size_type size, std::vector< si_taxi::NaturalHistogram >::value_type const &value)\n");
  
  return Qnil;
}



/*
  Document-method: SiTaxi::NaturalHistogramVector.front

  call-seq:
    front -> value_type

Return the first element in NaturalHistogramVector.
*/
SWIGINTERN VALUE
_wrap_NaturalHistogramVector_front(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::NaturalHistogram > *arg1 = (std::vector< si_taxi::NaturalHistogram > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::NaturalHistogram >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram > const *","front", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::NaturalHistogram > * >(argp1);
  {
    try {
      result = (std::vector< si_taxi::NaturalHistogram >::value_type *) &((std::vector< si_taxi::NaturalHistogram > const *)arg1)->front();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_si_taxi__NaturalHistogram, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::NaturalHistogramVector.back

  call-seq:
    back -> value_type

Return the last element in NaturalHistogramVector.
*/
SWIGINTERN VALUE
_wrap_NaturalHistogramVector_back(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::NaturalHistogram > *arg1 = (std::vector< si_taxi::NaturalHistogram > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::NaturalHistogram >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram > const *","back", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::NaturalHistogram > * >(argp1);
  {
    try {
      result = (std::vector< si_taxi::NaturalHistogram >::value_type *) &((std::vector< si_taxi::NaturalHistogram > const *)arg1)->back();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_si_taxi__NaturalHistogram, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::NaturalHistogramVector.assign

  call-seq:
    assign(n, x)

Assign a new NaturalHistogramVector or portion of it.
*/
SWIGINTERN VALUE
_wrap_NaturalHistogramVector_assign(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::NaturalHistogram > *arg1 = (std::vector< si_taxi::NaturalHistogram > *) 0 ;
  std::vector< si_taxi::NaturalHistogram >::size_type arg2 ;
  std::vector< si_taxi::NaturalHistogram >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram > *","assign", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::NaturalHistogram > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram >::size_type","assign", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< si_taxi::NaturalHistogram >::size_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_si_taxi__NaturalHistogram,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram >::value_type const &","assign", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< si_taxi::NaturalHistogram >::value_type const &","assign", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< si_taxi::NaturalHistogram >::value_type * >(argp3);
  {
    try {
      (arg1)->assign(arg2,(std::vector< si_taxi::NaturalHistogram >::value_type const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::NaturalHistogramVector.resize

  call-seq:
    resize(new_size)
    resize(new_size, x)

Resize the size of the NaturalHistogramVector.
*/
SWIGINTERN VALUE
_wrap_NaturalHistogramVector_resize__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::NaturalHistogram > *arg1 = (std::vector< si_taxi::NaturalHistogram > *) 0 ;
  std::vector< si_taxi::NaturalHistogram >::size_type arg2 ;
  std::vector< si_taxi::NaturalHistogram >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::NaturalHistogram > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram >::size_type","resize", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< si_taxi::NaturalHistogram >::size_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_si_taxi__NaturalHistogram,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram >::value_type const &","resize", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< si_taxi::NaturalHistogram >::value_type const &","resize", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< si_taxi::NaturalHistogram >::value_type * >(argp3);
  {
    try {
      (arg1)->resize(arg2,(std::vector< si_taxi::NaturalHistogram >::value_type const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_NaturalHistogramVector_resize(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_NaturalHistogramVector_resize__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_si_taxi__NaturalHistogram, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_NaturalHistogramVector_resize__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "NaturalHistogramVector.resize", 
    "    void NaturalHistogramVector.resize(std::vector< si_taxi::NaturalHistogram >::size_type new_size)\n"
    "    void NaturalHistogramVector.resize(std::vector< si_taxi::NaturalHistogram >::size_type new_size, std::vector< si_taxi::NaturalHistogram >::value_type const &x)\n");
  
  return Qnil;
}



/*
  Document-method: SiTaxi::NaturalHistogramVector.insert

  call-seq:
    insert(pos, argc, ?) -> NaturalHistogramVector
    insert(pos, x) -> iterator
    insert(pos, n, x)

Insert one or more new elements in the NaturalHistogramVector.
*/
SWIGINTERN VALUE
_wrap_NaturalHistogramVector_insert__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::NaturalHistogram > *arg1 = (std::vector< si_taxi::NaturalHistogram > *) 0 ;
  std::vector< si_taxi::NaturalHistogram >::iterator arg2 ;
  std::vector< si_taxi::NaturalHistogram >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< si_taxi::NaturalHistogram >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::NaturalHistogram > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram >::iterator","insert", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< si_taxi::NaturalHistogram >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< si_taxi::NaturalHistogram >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram >::iterator","insert", 2, argv[0] ));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_si_taxi__NaturalHistogram,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram >::value_type const &","insert", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< si_taxi::NaturalHistogram >::value_type const &","insert", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< si_taxi::NaturalHistogram >::value_type * >(argp3);
  {
    try {
      result = (arg1)->insert(arg2,(std::vector< si_taxi::NaturalHistogram >::value_type const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< si_taxi::NaturalHistogram >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NaturalHistogramVector_insert__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::NaturalHistogram > *arg1 = (std::vector< si_taxi::NaturalHistogram > *) 0 ;
  std::vector< si_taxi::NaturalHistogram >::iterator arg2 ;
  std::vector< si_taxi::NaturalHistogram >::size_type arg3 ;
  std::vector< si_taxi::NaturalHistogram >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::NaturalHistogram > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram >::iterator","insert", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< si_taxi::NaturalHistogram >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< si_taxi::NaturalHistogram >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram >::iterator","insert", 2, argv[0] ));
    }
  }
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram >::size_type","insert", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< si_taxi::NaturalHistogram >::size_type >(val3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_si_taxi__NaturalHistogram,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram >::value_type const &","insert", 4, argv[2] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< si_taxi::NaturalHistogram >::value_type const &","insert", 4, argv[2])); 
  }
  arg4 = reinterpret_cast< std::vector< si_taxi::NaturalHistogram >::value_type * >(argp4);
  {
    try {
      (arg1)->insert(arg2,arg3,(std::vector< si_taxi::NaturalHistogram >::value_type const &)*arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_NaturalHistogramVector_insert(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< si_taxi::NaturalHistogram >::iterator > *>(iter) != 0));
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_si_taxi__NaturalHistogram, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_NaturalHistogramVector_insert__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_NaturalHistogramVector_insert__SWIG_0(nargs, args, self);
          }
          return _wrap_NaturalHistogramVector_insert__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< si_taxi::NaturalHistogram >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_si_taxi__NaturalHistogram, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_NaturalHistogramVector_insert__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "insert", 
    "    void insert(std::vector< si_taxi::NaturalHistogram >::difference_type pos, int argc, VALUE *argv, ...)\n"
    "    void insert(std::vector< si_taxi::NaturalHistogram >::iterator pos, std::vector< si_taxi::NaturalHistogram >::value_type const &x)\n"
    "    void insert(std::vector< si_taxi::NaturalHistogram >::iterator pos, std::vector< si_taxi::NaturalHistogram >::size_type n, std::vector< si_taxi::NaturalHistogram >::value_type const &x)\n");
  
  return Qnil;
}



/*
  Document-method: SiTaxi::NaturalHistogramVector.reserve

  call-seq:
    reserve(n)

Reserve memory in the NaturalHistogramVector for a number of elements.
*/
SWIGINTERN VALUE
_wrap_NaturalHistogramVector_reserve(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::NaturalHistogram > *arg1 = (std::vector< si_taxi::NaturalHistogram > *) 0 ;
  std::vector< si_taxi::NaturalHistogram >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram > *","reserve", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::NaturalHistogram > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram >::size_type","reserve", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< si_taxi::NaturalHistogram >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::NaturalHistogramVector.capacity

  call-seq:
    capacity -> size_type

Reserved capacity of the NaturalHistogramVector.
*/
SWIGINTERN VALUE
_wrap_NaturalHistogramVector_capacity(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::NaturalHistogram > *arg1 = (std::vector< si_taxi::NaturalHistogram > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::NaturalHistogram >::size_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram > const *","capacity", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::NaturalHistogram > * >(argp1);
  {
    try {
      result = ((std::vector< si_taxi::NaturalHistogram > const *)arg1)->capacity();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_std_vector_Sl_si_taxi_NaturalHistogram_Sg_(std::vector< si_taxi::NaturalHistogram > *arg1) {
    delete arg1;
}

swig_class SwigClassBWVehicleVector;


/*
  Document-method: SiTaxi::BWVehicleVector.dup

  call-seq:
    dup -> BWVehicleVector

Create a duplicate of the class and unfreeze it if needed.
*/
SWIGINTERN VALUE
_wrap_BWVehicleVector_dup(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWVehicle > *arg1 = (std::vector< si_taxi::BWVehicle > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle > *","dup", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWVehicle > * >(argp1);
  {
    try {
      result = (std::vector< si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > > *)std_vector_Sl_si_taxi_BWVehicle_Sg__dup(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWVehicleVector.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_BWVehicleVector_inspect(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWVehicle > *arg1 = (std::vector< si_taxi::BWVehicle > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle > *","inspect", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWVehicle > * >(argp1);
  {
    try {
      result = (VALUE)std_vector_Sl_si_taxi_BWVehicle_Sg__inspect(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWVehicleVector.to_a

  call-seq:
    to_a -> VALUE

Convert BWVehicleVector to an Array.
*/
SWIGINTERN VALUE
_wrap_BWVehicleVector_to_a(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWVehicle > *arg1 = (std::vector< si_taxi::BWVehicle > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle > *","to_a", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWVehicle > * >(argp1);
  {
    try {
      result = (VALUE)std_vector_Sl_si_taxi_BWVehicle_Sg__to_a(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWVehicleVector.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_BWVehicleVector_to_s(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWVehicle > *arg1 = (std::vector< si_taxi::BWVehicle > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle > *","to_s", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWVehicle > * >(argp1);
  {
    try {
      result = (VALUE)std_vector_Sl_si_taxi_BWVehicle_Sg__to_s(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWVehicleVector.slice

  call-seq:
    slice(i, j) -> VALUE

Return a slice (portion of) the BWVehicleVector.
*/
SWIGINTERN VALUE
_wrap_BWVehicleVector_slice(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWVehicle > *arg1 = (std::vector< si_taxi::BWVehicle > *) 0 ;
  std::vector< si_taxi::BWVehicle >::difference_type arg2 ;
  std::vector< si_taxi::BWVehicle >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle > *","slice", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWVehicle > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle >::difference_type","slice", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< si_taxi::BWVehicle >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle >::difference_type","slice", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< si_taxi::BWVehicle >::difference_type >(val3);
  {
    try {
      result = (VALUE)std_vector_Sl_si_taxi_BWVehicle_Sg__slice(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWVehicleVector.each

  call-seq:
    each -> BWVehicleVector

Iterate thru each element in the BWVehicleVector.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_BWVehicleVector_each(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWVehicle > *arg1 = (std::vector< si_taxi::BWVehicle > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle > *","each", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWVehicle > * >(argp1);
  {
    try {
      result = (std::vector< si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > > *)std_vector_Sl_si_taxi_BWVehicle_Sg__each(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWVehicleVector.select

  call-seq:
    select -> BWVehicleVector

Iterate thru each element in the BWVehicleVector and select those that match a condition.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_BWVehicleVector_select(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWVehicle > *arg1 = (std::vector< si_taxi::BWVehicle > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle > *","select", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWVehicle > * >(argp1);
  {
    try {
      result = (std::vector< si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > > *)std_vector_Sl_si_taxi_BWVehicle_Sg__select(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWVehicleVector.reject!

  call-seq:
    reject! -> BWVehicleVector

Iterate thru each element in the BWVehicleVector and reject those that fail a condition.  A block must be provided.  BWVehicleVector is modified in place.
*/
SWIGINTERN VALUE
_wrap_BWVehicleVector_rejectN___(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWVehicle > *arg1 = (std::vector< si_taxi::BWVehicle > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle > *","reject_bang", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWVehicle > * >(argp1);
  {
    try {
      result = (std::vector< si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > > *)std_vector_Sl_si_taxi_BWVehicle_Sg__reject_bang(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWVehicleVector.delete_at

  call-seq:
    delete_at(i) -> VALUE

Delete an element at a certain index.
*/
SWIGINTERN VALUE
_wrap_BWVehicleVector_delete_at(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWVehicle > *arg1 = (std::vector< si_taxi::BWVehicle > *) 0 ;
  std::vector< si_taxi::BWVehicle >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle > *","delete_at", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWVehicle > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle >::difference_type","delete_at", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< si_taxi::BWVehicle >::difference_type >(val2);
  {
    try {
      result = (VALUE)std_vector_Sl_si_taxi_BWVehicle_Sg__delete_at(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWVehicleVector___delete2__(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWVehicle > *arg1 = (std::vector< si_taxi::BWVehicle > *) 0 ;
  std::vector< si_taxi::BWVehicle >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle > *","__delete2__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWVehicle > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_si_taxi__BWVehicle,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle >::value_type const &","__delete2__", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< si_taxi::BWVehicle >::value_type const &","__delete2__", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< si_taxi::BWVehicle >::value_type * >(argp2);
  {
    try {
      result = (VALUE)std_vector_Sl_si_taxi_BWVehicle_Sg____delete2__(arg1,(si_taxi::BWVehicle const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWVehicleVector.pop

  call-seq:
    pop -> VALUE

Remove and return element at the end of the BWVehicleVector.
*/
SWIGINTERN VALUE
_wrap_BWVehicleVector_pop(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWVehicle > *arg1 = (std::vector< si_taxi::BWVehicle > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle > *","pop", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWVehicle > * >(argp1);
  {
    try {
      result = (VALUE)std_vector_Sl_si_taxi_BWVehicle_Sg__pop(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWVehicleVector.push

  call-seq:
    push(e) -> value_type

Add an element at the end of the BWVehicleVector.
*/
SWIGINTERN VALUE
_wrap_BWVehicleVector_push(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWVehicle > *arg1 = (std::vector< si_taxi::BWVehicle > *) 0 ;
  std::vector< si_taxi::BWVehicle >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< si_taxi::BWVehicle >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle > *","push", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWVehicle > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_si_taxi__BWVehicle,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle >::value_type const &","push", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< si_taxi::BWVehicle >::value_type const &","push", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< si_taxi::BWVehicle >::value_type * >(argp2);
  {
    try {
      result = std_vector_Sl_si_taxi_BWVehicle_Sg__push(arg1,(si_taxi::BWVehicle const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new std::vector< si_taxi::BWVehicle >::value_type(static_cast< const std::vector< si_taxi::BWVehicle >::value_type& >(result))), SWIGTYPE_p_si_taxi__BWVehicle, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWVehicleVector.reject

  call-seq:
    reject -> BWVehicleVector

Iterate thru each element in the BWVehicleVector and reject those that fail a condition returning a new BWVehicleVector.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_BWVehicleVector_reject(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWVehicle > *arg1 = (std::vector< si_taxi::BWVehicle > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle > *","reject", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWVehicle > * >(argp1);
  {
    try {
      result = (std::vector< si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > > *)std_vector_Sl_si_taxi_BWVehicle_Sg__reject(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWVehicleVector.at

  call-seq:
    at(i) -> VALUE

Return element at a certain index.
*/
SWIGINTERN VALUE
_wrap_BWVehicleVector_at(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWVehicle > *arg1 = (std::vector< si_taxi::BWVehicle > *) 0 ;
  std::vector< si_taxi::BWVehicle >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle > const *","at", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWVehicle > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle >::difference_type","at", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< si_taxi::BWVehicle >::difference_type >(val2);
  {
    try {
      result = (VALUE)std_vector_Sl_si_taxi_BWVehicle_Sg__at((std::vector< si_taxi::BWVehicle > const *)arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWVehicleVector.[]

  call-seq:
    [](i, j) -> VALUE
    [](i) -> VALUE
    [](i) -> VALUE

Element accessor/slicing.
*/
SWIGINTERN VALUE
_wrap_BWVehicleVector___getitem____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWVehicle > *arg1 = (std::vector< si_taxi::BWVehicle > *) 0 ;
  std::vector< si_taxi::BWVehicle >::difference_type arg2 ;
  std::vector< si_taxi::BWVehicle >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWVehicle > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle >::difference_type","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< si_taxi::BWVehicle >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle >::difference_type","__getitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< si_taxi::BWVehicle >::difference_type >(val3);
  {
    try {
      result = (VALUE)std_vector_Sl_si_taxi_BWVehicle_Sg____getitem____SWIG_0((std::vector< si_taxi::BWVehicle > const *)arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWVehicleVector___getitem____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWVehicle > *arg1 = (std::vector< si_taxi::BWVehicle > *) 0 ;
  std::vector< si_taxi::BWVehicle >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWVehicle > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle >::difference_type","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< si_taxi::BWVehicle >::difference_type >(val2);
  {
    try {
      result = (VALUE)std_vector_Sl_si_taxi_BWVehicle_Sg____getitem____SWIG_1((std::vector< si_taxi::BWVehicle > const *)arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWVehicleVector___getitem____SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWVehicle > *arg1 = (std::vector< si_taxi::BWVehicle > *) 0 ;
  VALUE arg2 = (VALUE) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWVehicle > * >(argp1);
  arg2 = argv[0];
  {
    try {
      result = (VALUE)std_vector_Sl_si_taxi_BWVehicle_Sg____getitem____SWIG_2((std::vector< si_taxi::BWVehicle > const *)arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_BWVehicleVector___getitem__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BWVehicleVector___getitem____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_BWVehicleVector___getitem____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BWVehicleVector___getitem____SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "__getitem__", 
    "    VALUE __getitem__(std::vector< si_taxi::BWVehicle >::difference_type i, std::vector< si_taxi::BWVehicle >::difference_type j)\n"
    "    VALUE __getitem__(std::vector< si_taxi::BWVehicle >::difference_type i)\n"
    "    VALUE __getitem__(VALUE i)\n");
  
  return Qnil;
}



/*
  Document-method: SiTaxi::BWVehicleVector.[]=

  call-seq:
    []=(i, x) -> VALUE
    []=(i, j, v) -> VALUE

Element setter/slicing.
*/
SWIGINTERN VALUE
_wrap_BWVehicleVector___setitem____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWVehicle > *arg1 = (std::vector< si_taxi::BWVehicle > *) 0 ;
  std::vector< si_taxi::BWVehicle >::difference_type arg2 ;
  std::vector< si_taxi::BWVehicle >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle > *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWVehicle > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle >::difference_type","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< si_taxi::BWVehicle >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_si_taxi__BWVehicle,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle >::value_type const &","__setitem__", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< si_taxi::BWVehicle >::value_type const &","__setitem__", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< si_taxi::BWVehicle >::value_type * >(argp3);
  {
    try {
      result = (VALUE)std_vector_Sl_si_taxi_BWVehicle_Sg____setitem____SWIG_0(arg1,arg2,(si_taxi::BWVehicle const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWVehicleVector___setitem____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWVehicle > *arg1 = (std::vector< si_taxi::BWVehicle > *) 0 ;
  std::vector< si_taxi::BWVehicle >::difference_type arg2 ;
  std::vector< si_taxi::BWVehicle >::difference_type arg3 ;
  std::vector< si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle > *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWVehicle > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle >::difference_type","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< si_taxi::BWVehicle >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle >::difference_type","__setitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< si_taxi::BWVehicle >::difference_type >(val3);
  {
    std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > > *ptr = (std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > > *)0;
    res4 = swig::asptr(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > > const &","__setitem__", 4, argv[2] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > > const &","__setitem__", 4, argv[2])); 
    }
    arg4 = ptr;
  }
  {
    try {
      try {
        result = (VALUE)std_vector_Sl_si_taxi_BWVehicle_Sg____setitem____SWIG_1(arg1,arg2,arg3,(std::vector< si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > > const &)*arg4);
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return vresult;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
}


SWIGINTERN VALUE _wrap_BWVehicleVector___setitem__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_si_taxi__BWVehicle, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BWVehicleVector___setitem____SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_BWVehicleVector___setitem____SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "__setitem__", 
    "    VALUE __setitem__(std::vector< si_taxi::BWVehicle >::difference_type i, std::vector< si_taxi::BWVehicle >::value_type const &x)\n"
    "    VALUE __setitem__(std::vector< si_taxi::BWVehicle >::difference_type i, std::vector< si_taxi::BWVehicle >::difference_type j, std::vector< si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > > const &v)\n");
  
  return Qnil;
}



/*
  Document-method: SiTaxi::BWVehicleVector.shift

  call-seq:
    shift -> VALUE

Remove and return element at the beginning of the BWVehicleVector.
*/
SWIGINTERN VALUE
_wrap_BWVehicleVector_shift(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWVehicle > *arg1 = (std::vector< si_taxi::BWVehicle > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle > *","shift", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWVehicle > * >(argp1);
  {
    try {
      result = (VALUE)std_vector_Sl_si_taxi_BWVehicle_Sg__shift(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWVehicleVector.insert

  call-seq:
    insert(pos, argc, ?) -> BWVehicleVector
    insert(pos, x) -> iterator
    insert(pos, n, x)

Insert one or more new elements in the BWVehicleVector.
*/
SWIGINTERN VALUE
_wrap_BWVehicleVector_insert__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWVehicle > *arg1 = (std::vector< si_taxi::BWVehicle > *) 0 ;
  std::vector< si_taxi::BWVehicle >::difference_type arg2 ;
  int arg3 ;
  VALUE *arg4 = (VALUE *) 0 ;
  void *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if (argc < 2) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWVehicle > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle >::difference_type","insert", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< si_taxi::BWVehicle >::difference_type >(val2);
  {
    arg3 = argc - 1;
    arg4 = argv + 1;
  }
  {
    try {
      result = (std::vector< si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > > *)std_vector_Sl_si_taxi_BWVehicle_Sg__insert__SWIG_0(arg1,arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWVehicleVector.unshift

  call-seq:
    unshift(argc, ?) -> BWVehicleVector

Add one or more elements at the beginning of the BWVehicleVector.
*/
SWIGINTERN VALUE
_wrap_BWVehicleVector_unshift(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWVehicle > *arg1 = (std::vector< si_taxi::BWVehicle > *) 0 ;
  int arg2 ;
  VALUE *arg3 = (VALUE *) 0 ;
  void *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if (argc < 1) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle > *","unshift", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWVehicle > * >(argp1);
  {
    arg2 = argc;
    arg3 = argv;
  }
  {
    try {
      result = (std::vector< si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > > *)std_vector_Sl_si_taxi_BWVehicle_Sg__unshift(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_BWVehicleVector__SWIG_0(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "SiTaxi::BWVehicleVector";
  std::vector< si_taxi::BWVehicle > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (std::vector< si_taxi::BWVehicle > *)new std::vector< si_taxi::BWVehicle >();
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_BWVehicleVector__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWVehicle > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  const char *classname SWIGUNUSED = "SiTaxi::BWVehicleVector";
  std::vector< si_taxi::BWVehicle > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > > *ptr = (std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > > *)0;
    res1 = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle > const &","std::vector<(si_taxi::BWVehicle)>", 1, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< si_taxi::BWVehicle > const &","std::vector<(si_taxi::BWVehicle)>", 1, argv[0])); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< si_taxi::BWVehicle > *)new std::vector< si_taxi::BWVehicle >((std::vector< si_taxi::BWVehicle > const &)*arg1);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return self;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return Qnil;
}



/*
  Document-method: SiTaxi::BWVehicleVector.empty?

  call-seq:
    empty? -> bool

Check if the BWVehicleVector is empty or not.
*/
SWIGINTERN VALUE
_wrap_BWVehicleVector_emptyq___(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWVehicle > *arg1 = (std::vector< si_taxi::BWVehicle > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle > const *","empty", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWVehicle > * >(argp1);
  {
    try {
      result = (bool)((std::vector< si_taxi::BWVehicle > const *)arg1)->empty();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWVehicleVector.size

  call-seq:
    size -> size_type

Size or Length of the BWVehicleVector.
*/
SWIGINTERN VALUE
_wrap_BWVehicleVector_size(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWVehicle > *arg1 = (std::vector< si_taxi::BWVehicle > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::BWVehicle >::size_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle > const *","size", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWVehicle > * >(argp1);
  {
    try {
      result = ((std::vector< si_taxi::BWVehicle > const *)arg1)->size();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWVehicleVector.clear

  call-seq:
    clear

Clear BWVehicleVector contents.
*/
SWIGINTERN VALUE
_wrap_BWVehicleVector_clear(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWVehicle > *arg1 = (std::vector< si_taxi::BWVehicle > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle > *","clear", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWVehicle > * >(argp1);
  {
    try {
      (arg1)->clear();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWVehicleVector_swap(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWVehicle > *arg1 = (std::vector< si_taxi::BWVehicle > *) 0 ;
  std::vector< si_taxi::BWVehicle > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle > *","swap", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWVehicle > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle > &","swap", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< si_taxi::BWVehicle > &","swap", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< si_taxi::BWVehicle > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWVehicleVector_get_allocator(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWVehicle > *arg1 = (std::vector< si_taxi::BWVehicle > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::allocator< si_taxi::BWVehicle > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle > const *","get_allocator", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWVehicle > * >(argp1);
  {
    try {
      result = ((std::vector< si_taxi::BWVehicle > const *)arg1)->get_allocator();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new std::vector< si_taxi::BWVehicle >::allocator_type(static_cast< const std::vector< si_taxi::BWVehicle >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_si_taxi__BWVehicle_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWVehicleVector.begin

  call-seq:
    begin -> iterator

Return an iterator to the beginning of the BWVehicleVector.
*/
SWIGINTERN VALUE
_wrap_BWVehicleVector_begin(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWVehicle > *arg1 = (std::vector< si_taxi::BWVehicle > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::BWVehicle >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle > *","begin", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWVehicle > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< si_taxi::BWVehicle >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWVehicleVector.end

  call-seq:
    end -> iterator

Return an iterator to past the end of the BWVehicleVector.
*/
SWIGINTERN VALUE
_wrap_BWVehicleVector_end(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWVehicle > *arg1 = (std::vector< si_taxi::BWVehicle > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::BWVehicle >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle > *","end", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWVehicle > * >(argp1);
  {
    try {
      result = (arg1)->end();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< si_taxi::BWVehicle >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWVehicleVector.rbegin

  call-seq:
    rbegin -> reverse_iterator

Return a reverse iterator to the beginning (the end) of the BWVehicleVector.
*/
SWIGINTERN VALUE
_wrap_BWVehicleVector_rbegin(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWVehicle > *arg1 = (std::vector< si_taxi::BWVehicle > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::BWVehicle >::reverse_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle > *","rbegin", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWVehicle > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< si_taxi::BWVehicle >::reverse_iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWVehicleVector.rend

  call-seq:
    rend -> reverse_iterator

Return a reverse iterator to past the end (past the beginning) of the BWVehicleVector.
*/
SWIGINTERN VALUE
_wrap_BWVehicleVector_rend(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWVehicle > *arg1 = (std::vector< si_taxi::BWVehicle > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::BWVehicle >::reverse_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle > *","rend", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWVehicle > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< si_taxi::BWVehicle >::reverse_iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_BWVehicleVector__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWVehicle >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  const char *classname SWIGUNUSED = "SiTaxi::BWVehicleVector";
  std::vector< si_taxi::BWVehicle > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle >::size_type","std::vector<(si_taxi::BWVehicle)>", 1, argv[0] ));
  } 
  arg1 = static_cast< std::vector< si_taxi::BWVehicle >::size_type >(val1);
  {
    try {
      result = (std::vector< si_taxi::BWVehicle > *)new std::vector< si_taxi::BWVehicle >(arg1);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWVehicleVector.resize

  call-seq:
    resize(new_size)
    resize(new_size, x)

Resize the size of the BWVehicleVector.
*/
SWIGINTERN VALUE
_wrap_BWVehicleVector_resize__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWVehicle > *arg1 = (std::vector< si_taxi::BWVehicle > *) 0 ;
  std::vector< si_taxi::BWVehicle >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWVehicle > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle >::size_type","resize", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< si_taxi::BWVehicle >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWVehicleVector.erase

  call-seq:
    erase(pos) -> iterator
    erase(first, last) -> iterator

Delete a portion of the BWVehicleVector.
*/
SWIGINTERN VALUE
_wrap_BWVehicleVector_erase__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWVehicle > *arg1 = (std::vector< si_taxi::BWVehicle > *) 0 ;
  std::vector< si_taxi::BWVehicle >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  std::vector< si_taxi::BWVehicle >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle > *","erase", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWVehicle > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle >::iterator","erase", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< si_taxi::BWVehicle >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< si_taxi::BWVehicle >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle >::iterator","erase", 2, argv[0] ));
    }
  }
  {
    try {
      result = (arg1)->erase(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< si_taxi::BWVehicle >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWVehicleVector_erase__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWVehicle > *arg1 = (std::vector< si_taxi::BWVehicle > *) 0 ;
  std::vector< si_taxi::BWVehicle >::iterator arg2 ;
  std::vector< si_taxi::BWVehicle >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  swig::Iterator *iter3 = 0 ;
  int res3 ;
  std::vector< si_taxi::BWVehicle >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle > *","erase", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWVehicle > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle >::iterator","erase", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< si_taxi::BWVehicle >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< si_taxi::BWVehicle >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle >::iterator","erase", 2, argv[0] ));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter3), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle >::iterator","erase", 3, argv[1] ));
  } else {
    swig::Iterator_T<std::vector< si_taxi::BWVehicle >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< si_taxi::BWVehicle >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle >::iterator","erase", 3, argv[1] ));
    }
  }
  {
    try {
      result = (arg1)->erase(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< si_taxi::BWVehicle >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_BWVehicleVector_erase(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< si_taxi::BWVehicle >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_BWVehicleVector_erase__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< si_taxi::BWVehicle >::iterator > *>(iter) != 0));
      if (_v) {
        swig::ConstIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), 
          swig::Iterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< si_taxi::BWVehicle >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_BWVehicleVector_erase__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "BWVehicleVector.erase", 
    "    std::vector< si_taxi::BWVehicle >::iterator BWVehicleVector.erase(std::vector< si_taxi::BWVehicle >::iterator pos)\n"
    "    std::vector< si_taxi::BWVehicle >::iterator BWVehicleVector.erase(std::vector< si_taxi::BWVehicle >::iterator first, std::vector< si_taxi::BWVehicle >::iterator last)\n");
  
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_BWVehicleVector_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_BWVehicleVector_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_BWVehicleVector__SWIG_3(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWVehicle >::size_type arg1 ;
  std::vector< si_taxi::BWVehicle >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  const char *classname SWIGUNUSED = "SiTaxi::BWVehicleVector";
  std::vector< si_taxi::BWVehicle > *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle >::size_type","std::vector<(si_taxi::BWVehicle)>", 1, argv[0] ));
  } 
  arg1 = static_cast< std::vector< si_taxi::BWVehicle >::size_type >(val1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_si_taxi__BWVehicle,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle >::value_type const &","std::vector<(si_taxi::BWVehicle)>", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< si_taxi::BWVehicle >::value_type const &","std::vector<(si_taxi::BWVehicle)>", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< std::vector< si_taxi::BWVehicle >::value_type * >(argp2);
  {
    try {
      result = (std::vector< si_taxi::BWVehicle > *)new std::vector< si_taxi::BWVehicle >(arg1,(std::vector< si_taxi::BWVehicle >::value_type const &)*arg2);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_BWVehicleVector(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_BWVehicleVector__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_BWVehicleVector__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_BWVehicleVector__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_si_taxi__BWVehicle, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_BWVehicleVector__SWIG_3(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "BWVehicleVector.new", 
    "    BWVehicleVector.new()\n"
    "    BWVehicleVector.new(std::vector< si_taxi::BWVehicle > const &)\n"
    "    BWVehicleVector.new(std::vector< si_taxi::BWVehicle >::size_type size)\n"
    "    BWVehicleVector.new(std::vector< si_taxi::BWVehicle >::size_type size, std::vector< si_taxi::BWVehicle >::value_type const &value)\n");
  
  return Qnil;
}



/*
  Document-method: SiTaxi::BWVehicleVector.front

  call-seq:
    front -> value_type

Return the first element in BWVehicleVector.
*/
SWIGINTERN VALUE
_wrap_BWVehicleVector_front(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWVehicle > *arg1 = (std::vector< si_taxi::BWVehicle > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::BWVehicle >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle > const *","front", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWVehicle > * >(argp1);
  {
    try {
      result = (std::vector< si_taxi::BWVehicle >::value_type *) &((std::vector< si_taxi::BWVehicle > const *)arg1)->front();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_si_taxi__BWVehicle, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWVehicleVector.back

  call-seq:
    back -> value_type

Return the last element in BWVehicleVector.
*/
SWIGINTERN VALUE
_wrap_BWVehicleVector_back(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWVehicle > *arg1 = (std::vector< si_taxi::BWVehicle > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::BWVehicle >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle > const *","back", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWVehicle > * >(argp1);
  {
    try {
      result = (std::vector< si_taxi::BWVehicle >::value_type *) &((std::vector< si_taxi::BWVehicle > const *)arg1)->back();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_si_taxi__BWVehicle, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWVehicleVector.assign

  call-seq:
    assign(n, x)

Assign a new BWVehicleVector or portion of it.
*/
SWIGINTERN VALUE
_wrap_BWVehicleVector_assign(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWVehicle > *arg1 = (std::vector< si_taxi::BWVehicle > *) 0 ;
  std::vector< si_taxi::BWVehicle >::size_type arg2 ;
  std::vector< si_taxi::BWVehicle >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle > *","assign", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWVehicle > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle >::size_type","assign", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< si_taxi::BWVehicle >::size_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_si_taxi__BWVehicle,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle >::value_type const &","assign", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< si_taxi::BWVehicle >::value_type const &","assign", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< si_taxi::BWVehicle >::value_type * >(argp3);
  {
    try {
      (arg1)->assign(arg2,(std::vector< si_taxi::BWVehicle >::value_type const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWVehicleVector.resize

  call-seq:
    resize(new_size)
    resize(new_size, x)

Resize the size of the BWVehicleVector.
*/
SWIGINTERN VALUE
_wrap_BWVehicleVector_resize__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWVehicle > *arg1 = (std::vector< si_taxi::BWVehicle > *) 0 ;
  std::vector< si_taxi::BWVehicle >::size_type arg2 ;
  std::vector< si_taxi::BWVehicle >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWVehicle > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle >::size_type","resize", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< si_taxi::BWVehicle >::size_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_si_taxi__BWVehicle,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle >::value_type const &","resize", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< si_taxi::BWVehicle >::value_type const &","resize", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< si_taxi::BWVehicle >::value_type * >(argp3);
  {
    try {
      (arg1)->resize(arg2,(std::vector< si_taxi::BWVehicle >::value_type const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_BWVehicleVector_resize(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BWVehicleVector_resize__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_si_taxi__BWVehicle, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BWVehicleVector_resize__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "BWVehicleVector.resize", 
    "    void BWVehicleVector.resize(std::vector< si_taxi::BWVehicle >::size_type new_size)\n"
    "    void BWVehicleVector.resize(std::vector< si_taxi::BWVehicle >::size_type new_size, std::vector< si_taxi::BWVehicle >::value_type const &x)\n");
  
  return Qnil;
}



/*
  Document-method: SiTaxi::BWVehicleVector.insert

  call-seq:
    insert(pos, argc, ?) -> BWVehicleVector
    insert(pos, x) -> iterator
    insert(pos, n, x)

Insert one or more new elements in the BWVehicleVector.
*/
SWIGINTERN VALUE
_wrap_BWVehicleVector_insert__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWVehicle > *arg1 = (std::vector< si_taxi::BWVehicle > *) 0 ;
  std::vector< si_taxi::BWVehicle >::iterator arg2 ;
  std::vector< si_taxi::BWVehicle >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< si_taxi::BWVehicle >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWVehicle > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle >::iterator","insert", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< si_taxi::BWVehicle >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< si_taxi::BWVehicle >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle >::iterator","insert", 2, argv[0] ));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_si_taxi__BWVehicle,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle >::value_type const &","insert", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< si_taxi::BWVehicle >::value_type const &","insert", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< si_taxi::BWVehicle >::value_type * >(argp3);
  {
    try {
      result = (arg1)->insert(arg2,(std::vector< si_taxi::BWVehicle >::value_type const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< si_taxi::BWVehicle >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWVehicleVector_insert__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWVehicle > *arg1 = (std::vector< si_taxi::BWVehicle > *) 0 ;
  std::vector< si_taxi::BWVehicle >::iterator arg2 ;
  std::vector< si_taxi::BWVehicle >::size_type arg3 ;
  std::vector< si_taxi::BWVehicle >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWVehicle > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle >::iterator","insert", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< si_taxi::BWVehicle >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< si_taxi::BWVehicle >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle >::iterator","insert", 2, argv[0] ));
    }
  }
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle >::size_type","insert", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< si_taxi::BWVehicle >::size_type >(val3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_si_taxi__BWVehicle,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle >::value_type const &","insert", 4, argv[2] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< si_taxi::BWVehicle >::value_type const &","insert", 4, argv[2])); 
  }
  arg4 = reinterpret_cast< std::vector< si_taxi::BWVehicle >::value_type * >(argp4);
  {
    try {
      (arg1)->insert(arg2,arg3,(std::vector< si_taxi::BWVehicle >::value_type const &)*arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_BWVehicleVector_insert(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< si_taxi::BWVehicle >::iterator > *>(iter) != 0));
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_si_taxi__BWVehicle, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BWVehicleVector_insert__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_BWVehicleVector_insert__SWIG_0(nargs, args, self);
          }
          return _wrap_BWVehicleVector_insert__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< si_taxi::BWVehicle >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_si_taxi__BWVehicle, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_BWVehicleVector_insert__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "insert", 
    "    void insert(std::vector< si_taxi::BWVehicle >::difference_type pos, int argc, VALUE *argv, ...)\n"
    "    void insert(std::vector< si_taxi::BWVehicle >::iterator pos, std::vector< si_taxi::BWVehicle >::value_type const &x)\n"
    "    void insert(std::vector< si_taxi::BWVehicle >::iterator pos, std::vector< si_taxi::BWVehicle >::size_type n, std::vector< si_taxi::BWVehicle >::value_type const &x)\n");
  
  return Qnil;
}



/*
  Document-method: SiTaxi::BWVehicleVector.reserve

  call-seq:
    reserve(n)

Reserve memory in the BWVehicleVector for a number of elements.
*/
SWIGINTERN VALUE
_wrap_BWVehicleVector_reserve(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWVehicle > *arg1 = (std::vector< si_taxi::BWVehicle > *) 0 ;
  std::vector< si_taxi::BWVehicle >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle > *","reserve", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWVehicle > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle >::size_type","reserve", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< si_taxi::BWVehicle >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWVehicleVector.capacity

  call-seq:
    capacity -> size_type

Reserved capacity of the BWVehicleVector.
*/
SWIGINTERN VALUE
_wrap_BWVehicleVector_capacity(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWVehicle > *arg1 = (std::vector< si_taxi::BWVehicle > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::BWVehicle >::size_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle > const *","capacity", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWVehicle > * >(argp1);
  {
    try {
      result = ((std::vector< si_taxi::BWVehicle > const *)arg1)->capacity();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_std_vector_Sl_si_taxi_BWVehicle_Sg_(std::vector< si_taxi::BWVehicle > *arg1) {
    delete arg1;
}

swig_class SwigClassBWPaxQueue;

SWIGINTERN VALUE
_wrap_new_BWPaxQueue__SWIG_0(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "SiTaxi::BWPaxQueue";
  std::queue< si_taxi::BWPax > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (std::queue< si_taxi::BWPax > *)new std::queue< si_taxi::BWPax >();
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_BWPaxQueue_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_BWPaxQueue_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_std__queueT_si_taxi__BWPax_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_BWPaxQueue__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  const char *classname SWIGUNUSED = "SiTaxi::BWPaxQueue";
  std::queue< si_taxi::BWPax > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > const &","std::queue<(si_taxi::BWPax)>", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > const &","std::queue<(si_taxi::BWPax)>", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > * >(argp1);
  {
    try {
      result = (std::queue< si_taxi::BWPax > *)new std::queue< si_taxi::BWPax >((std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > const &)*arg1);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_BWPaxQueue(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_BWPaxQueue__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_BWPaxQueue__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "BWPaxQueue.new", 
    "    BWPaxQueue.new()\n"
    "    BWPaxQueue.new(std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > const &)\n");
  
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxQueue.empty?

  call-seq:
    empty? -> bool

Check if the BWPaxQueue is empty or not.
*/
SWIGINTERN VALUE
_wrap_BWPaxQueue_emptyq___(int argc, VALUE *argv, VALUE self) {
  std::queue< si_taxi::BWPax > *arg1 = (std::queue< si_taxi::BWPax > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__queueT_si_taxi__BWPax_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::queue< si_taxi::BWPax > const *","empty", 1, self )); 
  }
  arg1 = reinterpret_cast< std::queue< si_taxi::BWPax > * >(argp1);
  {
    try {
      result = (bool)((std::queue< si_taxi::BWPax > const *)arg1)->empty();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxQueue.size

  call-seq:
    size -> size_type

Size or Length of the BWPaxQueue.
*/
SWIGINTERN VALUE
_wrap_BWPaxQueue_size(int argc, VALUE *argv, VALUE self) {
  std::queue< si_taxi::BWPax > *arg1 = (std::queue< si_taxi::BWPax > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::queue< si_taxi::BWPax >::size_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__queueT_si_taxi__BWPax_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::queue< si_taxi::BWPax > const *","size", 1, self )); 
  }
  arg1 = reinterpret_cast< std::queue< si_taxi::BWPax > * >(argp1);
  {
    try {
      result = ((std::queue< si_taxi::BWPax > const *)arg1)->size();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxQueue.front

  call-seq:
    front -> value_type

Return the first element in BWPaxQueue.
*/
SWIGINTERN VALUE
_wrap_BWPaxQueue_front(int argc, VALUE *argv, VALUE self) {
  std::queue< si_taxi::BWPax > *arg1 = (std::queue< si_taxi::BWPax > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::queue< si_taxi::BWPax >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__queueT_si_taxi__BWPax_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::queue< si_taxi::BWPax > const *","front", 1, self )); 
  }
  arg1 = reinterpret_cast< std::queue< si_taxi::BWPax > * >(argp1);
  {
    try {
      result = (std::queue< si_taxi::BWPax >::value_type *) &((std::queue< si_taxi::BWPax > const *)arg1)->front();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_si_taxi__BWPax, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxQueue.back

  call-seq:
    back -> value_type

Return the last element in BWPaxQueue.
*/
SWIGINTERN VALUE
_wrap_BWPaxQueue_back(int argc, VALUE *argv, VALUE self) {
  std::queue< si_taxi::BWPax > *arg1 = (std::queue< si_taxi::BWPax > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::queue< si_taxi::BWPax >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__queueT_si_taxi__BWPax_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::queue< si_taxi::BWPax > const *","back", 1, self )); 
  }
  arg1 = reinterpret_cast< std::queue< si_taxi::BWPax > * >(argp1);
  {
    try {
      result = (std::queue< si_taxi::BWPax >::value_type *) &((std::queue< si_taxi::BWPax > const *)arg1)->back();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_si_taxi__BWPax, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxQueue.pop

  call-seq:
    pop

Remove and return element at the end of the BWPaxQueue.
*/
SWIGINTERN VALUE
_wrap_BWPaxQueue_pop(int argc, VALUE *argv, VALUE self) {
  std::queue< si_taxi::BWPax > *arg1 = (std::queue< si_taxi::BWPax > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__queueT_si_taxi__BWPax_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::queue< si_taxi::BWPax > *","pop", 1, self )); 
  }
  arg1 = reinterpret_cast< std::queue< si_taxi::BWPax > * >(argp1);
  {
    try {
      (arg1)->pop();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxQueue.push

  call-seq:
    push(?)

Add an element at the end of the BWPaxQueue.
*/
SWIGINTERN VALUE
_wrap_BWPaxQueue_push(int argc, VALUE *argv, VALUE self) {
  std::queue< si_taxi::BWPax > *arg1 = (std::queue< si_taxi::BWPax > *) 0 ;
  std::queue< si_taxi::BWPax >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__queueT_si_taxi__BWPax_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::queue< si_taxi::BWPax > *","push", 1, self )); 
  }
  arg1 = reinterpret_cast< std::queue< si_taxi::BWPax > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_si_taxi__BWPax,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::queue< si_taxi::BWPax >::value_type const &","push", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::queue< si_taxi::BWPax >::value_type const &","push", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::queue< si_taxi::BWPax >::value_type * >(argp2);
  {
    try {
      (arg1)->push((std::queue< si_taxi::BWPax >::value_type const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN void
free_std_queue_Sl_si_taxi_BWPax_Sg_(std::queue< si_taxi::BWPax > *arg1) {
    delete arg1;
}

swig_class SwigClassBWSimStatsPaxRecordVector;


/*
  Document-method: SiTaxi::BWSimStatsPaxRecordVector.dup

  call-seq:
    dup -> BWSimStatsPaxRecordVector

Create a duplicate of the class and unfreeze it if needed.
*/
SWIGINTERN VALUE
_wrap_BWSimStatsPaxRecordVector_dup(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWSimStatsPaxRecord > *arg1 = (std::vector< si_taxi::BWSimStatsPaxRecord > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord > *","dup", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWSimStatsPaxRecord > * >(argp1);
  {
    try {
      result = (std::vector< si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > > *)std_vector_Sl_si_taxi_BWSimStatsPaxRecord_Sg__dup(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWSimStatsPaxRecordVector.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_BWSimStatsPaxRecordVector_inspect(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWSimStatsPaxRecord > *arg1 = (std::vector< si_taxi::BWSimStatsPaxRecord > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord > *","inspect", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWSimStatsPaxRecord > * >(argp1);
  {
    try {
      result = (VALUE)std_vector_Sl_si_taxi_BWSimStatsPaxRecord_Sg__inspect(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWSimStatsPaxRecordVector.to_a

  call-seq:
    to_a -> VALUE

Convert BWSimStatsPaxRecordVector to an Array.
*/
SWIGINTERN VALUE
_wrap_BWSimStatsPaxRecordVector_to_a(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWSimStatsPaxRecord > *arg1 = (std::vector< si_taxi::BWSimStatsPaxRecord > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord > *","to_a", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWSimStatsPaxRecord > * >(argp1);
  {
    try {
      result = (VALUE)std_vector_Sl_si_taxi_BWSimStatsPaxRecord_Sg__to_a(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWSimStatsPaxRecordVector.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_BWSimStatsPaxRecordVector_to_s(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWSimStatsPaxRecord > *arg1 = (std::vector< si_taxi::BWSimStatsPaxRecord > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord > *","to_s", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWSimStatsPaxRecord > * >(argp1);
  {
    try {
      result = (VALUE)std_vector_Sl_si_taxi_BWSimStatsPaxRecord_Sg__to_s(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWSimStatsPaxRecordVector.slice

  call-seq:
    slice(i, j) -> VALUE

Return a slice (portion of) the BWSimStatsPaxRecordVector.
*/
SWIGINTERN VALUE
_wrap_BWSimStatsPaxRecordVector_slice(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWSimStatsPaxRecord > *arg1 = (std::vector< si_taxi::BWSimStatsPaxRecord > *) 0 ;
  std::vector< si_taxi::BWSimStatsPaxRecord >::difference_type arg2 ;
  std::vector< si_taxi::BWSimStatsPaxRecord >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord > *","slice", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWSimStatsPaxRecord > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord >::difference_type","slice", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< si_taxi::BWSimStatsPaxRecord >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord >::difference_type","slice", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< si_taxi::BWSimStatsPaxRecord >::difference_type >(val3);
  {
    try {
      result = (VALUE)std_vector_Sl_si_taxi_BWSimStatsPaxRecord_Sg__slice(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWSimStatsPaxRecordVector.each

  call-seq:
    each -> BWSimStatsPaxRecordVector

Iterate thru each element in the BWSimStatsPaxRecordVector.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_BWSimStatsPaxRecordVector_each(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWSimStatsPaxRecord > *arg1 = (std::vector< si_taxi::BWSimStatsPaxRecord > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord > *","each", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWSimStatsPaxRecord > * >(argp1);
  {
    try {
      result = (std::vector< si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > > *)std_vector_Sl_si_taxi_BWSimStatsPaxRecord_Sg__each(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWSimStatsPaxRecordVector.select

  call-seq:
    select -> BWSimStatsPaxRecordVector

Iterate thru each element in the BWSimStatsPaxRecordVector and select those that match a condition.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_BWSimStatsPaxRecordVector_select(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWSimStatsPaxRecord > *arg1 = (std::vector< si_taxi::BWSimStatsPaxRecord > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord > *","select", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWSimStatsPaxRecord > * >(argp1);
  {
    try {
      result = (std::vector< si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > > *)std_vector_Sl_si_taxi_BWSimStatsPaxRecord_Sg__select(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWSimStatsPaxRecordVector.reject!

  call-seq:
    reject! -> BWSimStatsPaxRecordVector

Iterate thru each element in the BWSimStatsPaxRecordVector and reject those that fail a condition.  A block must be provided.  BWSimStatsPaxRecordVector is modified in place.
*/
SWIGINTERN VALUE
_wrap_BWSimStatsPaxRecordVector_rejectN___(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWSimStatsPaxRecord > *arg1 = (std::vector< si_taxi::BWSimStatsPaxRecord > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord > *","reject_bang", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWSimStatsPaxRecord > * >(argp1);
  {
    try {
      result = (std::vector< si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > > *)std_vector_Sl_si_taxi_BWSimStatsPaxRecord_Sg__reject_bang(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWSimStatsPaxRecordVector.delete_at

  call-seq:
    delete_at(i) -> VALUE

Delete an element at a certain index.
*/
SWIGINTERN VALUE
_wrap_BWSimStatsPaxRecordVector_delete_at(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWSimStatsPaxRecord > *arg1 = (std::vector< si_taxi::BWSimStatsPaxRecord > *) 0 ;
  std::vector< si_taxi::BWSimStatsPaxRecord >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord > *","delete_at", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWSimStatsPaxRecord > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord >::difference_type","delete_at", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< si_taxi::BWSimStatsPaxRecord >::difference_type >(val2);
  {
    try {
      result = (VALUE)std_vector_Sl_si_taxi_BWSimStatsPaxRecord_Sg__delete_at(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSimStatsPaxRecordVector___delete2__(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWSimStatsPaxRecord > *arg1 = (std::vector< si_taxi::BWSimStatsPaxRecord > *) 0 ;
  std::vector< si_taxi::BWSimStatsPaxRecord >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord > *","__delete2__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWSimStatsPaxRecord > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_si_taxi__BWSimStatsPaxRecord,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord >::value_type const &","__delete2__", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< si_taxi::BWSimStatsPaxRecord >::value_type const &","__delete2__", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< si_taxi::BWSimStatsPaxRecord >::value_type * >(argp2);
  {
    try {
      result = (VALUE)std_vector_Sl_si_taxi_BWSimStatsPaxRecord_Sg____delete2__(arg1,(si_taxi::BWSimStatsPaxRecord const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWSimStatsPaxRecordVector.pop

  call-seq:
    pop -> VALUE

Remove and return element at the end of the BWSimStatsPaxRecordVector.
*/
SWIGINTERN VALUE
_wrap_BWSimStatsPaxRecordVector_pop(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWSimStatsPaxRecord > *arg1 = (std::vector< si_taxi::BWSimStatsPaxRecord > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord > *","pop", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWSimStatsPaxRecord > * >(argp1);
  {
    try {
      result = (VALUE)std_vector_Sl_si_taxi_BWSimStatsPaxRecord_Sg__pop(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWSimStatsPaxRecordVector.push

  call-seq:
    push(e) -> value_type

Add an element at the end of the BWSimStatsPaxRecordVector.
*/
SWIGINTERN VALUE
_wrap_BWSimStatsPaxRecordVector_push(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWSimStatsPaxRecord > *arg1 = (std::vector< si_taxi::BWSimStatsPaxRecord > *) 0 ;
  std::vector< si_taxi::BWSimStatsPaxRecord >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< si_taxi::BWSimStatsPaxRecord >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord > *","push", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWSimStatsPaxRecord > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_si_taxi__BWSimStatsPaxRecord,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord >::value_type const &","push", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< si_taxi::BWSimStatsPaxRecord >::value_type const &","push", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< si_taxi::BWSimStatsPaxRecord >::value_type * >(argp2);
  {
    try {
      result = std_vector_Sl_si_taxi_BWSimStatsPaxRecord_Sg__push(arg1,(si_taxi::BWSimStatsPaxRecord const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new std::vector< si_taxi::BWSimStatsPaxRecord >::value_type(static_cast< const std::vector< si_taxi::BWSimStatsPaxRecord >::value_type& >(result))), SWIGTYPE_p_si_taxi__BWSimStatsPaxRecord, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWSimStatsPaxRecordVector.reject

  call-seq:
    reject -> BWSimStatsPaxRecordVector

Iterate thru each element in the BWSimStatsPaxRecordVector and reject those that fail a condition returning a new BWSimStatsPaxRecordVector.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_BWSimStatsPaxRecordVector_reject(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWSimStatsPaxRecord > *arg1 = (std::vector< si_taxi::BWSimStatsPaxRecord > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord > *","reject", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWSimStatsPaxRecord > * >(argp1);
  {
    try {
      result = (std::vector< si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > > *)std_vector_Sl_si_taxi_BWSimStatsPaxRecord_Sg__reject(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWSimStatsPaxRecordVector.at

  call-seq:
    at(i) -> VALUE

Return element at a certain index.
*/
SWIGINTERN VALUE
_wrap_BWSimStatsPaxRecordVector_at(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWSimStatsPaxRecord > *arg1 = (std::vector< si_taxi::BWSimStatsPaxRecord > *) 0 ;
  std::vector< si_taxi::BWSimStatsPaxRecord >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord > const *","at", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWSimStatsPaxRecord > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord >::difference_type","at", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< si_taxi::BWSimStatsPaxRecord >::difference_type >(val2);
  {
    try {
      result = (VALUE)std_vector_Sl_si_taxi_BWSimStatsPaxRecord_Sg__at((std::vector< si_taxi::BWSimStatsPaxRecord > const *)arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWSimStatsPaxRecordVector.[]

  call-seq:
    [](i, j) -> VALUE
    [](i) -> VALUE
    [](i) -> VALUE

Element accessor/slicing.
*/
SWIGINTERN VALUE
_wrap_BWSimStatsPaxRecordVector___getitem____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWSimStatsPaxRecord > *arg1 = (std::vector< si_taxi::BWSimStatsPaxRecord > *) 0 ;
  std::vector< si_taxi::BWSimStatsPaxRecord >::difference_type arg2 ;
  std::vector< si_taxi::BWSimStatsPaxRecord >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWSimStatsPaxRecord > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord >::difference_type","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< si_taxi::BWSimStatsPaxRecord >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord >::difference_type","__getitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< si_taxi::BWSimStatsPaxRecord >::difference_type >(val3);
  {
    try {
      result = (VALUE)std_vector_Sl_si_taxi_BWSimStatsPaxRecord_Sg____getitem____SWIG_0((std::vector< si_taxi::BWSimStatsPaxRecord > const *)arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSimStatsPaxRecordVector___getitem____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWSimStatsPaxRecord > *arg1 = (std::vector< si_taxi::BWSimStatsPaxRecord > *) 0 ;
  std::vector< si_taxi::BWSimStatsPaxRecord >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWSimStatsPaxRecord > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord >::difference_type","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< si_taxi::BWSimStatsPaxRecord >::difference_type >(val2);
  {
    try {
      result = (VALUE)std_vector_Sl_si_taxi_BWSimStatsPaxRecord_Sg____getitem____SWIG_1((std::vector< si_taxi::BWSimStatsPaxRecord > const *)arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSimStatsPaxRecordVector___getitem____SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWSimStatsPaxRecord > *arg1 = (std::vector< si_taxi::BWSimStatsPaxRecord > *) 0 ;
  VALUE arg2 = (VALUE) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWSimStatsPaxRecord > * >(argp1);
  arg2 = argv[0];
  {
    try {
      result = (VALUE)std_vector_Sl_si_taxi_BWSimStatsPaxRecord_Sg____getitem____SWIG_2((std::vector< si_taxi::BWSimStatsPaxRecord > const *)arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_BWSimStatsPaxRecordVector___getitem__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BWSimStatsPaxRecordVector___getitem____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_BWSimStatsPaxRecordVector___getitem____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BWSimStatsPaxRecordVector___getitem____SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "__getitem__", 
    "    VALUE __getitem__(std::vector< si_taxi::BWSimStatsPaxRecord >::difference_type i, std::vector< si_taxi::BWSimStatsPaxRecord >::difference_type j)\n"
    "    VALUE __getitem__(std::vector< si_taxi::BWSimStatsPaxRecord >::difference_type i)\n"
    "    VALUE __getitem__(VALUE i)\n");
  
  return Qnil;
}



/*
  Document-method: SiTaxi::BWSimStatsPaxRecordVector.[]=

  call-seq:
    []=(i, x) -> VALUE
    []=(i, j, v) -> VALUE

Element setter/slicing.
*/
SWIGINTERN VALUE
_wrap_BWSimStatsPaxRecordVector___setitem____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWSimStatsPaxRecord > *arg1 = (std::vector< si_taxi::BWSimStatsPaxRecord > *) 0 ;
  std::vector< si_taxi::BWSimStatsPaxRecord >::difference_type arg2 ;
  std::vector< si_taxi::BWSimStatsPaxRecord >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord > *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWSimStatsPaxRecord > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord >::difference_type","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< si_taxi::BWSimStatsPaxRecord >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_si_taxi__BWSimStatsPaxRecord,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord >::value_type const &","__setitem__", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< si_taxi::BWSimStatsPaxRecord >::value_type const &","__setitem__", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< si_taxi::BWSimStatsPaxRecord >::value_type * >(argp3);
  {
    try {
      result = (VALUE)std_vector_Sl_si_taxi_BWSimStatsPaxRecord_Sg____setitem____SWIG_0(arg1,arg2,(si_taxi::BWSimStatsPaxRecord const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSimStatsPaxRecordVector___setitem____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWSimStatsPaxRecord > *arg1 = (std::vector< si_taxi::BWSimStatsPaxRecord > *) 0 ;
  std::vector< si_taxi::BWSimStatsPaxRecord >::difference_type arg2 ;
  std::vector< si_taxi::BWSimStatsPaxRecord >::difference_type arg3 ;
  std::vector< si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord > *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWSimStatsPaxRecord > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord >::difference_type","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< si_taxi::BWSimStatsPaxRecord >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord >::difference_type","__setitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< si_taxi::BWSimStatsPaxRecord >::difference_type >(val3);
  {
    std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > > *ptr = (std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > > *)0;
    res4 = swig::asptr(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > > const &","__setitem__", 4, argv[2] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > > const &","__setitem__", 4, argv[2])); 
    }
    arg4 = ptr;
  }
  {
    try {
      try {
        result = (VALUE)std_vector_Sl_si_taxi_BWSimStatsPaxRecord_Sg____setitem____SWIG_1(arg1,arg2,arg3,(std::vector< si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > > const &)*arg4);
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return vresult;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
}


SWIGINTERN VALUE _wrap_BWSimStatsPaxRecordVector___setitem__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_si_taxi__BWSimStatsPaxRecord, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BWSimStatsPaxRecordVector___setitem____SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_BWSimStatsPaxRecordVector___setitem____SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "__setitem__", 
    "    VALUE __setitem__(std::vector< si_taxi::BWSimStatsPaxRecord >::difference_type i, std::vector< si_taxi::BWSimStatsPaxRecord >::value_type const &x)\n"
    "    VALUE __setitem__(std::vector< si_taxi::BWSimStatsPaxRecord >::difference_type i, std::vector< si_taxi::BWSimStatsPaxRecord >::difference_type j, std::vector< si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > > const &v)\n");
  
  return Qnil;
}



/*
  Document-method: SiTaxi::BWSimStatsPaxRecordVector.shift

  call-seq:
    shift -> VALUE

Remove and return element at the beginning of the BWSimStatsPaxRecordVector.
*/
SWIGINTERN VALUE
_wrap_BWSimStatsPaxRecordVector_shift(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWSimStatsPaxRecord > *arg1 = (std::vector< si_taxi::BWSimStatsPaxRecord > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord > *","shift", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWSimStatsPaxRecord > * >(argp1);
  {
    try {
      result = (VALUE)std_vector_Sl_si_taxi_BWSimStatsPaxRecord_Sg__shift(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWSimStatsPaxRecordVector.insert

  call-seq:
    insert(pos, argc, ?) -> BWSimStatsPaxRecordVector
    insert(pos, x) -> iterator
    insert(pos, n, x)

Insert one or more new elements in the BWSimStatsPaxRecordVector.
*/
SWIGINTERN VALUE
_wrap_BWSimStatsPaxRecordVector_insert__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWSimStatsPaxRecord > *arg1 = (std::vector< si_taxi::BWSimStatsPaxRecord > *) 0 ;
  std::vector< si_taxi::BWSimStatsPaxRecord >::difference_type arg2 ;
  int arg3 ;
  VALUE *arg4 = (VALUE *) 0 ;
  void *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if (argc < 2) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWSimStatsPaxRecord > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord >::difference_type","insert", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< si_taxi::BWSimStatsPaxRecord >::difference_type >(val2);
  {
    arg3 = argc - 1;
    arg4 = argv + 1;
  }
  {
    try {
      result = (std::vector< si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > > *)std_vector_Sl_si_taxi_BWSimStatsPaxRecord_Sg__insert__SWIG_0(arg1,arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWSimStatsPaxRecordVector.unshift

  call-seq:
    unshift(argc, ?) -> BWSimStatsPaxRecordVector

Add one or more elements at the beginning of the BWSimStatsPaxRecordVector.
*/
SWIGINTERN VALUE
_wrap_BWSimStatsPaxRecordVector_unshift(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWSimStatsPaxRecord > *arg1 = (std::vector< si_taxi::BWSimStatsPaxRecord > *) 0 ;
  int arg2 ;
  VALUE *arg3 = (VALUE *) 0 ;
  void *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if (argc < 1) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord > *","unshift", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWSimStatsPaxRecord > * >(argp1);
  {
    arg2 = argc;
    arg3 = argv;
  }
  {
    try {
      result = (std::vector< si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > > *)std_vector_Sl_si_taxi_BWSimStatsPaxRecord_Sg__unshift(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_BWSimStatsPaxRecordVector__SWIG_0(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "SiTaxi::BWSimStatsPaxRecordVector";
  std::vector< si_taxi::BWSimStatsPaxRecord > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (std::vector< si_taxi::BWSimStatsPaxRecord > *)new std::vector< si_taxi::BWSimStatsPaxRecord >();
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_BWSimStatsPaxRecordVector__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWSimStatsPaxRecord > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  const char *classname SWIGUNUSED = "SiTaxi::BWSimStatsPaxRecordVector";
  std::vector< si_taxi::BWSimStatsPaxRecord > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > > *ptr = (std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > > *)0;
    res1 = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord > const &","std::vector<(si_taxi::BWSimStatsPaxRecord)>", 1, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< si_taxi::BWSimStatsPaxRecord > const &","std::vector<(si_taxi::BWSimStatsPaxRecord)>", 1, argv[0])); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< si_taxi::BWSimStatsPaxRecord > *)new std::vector< si_taxi::BWSimStatsPaxRecord >((std::vector< si_taxi::BWSimStatsPaxRecord > const &)*arg1);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return self;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return Qnil;
}



/*
  Document-method: SiTaxi::BWSimStatsPaxRecordVector.empty?

  call-seq:
    empty? -> bool

Check if the BWSimStatsPaxRecordVector is empty or not.
*/
SWIGINTERN VALUE
_wrap_BWSimStatsPaxRecordVector_emptyq___(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWSimStatsPaxRecord > *arg1 = (std::vector< si_taxi::BWSimStatsPaxRecord > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord > const *","empty", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWSimStatsPaxRecord > * >(argp1);
  {
    try {
      result = (bool)((std::vector< si_taxi::BWSimStatsPaxRecord > const *)arg1)->empty();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWSimStatsPaxRecordVector.size

  call-seq:
    size -> size_type

Size or Length of the BWSimStatsPaxRecordVector.
*/
SWIGINTERN VALUE
_wrap_BWSimStatsPaxRecordVector_size(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWSimStatsPaxRecord > *arg1 = (std::vector< si_taxi::BWSimStatsPaxRecord > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::BWSimStatsPaxRecord >::size_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord > const *","size", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWSimStatsPaxRecord > * >(argp1);
  {
    try {
      result = ((std::vector< si_taxi::BWSimStatsPaxRecord > const *)arg1)->size();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWSimStatsPaxRecordVector.clear

  call-seq:
    clear

Clear BWSimStatsPaxRecordVector contents.
*/
SWIGINTERN VALUE
_wrap_BWSimStatsPaxRecordVector_clear(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWSimStatsPaxRecord > *arg1 = (std::vector< si_taxi::BWSimStatsPaxRecord > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord > *","clear", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWSimStatsPaxRecord > * >(argp1);
  {
    try {
      (arg1)->clear();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSimStatsPaxRecordVector_swap(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWSimStatsPaxRecord > *arg1 = (std::vector< si_taxi::BWSimStatsPaxRecord > *) 0 ;
  std::vector< si_taxi::BWSimStatsPaxRecord > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord > *","swap", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWSimStatsPaxRecord > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord > &","swap", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< si_taxi::BWSimStatsPaxRecord > &","swap", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< si_taxi::BWSimStatsPaxRecord > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSimStatsPaxRecordVector_get_allocator(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWSimStatsPaxRecord > *arg1 = (std::vector< si_taxi::BWSimStatsPaxRecord > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::allocator< si_taxi::BWSimStatsPaxRecord > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord > const *","get_allocator", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWSimStatsPaxRecord > * >(argp1);
  {
    try {
      result = ((std::vector< si_taxi::BWSimStatsPaxRecord > const *)arg1)->get_allocator();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new std::vector< si_taxi::BWSimStatsPaxRecord >::allocator_type(static_cast< const std::vector< si_taxi::BWSimStatsPaxRecord >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWSimStatsPaxRecordVector.begin

  call-seq:
    begin -> iterator

Return an iterator to the beginning of the BWSimStatsPaxRecordVector.
*/
SWIGINTERN VALUE
_wrap_BWSimStatsPaxRecordVector_begin(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWSimStatsPaxRecord > *arg1 = (std::vector< si_taxi::BWSimStatsPaxRecord > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::BWSimStatsPaxRecord >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord > *","begin", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWSimStatsPaxRecord > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< si_taxi::BWSimStatsPaxRecord >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWSimStatsPaxRecordVector.end

  call-seq:
    end -> iterator

Return an iterator to past the end of the BWSimStatsPaxRecordVector.
*/
SWIGINTERN VALUE
_wrap_BWSimStatsPaxRecordVector_end(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWSimStatsPaxRecord > *arg1 = (std::vector< si_taxi::BWSimStatsPaxRecord > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::BWSimStatsPaxRecord >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord > *","end", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWSimStatsPaxRecord > * >(argp1);
  {
    try {
      result = (arg1)->end();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< si_taxi::BWSimStatsPaxRecord >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWSimStatsPaxRecordVector.rbegin

  call-seq:
    rbegin -> reverse_iterator

Return a reverse iterator to the beginning (the end) of the BWSimStatsPaxRecordVector.
*/
SWIGINTERN VALUE
_wrap_BWSimStatsPaxRecordVector_rbegin(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWSimStatsPaxRecord > *arg1 = (std::vector< si_taxi::BWSimStatsPaxRecord > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::BWSimStatsPaxRecord >::reverse_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord > *","rbegin", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWSimStatsPaxRecord > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< si_taxi::BWSimStatsPaxRecord >::reverse_iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWSimStatsPaxRecordVector.rend

  call-seq:
    rend -> reverse_iterator

Return a reverse iterator to past the end (past the beginning) of the BWSimStatsPaxRecordVector.
*/
SWIGINTERN VALUE
_wrap_BWSimStatsPaxRecordVector_rend(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWSimStatsPaxRecord > *arg1 = (std::vector< si_taxi::BWSimStatsPaxRecord > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::BWSimStatsPaxRecord >::reverse_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord > *","rend", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWSimStatsPaxRecord > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< si_taxi::BWSimStatsPaxRecord >::reverse_iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_BWSimStatsPaxRecordVector__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWSimStatsPaxRecord >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  const char *classname SWIGUNUSED = "SiTaxi::BWSimStatsPaxRecordVector";
  std::vector< si_taxi::BWSimStatsPaxRecord > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord >::size_type","std::vector<(si_taxi::BWSimStatsPaxRecord)>", 1, argv[0] ));
  } 
  arg1 = static_cast< std::vector< si_taxi::BWSimStatsPaxRecord >::size_type >(val1);
  {
    try {
      result = (std::vector< si_taxi::BWSimStatsPaxRecord > *)new std::vector< si_taxi::BWSimStatsPaxRecord >(arg1);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWSimStatsPaxRecordVector.resize

  call-seq:
    resize(new_size)
    resize(new_size, x)

Resize the size of the BWSimStatsPaxRecordVector.
*/
SWIGINTERN VALUE
_wrap_BWSimStatsPaxRecordVector_resize__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWSimStatsPaxRecord > *arg1 = (std::vector< si_taxi::BWSimStatsPaxRecord > *) 0 ;
  std::vector< si_taxi::BWSimStatsPaxRecord >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWSimStatsPaxRecord > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord >::size_type","resize", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< si_taxi::BWSimStatsPaxRecord >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWSimStatsPaxRecordVector.erase

  call-seq:
    erase(pos) -> iterator
    erase(first, last) -> iterator

Delete a portion of the BWSimStatsPaxRecordVector.
*/
SWIGINTERN VALUE
_wrap_BWSimStatsPaxRecordVector_erase__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWSimStatsPaxRecord > *arg1 = (std::vector< si_taxi::BWSimStatsPaxRecord > *) 0 ;
  std::vector< si_taxi::BWSimStatsPaxRecord >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  std::vector< si_taxi::BWSimStatsPaxRecord >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord > *","erase", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWSimStatsPaxRecord > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord >::iterator","erase", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< si_taxi::BWSimStatsPaxRecord >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< si_taxi::BWSimStatsPaxRecord >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord >::iterator","erase", 2, argv[0] ));
    }
  }
  {
    try {
      result = (arg1)->erase(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< si_taxi::BWSimStatsPaxRecord >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSimStatsPaxRecordVector_erase__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWSimStatsPaxRecord > *arg1 = (std::vector< si_taxi::BWSimStatsPaxRecord > *) 0 ;
  std::vector< si_taxi::BWSimStatsPaxRecord >::iterator arg2 ;
  std::vector< si_taxi::BWSimStatsPaxRecord >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  swig::Iterator *iter3 = 0 ;
  int res3 ;
  std::vector< si_taxi::BWSimStatsPaxRecord >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord > *","erase", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWSimStatsPaxRecord > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord >::iterator","erase", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< si_taxi::BWSimStatsPaxRecord >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< si_taxi::BWSimStatsPaxRecord >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord >::iterator","erase", 2, argv[0] ));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter3), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord >::iterator","erase", 3, argv[1] ));
  } else {
    swig::Iterator_T<std::vector< si_taxi::BWSimStatsPaxRecord >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< si_taxi::BWSimStatsPaxRecord >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord >::iterator","erase", 3, argv[1] ));
    }
  }
  {
    try {
      result = (arg1)->erase(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< si_taxi::BWSimStatsPaxRecord >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_BWSimStatsPaxRecordVector_erase(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< si_taxi::BWSimStatsPaxRecord >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_BWSimStatsPaxRecordVector_erase__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< si_taxi::BWSimStatsPaxRecord >::iterator > *>(iter) != 0));
      if (_v) {
        swig::ConstIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), 
          swig::Iterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< si_taxi::BWSimStatsPaxRecord >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_BWSimStatsPaxRecordVector_erase__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "BWSimStatsPaxRecordVector.erase", 
    "    std::vector< si_taxi::BWSimStatsPaxRecord >::iterator BWSimStatsPaxRecordVector.erase(std::vector< si_taxi::BWSimStatsPaxRecord >::iterator pos)\n"
    "    std::vector< si_taxi::BWSimStatsPaxRecord >::iterator BWSimStatsPaxRecordVector.erase(std::vector< si_taxi::BWSimStatsPaxRecord >::iterator first, std::vector< si_taxi::BWSimStatsPaxRecord >::iterator last)\n");
  
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_BWSimStatsPaxRecordVector_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_BWSimStatsPaxRecordVector_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_BWSimStatsPaxRecordVector__SWIG_3(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWSimStatsPaxRecord >::size_type arg1 ;
  std::vector< si_taxi::BWSimStatsPaxRecord >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  const char *classname SWIGUNUSED = "SiTaxi::BWSimStatsPaxRecordVector";
  std::vector< si_taxi::BWSimStatsPaxRecord > *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord >::size_type","std::vector<(si_taxi::BWSimStatsPaxRecord)>", 1, argv[0] ));
  } 
  arg1 = static_cast< std::vector< si_taxi::BWSimStatsPaxRecord >::size_type >(val1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_si_taxi__BWSimStatsPaxRecord,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord >::value_type const &","std::vector<(si_taxi::BWSimStatsPaxRecord)>", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< si_taxi::BWSimStatsPaxRecord >::value_type const &","std::vector<(si_taxi::BWSimStatsPaxRecord)>", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< std::vector< si_taxi::BWSimStatsPaxRecord >::value_type * >(argp2);
  {
    try {
      result = (std::vector< si_taxi::BWSimStatsPaxRecord > *)new std::vector< si_taxi::BWSimStatsPaxRecord >(arg1,(std::vector< si_taxi::BWSimStatsPaxRecord >::value_type const &)*arg2);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_BWSimStatsPaxRecordVector(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_BWSimStatsPaxRecordVector__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_BWSimStatsPaxRecordVector__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_BWSimStatsPaxRecordVector__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_si_taxi__BWSimStatsPaxRecord, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_BWSimStatsPaxRecordVector__SWIG_3(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "BWSimStatsPaxRecordVector.new", 
    "    BWSimStatsPaxRecordVector.new()\n"
    "    BWSimStatsPaxRecordVector.new(std::vector< si_taxi::BWSimStatsPaxRecord > const &)\n"
    "    BWSimStatsPaxRecordVector.new(std::vector< si_taxi::BWSimStatsPaxRecord >::size_type size)\n"
    "    BWSimStatsPaxRecordVector.new(std::vector< si_taxi::BWSimStatsPaxRecord >::size_type size, std::vector< si_taxi::BWSimStatsPaxRecord >::value_type const &value)\n");
  
  return Qnil;
}



/*
  Document-method: SiTaxi::BWSimStatsPaxRecordVector.front

  call-seq:
    front -> value_type

Return the first element in BWSimStatsPaxRecordVector.
*/
SWIGINTERN VALUE
_wrap_BWSimStatsPaxRecordVector_front(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWSimStatsPaxRecord > *arg1 = (std::vector< si_taxi::BWSimStatsPaxRecord > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::BWSimStatsPaxRecord >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord > const *","front", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWSimStatsPaxRecord > * >(argp1);
  {
    try {
      result = (std::vector< si_taxi::BWSimStatsPaxRecord >::value_type *) &((std::vector< si_taxi::BWSimStatsPaxRecord > const *)arg1)->front();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_si_taxi__BWSimStatsPaxRecord, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWSimStatsPaxRecordVector.back

  call-seq:
    back -> value_type

Return the last element in BWSimStatsPaxRecordVector.
*/
SWIGINTERN VALUE
_wrap_BWSimStatsPaxRecordVector_back(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWSimStatsPaxRecord > *arg1 = (std::vector< si_taxi::BWSimStatsPaxRecord > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::BWSimStatsPaxRecord >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord > const *","back", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWSimStatsPaxRecord > * >(argp1);
  {
    try {
      result = (std::vector< si_taxi::BWSimStatsPaxRecord >::value_type *) &((std::vector< si_taxi::BWSimStatsPaxRecord > const *)arg1)->back();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_si_taxi__BWSimStatsPaxRecord, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWSimStatsPaxRecordVector.assign

  call-seq:
    assign(n, x)

Assign a new BWSimStatsPaxRecordVector or portion of it.
*/
SWIGINTERN VALUE
_wrap_BWSimStatsPaxRecordVector_assign(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWSimStatsPaxRecord > *arg1 = (std::vector< si_taxi::BWSimStatsPaxRecord > *) 0 ;
  std::vector< si_taxi::BWSimStatsPaxRecord >::size_type arg2 ;
  std::vector< si_taxi::BWSimStatsPaxRecord >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord > *","assign", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWSimStatsPaxRecord > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord >::size_type","assign", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< si_taxi::BWSimStatsPaxRecord >::size_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_si_taxi__BWSimStatsPaxRecord,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord >::value_type const &","assign", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< si_taxi::BWSimStatsPaxRecord >::value_type const &","assign", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< si_taxi::BWSimStatsPaxRecord >::value_type * >(argp3);
  {
    try {
      (arg1)->assign(arg2,(std::vector< si_taxi::BWSimStatsPaxRecord >::value_type const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWSimStatsPaxRecordVector.resize

  call-seq:
    resize(new_size)
    resize(new_size, x)

Resize the size of the BWSimStatsPaxRecordVector.
*/
SWIGINTERN VALUE
_wrap_BWSimStatsPaxRecordVector_resize__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWSimStatsPaxRecord > *arg1 = (std::vector< si_taxi::BWSimStatsPaxRecord > *) 0 ;
  std::vector< si_taxi::BWSimStatsPaxRecord >::size_type arg2 ;
  std::vector< si_taxi::BWSimStatsPaxRecord >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWSimStatsPaxRecord > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord >::size_type","resize", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< si_taxi::BWSimStatsPaxRecord >::size_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_si_taxi__BWSimStatsPaxRecord,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord >::value_type const &","resize", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< si_taxi::BWSimStatsPaxRecord >::value_type const &","resize", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< si_taxi::BWSimStatsPaxRecord >::value_type * >(argp3);
  {
    try {
      (arg1)->resize(arg2,(std::vector< si_taxi::BWSimStatsPaxRecord >::value_type const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_BWSimStatsPaxRecordVector_resize(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BWSimStatsPaxRecordVector_resize__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_si_taxi__BWSimStatsPaxRecord, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BWSimStatsPaxRecordVector_resize__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "BWSimStatsPaxRecordVector.resize", 
    "    void BWSimStatsPaxRecordVector.resize(std::vector< si_taxi::BWSimStatsPaxRecord >::size_type new_size)\n"
    "    void BWSimStatsPaxRecordVector.resize(std::vector< si_taxi::BWSimStatsPaxRecord >::size_type new_size, std::vector< si_taxi::BWSimStatsPaxRecord >::value_type const &x)\n");
  
  return Qnil;
}



/*
  Document-method: SiTaxi::BWSimStatsPaxRecordVector.insert

  call-seq:
    insert(pos, argc, ?) -> BWSimStatsPaxRecordVector
    insert(pos, x) -> iterator
    insert(pos, n, x)

Insert one or more new elements in the BWSimStatsPaxRecordVector.
*/
SWIGINTERN VALUE
_wrap_BWSimStatsPaxRecordVector_insert__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWSimStatsPaxRecord > *arg1 = (std::vector< si_taxi::BWSimStatsPaxRecord > *) 0 ;
  std::vector< si_taxi::BWSimStatsPaxRecord >::iterator arg2 ;
  std::vector< si_taxi::BWSimStatsPaxRecord >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< si_taxi::BWSimStatsPaxRecord >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWSimStatsPaxRecord > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord >::iterator","insert", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< si_taxi::BWSimStatsPaxRecord >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< si_taxi::BWSimStatsPaxRecord >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord >::iterator","insert", 2, argv[0] ));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_si_taxi__BWSimStatsPaxRecord,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord >::value_type const &","insert", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< si_taxi::BWSimStatsPaxRecord >::value_type const &","insert", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< si_taxi::BWSimStatsPaxRecord >::value_type * >(argp3);
  {
    try {
      result = (arg1)->insert(arg2,(std::vector< si_taxi::BWSimStatsPaxRecord >::value_type const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< si_taxi::BWSimStatsPaxRecord >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSimStatsPaxRecordVector_insert__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWSimStatsPaxRecord > *arg1 = (std::vector< si_taxi::BWSimStatsPaxRecord > *) 0 ;
  std::vector< si_taxi::BWSimStatsPaxRecord >::iterator arg2 ;
  std::vector< si_taxi::BWSimStatsPaxRecord >::size_type arg3 ;
  std::vector< si_taxi::BWSimStatsPaxRecord >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWSimStatsPaxRecord > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord >::iterator","insert", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< si_taxi::BWSimStatsPaxRecord >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< si_taxi::BWSimStatsPaxRecord >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord >::iterator","insert", 2, argv[0] ));
    }
  }
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord >::size_type","insert", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< si_taxi::BWSimStatsPaxRecord >::size_type >(val3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_si_taxi__BWSimStatsPaxRecord,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord >::value_type const &","insert", 4, argv[2] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< si_taxi::BWSimStatsPaxRecord >::value_type const &","insert", 4, argv[2])); 
  }
  arg4 = reinterpret_cast< std::vector< si_taxi::BWSimStatsPaxRecord >::value_type * >(argp4);
  {
    try {
      (arg1)->insert(arg2,arg3,(std::vector< si_taxi::BWSimStatsPaxRecord >::value_type const &)*arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_BWSimStatsPaxRecordVector_insert(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< si_taxi::BWSimStatsPaxRecord >::iterator > *>(iter) != 0));
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_si_taxi__BWSimStatsPaxRecord, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BWSimStatsPaxRecordVector_insert__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_BWSimStatsPaxRecordVector_insert__SWIG_0(nargs, args, self);
          }
          return _wrap_BWSimStatsPaxRecordVector_insert__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< si_taxi::BWSimStatsPaxRecord >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_si_taxi__BWSimStatsPaxRecord, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_BWSimStatsPaxRecordVector_insert__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "insert", 
    "    void insert(std::vector< si_taxi::BWSimStatsPaxRecord >::difference_type pos, int argc, VALUE *argv, ...)\n"
    "    void insert(std::vector< si_taxi::BWSimStatsPaxRecord >::iterator pos, std::vector< si_taxi::BWSimStatsPaxRecord >::value_type const &x)\n"
    "    void insert(std::vector< si_taxi::BWSimStatsPaxRecord >::iterator pos, std::vector< si_taxi::BWSimStatsPaxRecord >::size_type n, std::vector< si_taxi::BWSimStatsPaxRecord >::value_type const &x)\n");
  
  return Qnil;
}



/*
  Document-method: SiTaxi::BWSimStatsPaxRecordVector.reserve

  call-seq:
    reserve(n)

Reserve memory in the BWSimStatsPaxRecordVector for a number of elements.
*/
SWIGINTERN VALUE
_wrap_BWSimStatsPaxRecordVector_reserve(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWSimStatsPaxRecord > *arg1 = (std::vector< si_taxi::BWSimStatsPaxRecord > *) 0 ;
  std::vector< si_taxi::BWSimStatsPaxRecord >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord > *","reserve", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWSimStatsPaxRecord > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord >::size_type","reserve", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< si_taxi::BWSimStatsPaxRecord >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWSimStatsPaxRecordVector.capacity

  call-seq:
    capacity -> size_type

Reserved capacity of the BWSimStatsPaxRecordVector.
*/
SWIGINTERN VALUE
_wrap_BWSimStatsPaxRecordVector_capacity(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWSimStatsPaxRecord > *arg1 = (std::vector< si_taxi::BWSimStatsPaxRecord > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::BWSimStatsPaxRecord >::size_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord > const *","capacity", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWSimStatsPaxRecord > * >(argp1);
  {
    try {
      result = ((std::vector< si_taxi::BWSimStatsPaxRecord > const *)arg1)->capacity();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_std_vector_Sl_si_taxi_BWSimStatsPaxRecord_Sg_(std::vector< si_taxi::BWSimStatsPaxRecord > *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_seed_rng(int argc, VALUE *argv, VALUE self) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_unsigned_SS_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "unsigned int","seed_rng", 1, argv[0] ));
  } 
  arg1 = static_cast< unsigned int >(val1);
  {
    try {
      seed_rng(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_register_sigsegv_handler(int argc, VALUE *argv, VALUE self) {
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      si_taxi::register_sigsegv_handler();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SIZE_T_MAX_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(si_taxi::SIZE_T_MAX));
  return _val;
}


SWIGINTERN VALUE
_wrap_rng_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&si_taxi::rng), SWIGTYPE_p_boost__mt19937,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_rng_set(VALUE self, VALUE _val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_boost__mt19937,  0 );
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""si_taxi::rng""' of type '""boost::mt19937""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""si_taxi::rng""' of type '""boost::mt19937""'");
    } else {
      si_taxi::rng = *(reinterpret_cast< boost::mt19937 * >(argp));
    }
  }
  return _val;
fail:
  return Qnil;
}


swig_class SwigClassException;

SWIGINTERN VALUE
_wrap_new_Exception__SWIG_0(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "SiTaxi::Exception";
  si_taxi::Exception *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (si_taxi::Exception *)new si_taxi::Exception();
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Exception_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Exception_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_si_taxi__Exception);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Exception__SWIG_1(int argc, VALUE *argv, VALUE self) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  const char *classname SWIGUNUSED = "SiTaxi::Exception";
  si_taxi::Exception *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "char const *","si_taxi::Exception", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try {
      result = (si_taxi::Exception *)new si_taxi::Exception((char const *)arg1);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Exception(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Exception__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Exception__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "Exception.new", 
    "    Exception.new()\n"
    "    Exception.new(char const *what)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Exception_what(int argc, VALUE *argv, VALUE self) {
  si_taxi::Exception *arg1 = (si_taxi::Exception *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__Exception, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::Exception const *","what", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::Exception * >(argp1);
  {
    try {
      result = (char *)((si_taxi::Exception const *)arg1)->what();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_si_taxi_Exception(si_taxi::Exception *arg1) {
    delete arg1;
}

swig_class SwigClassError;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Error_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Error_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_si_taxi__Error);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Error(int argc, VALUE *argv, VALUE self) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  const char *classname SWIGUNUSED = "SiTaxi::Error";
  si_taxi::Error *result = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "char const *","si_taxi::Error", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","si_taxi::Error", 2, argv[1] ));
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_AsCharPtrAndSize(argv[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","si_taxi::Error", 3, argv[2] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","si_taxi::Error", 4, argv[3] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  {
    try {
      result = (si_taxi::Error *)new si_taxi::Error((char const *)arg1,arg2,(char const *)arg3,(char const *)arg4);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN void
free_si_taxi_Error(si_taxi::Error *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_Error_line(int argc, VALUE *argv, VALUE self) {
  si_taxi::Error *arg1 = (si_taxi::Error *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__Error, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::Error const *","line", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::Error * >(argp1);
  {
    try {
      result = (int)((si_taxi::Error const *)arg1)->line();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Error_file(int argc, VALUE *argv, VALUE self) {
  si_taxi::Error *arg1 = (si_taxi::Error *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__Error, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::Error const *","file", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::Error * >(argp1);
  {
    try {
      result = (std::string *) &((si_taxi::Error const *)arg1)->file();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Error_function(int argc, VALUE *argv, VALUE self) {
  si_taxi::Error *arg1 = (si_taxi::Error *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__Error, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::Error const *","function", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::Error * >(argp1);
  {
    try {
      result = (std::string *) &((si_taxi::Error const *)arg1)->function();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Error_stack_trace(int argc, VALUE *argv, VALUE self) {
  si_taxi::Error *arg1 = (si_taxi::Error *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__Error, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::Error const *","stack_trace", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::Error * >(argp1);
  {
    try {
      result = (std::string *) &((si_taxi::Error const *)arg1)->stack_trace();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


swig_class SwigClassEmpiricalSampler;

SWIGINTERN VALUE
_wrap_new_EmpiricalSampler__SWIG_0(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "SiTaxi::EmpiricalSampler";
  si_taxi::EmpiricalSampler *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (si_taxi::EmpiricalSampler *)new si_taxi::EmpiricalSampler();
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_EmpiricalSampler__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  double arg2 ;
  int res1 = SWIG_OLDOBJ ;
  double val2 ;
  int ecode2 = 0 ;
  const char *classname SWIGUNUSED = "SiTaxi::EmpiricalSampler";
  si_taxi::EmpiricalSampler *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res1 = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double,std::allocator< double > > const &","si_taxi::EmpiricalSampler", 1, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< double,std::allocator< double > > const &","si_taxi::EmpiricalSampler", 1, argv[0])); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","si_taxi::EmpiricalSampler", 2, argv[1] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (si_taxi::EmpiricalSampler *)new si_taxi::EmpiricalSampler((std::vector< double,std::allocator< double > > const &)*arg1,arg2);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return self;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_EmpiricalSampler_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_EmpiricalSampler_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_si_taxi__EmpiricalSampler);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_EmpiricalSampler__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  const char *classname SWIGUNUSED = "SiTaxi::EmpiricalSampler";
  si_taxi::EmpiricalSampler *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res1 = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double,std::allocator< double > > const &","si_taxi::EmpiricalSampler", 1, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< double,std::allocator< double > > const &","si_taxi::EmpiricalSampler", 1, argv[0])); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (si_taxi::EmpiricalSampler *)new si_taxi::EmpiricalSampler((std::vector< double,std::allocator< double > > const &)*arg1);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return self;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_EmpiricalSampler(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_EmpiricalSampler__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_EmpiricalSampler__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_EmpiricalSampler__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "EmpiricalSampler.new", 
    "    EmpiricalSampler.new()\n"
    "    EmpiricalSampler.new(std::vector< double,std::allocator< double > > const &cdf, double cdf_tol)\n"
    "    EmpiricalSampler.new(std::vector< double,std::allocator< double > > const &cdf)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_EmpiricalSampler_from_pmf__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  double arg2 ;
  int res1 = SWIG_OLDOBJ ;
  double val2 ;
  int ecode2 = 0 ;
  si_taxi::EmpiricalSampler result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res1 = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double,std::allocator< double > > const &","si_taxi::EmpiricalSampler::from_pmf", 1, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< double,std::allocator< double > > const &","si_taxi::EmpiricalSampler::from_pmf", 1, argv[0])); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","si_taxi::EmpiricalSampler::from_pmf", 2, argv[1] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = si_taxi::EmpiricalSampler::from_pmf((std::vector< double,std::allocator< double > > const &)*arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new si_taxi::EmpiricalSampler(static_cast< const si_taxi::EmpiricalSampler& >(result))), SWIGTYPE_p_si_taxi__EmpiricalSampler, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return vresult;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_EmpiricalSampler_from_pmf__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  si_taxi::EmpiricalSampler result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res1 = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< double,std::allocator< double > > const &","si_taxi::EmpiricalSampler::from_pmf", 1, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< double,std::allocator< double > > const &","si_taxi::EmpiricalSampler::from_pmf", 1, argv[0])); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = si_taxi::EmpiricalSampler::from_pmf((std::vector< double,std::allocator< double > > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new si_taxi::EmpiricalSampler(static_cast< const si_taxi::EmpiricalSampler& >(result))), SWIGTYPE_p_si_taxi__EmpiricalSampler, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return vresult;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return Qnil;
}


SWIGINTERN VALUE _wrap_EmpiricalSampler_from_pmf(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_EmpiricalSampler_from_pmf__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_EmpiricalSampler_from_pmf__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "EmpiricalSampler.from_pmf", 
    "    si_taxi::EmpiricalSampler EmpiricalSampler.from_pmf(std::vector< double,std::allocator< double > > const &pmf, double cdf_tol)\n"
    "    si_taxi::EmpiricalSampler EmpiricalSampler.from_pmf(std::vector< double,std::allocator< double > > const &pmf)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_EmpiricalSampler_sup(int argc, VALUE *argv, VALUE self) {
  si_taxi::EmpiricalSampler *arg1 = (si_taxi::EmpiricalSampler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__EmpiricalSampler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::EmpiricalSampler const *","sup", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::EmpiricalSampler * >(argp1);
  {
    try {
      result = ((si_taxi::EmpiricalSampler const *)arg1)->sup();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_EmpiricalSampler_pick(int argc, VALUE *argv, VALUE self) {
  si_taxi::EmpiricalSampler *arg1 = (si_taxi::EmpiricalSampler *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  size_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__EmpiricalSampler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::EmpiricalSampler const *","pick", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::EmpiricalSampler * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","pick", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = ((si_taxi::EmpiricalSampler const *)arg1)->pick(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_EmpiricalSampler_sample(int argc, VALUE *argv, VALUE self) {
  si_taxi::EmpiricalSampler *arg1 = (si_taxi::EmpiricalSampler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__EmpiricalSampler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::EmpiricalSampler const *","sample", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::EmpiricalSampler * >(argp1);
  {
    try {
      result = ((si_taxi::EmpiricalSampler const *)arg1)->sample();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_si_taxi_EmpiricalSampler(si_taxi::EmpiricalSampler *arg1) {
    delete arg1;
}

swig_class SwigClassNaturalHistogram;

SWIGINTERN VALUE
_wrap_NaturalHistogram_frequency_set(int argc, VALUE *argv, VALUE self) {
  si_taxi::NaturalHistogram *arg1 = (si_taxi::NaturalHistogram *) 0 ;
  std::vector< size_t,std::allocator< size_t > > *arg2 = (std::vector< size_t,std::allocator< size_t > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__NaturalHistogram, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::NaturalHistogram *","frequency", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::NaturalHistogram * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< size_t,std::allocator< size_t > > *","frequency", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< std::vector< size_t,std::allocator< size_t > > * >(argp2);
  if (arg1) (arg1)->frequency = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NaturalHistogram_frequency_get(int argc, VALUE *argv, VALUE self) {
  si_taxi::NaturalHistogram *arg1 = (si_taxi::NaturalHistogram *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< size_t,std::allocator< size_t > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__NaturalHistogram, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::NaturalHistogram *","frequency", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::NaturalHistogram * >(argp1);
  result = (std::vector< size_t,std::allocator< size_t > > *)& ((arg1)->frequency);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NaturalHistogram_increment(int argc, VALUE *argv, VALUE self) {
  si_taxi::NaturalHistogram *arg1 = (si_taxi::NaturalHistogram *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__NaturalHistogram, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::NaturalHistogram *","increment", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::NaturalHistogram * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","increment", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      (arg1)->increment(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NaturalHistogram_accumulate(int argc, VALUE *argv, VALUE self) {
  si_taxi::NaturalHistogram *arg1 = (si_taxi::NaturalHistogram *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__NaturalHistogram, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::NaturalHistogram *","accumulate", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::NaturalHistogram * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","accumulate", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "size_t","accumulate", 3, argv[1] ));
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      (arg1)->accumulate(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::NaturalHistogram.clear

  call-seq:
    clear

Clear NaturalHistogram contents.
*/
SWIGINTERN VALUE
_wrap_NaturalHistogram_clear(int argc, VALUE *argv, VALUE self) {
  si_taxi::NaturalHistogram *arg1 = (si_taxi::NaturalHistogram *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__NaturalHistogram, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::NaturalHistogram *","clear", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::NaturalHistogram * >(argp1);
  {
    try {
      (arg1)->clear();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NaturalHistogram_count(int argc, VALUE *argv, VALUE self) {
  si_taxi::NaturalHistogram *arg1 = (si_taxi::NaturalHistogram *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint64_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__NaturalHistogram, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::NaturalHistogram const *","count", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::NaturalHistogram * >(argp1);
  {
    try {
      result = ((si_taxi::NaturalHistogram const *)arg1)->count();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NaturalHistogram_mean(int argc, VALUE *argv, VALUE self) {
  si_taxi::NaturalHistogram *arg1 = (si_taxi::NaturalHistogram *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__NaturalHistogram, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::NaturalHistogram const *","mean", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::NaturalHistogram * >(argp1);
  {
    try {
      result = (double)((si_taxi::NaturalHistogram const *)arg1)->mean();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NaturalHistogram_central_moment(int argc, VALUE *argv, VALUE self) {
  si_taxi::NaturalHistogram *arg1 = (si_taxi::NaturalHistogram *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__NaturalHistogram, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::NaturalHistogram const *","central_moment", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::NaturalHistogram * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","central_moment", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      result = (double)((si_taxi::NaturalHistogram const *)arg1)->central_moment(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_NaturalHistogram_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_NaturalHistogram_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_si_taxi__NaturalHistogram);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_NaturalHistogram(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "SiTaxi::NaturalHistogram";
  si_taxi::NaturalHistogram *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (si_taxi::NaturalHistogram *)new si_taxi::NaturalHistogram();
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_si_taxi_NaturalHistogram(si_taxi::NaturalHistogram *arg1) {
    delete arg1;
}

swig_class SwigClassODHistogram;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_ODHistogram_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_ODHistogram_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_si_taxi__ODHistogram);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_ODHistogram(int argc, VALUE *argv, VALUE self) {
  size_t arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  const char *classname SWIGUNUSED = "SiTaxi::ODHistogram";
  si_taxi::ODHistogram *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "size_t","si_taxi::ODHistogram", 1, argv[0] ));
  } 
  arg1 = static_cast< size_t >(val1);
  {
    try {
      result = (si_taxi::ODHistogram *)new si_taxi::ODHistogram(arg1);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ODHistogram_num_stations(int argc, VALUE *argv, VALUE self) {
  si_taxi::ODHistogram *arg1 = (si_taxi::ODHistogram *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__ODHistogram, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::ODHistogram const *","num_stations", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::ODHistogram * >(argp1);
  {
    try {
      result = ((si_taxi::ODHistogram const *)arg1)->num_stations();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ODHistogram_increment(int argc, VALUE *argv, VALUE self) {
  si_taxi::ODHistogram *arg1 = (si_taxi::ODHistogram *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__ODHistogram, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::ODHistogram *","increment", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::ODHistogram * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","increment", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "size_t","increment", 3, argv[1] ));
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      (arg1)->increment(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ODHistogram_accumulate(int argc, VALUE *argv, VALUE self) {
  si_taxi::ODHistogram *arg1 = (si_taxi::ODHistogram *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__ODHistogram, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::ODHistogram *","accumulate", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::ODHistogram * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","accumulate", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "size_t","accumulate", 3, argv[1] ));
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","accumulate", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      (arg1)->accumulate(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::ODHistogram.clear

  call-seq:
    clear

Clear ODHistogram contents.
*/
SWIGINTERN VALUE
_wrap_ODHistogram_clear(int argc, VALUE *argv, VALUE self) {
  si_taxi::ODHistogram *arg1 = (si_taxi::ODHistogram *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__ODHistogram, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::ODHistogram *","clear", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::ODHistogram * >(argp1);
  {
    try {
      (arg1)->clear();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ODHistogram___call__(int argc, VALUE *argv, VALUE self) {
  si_taxi::ODHistogram *arg1 = (si_taxi::ODHistogram *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__ODHistogram, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::ODHistogram const *","operator ()", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::ODHistogram * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","operator ()", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "size_t","operator ()", 3, argv[1] ));
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      result = (int)((si_taxi::ODHistogram const *)arg1)->operator ()(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ODHistogram_max_weight(int argc, VALUE *argv, VALUE self) {
  si_taxi::ODHistogram *arg1 = (si_taxi::ODHistogram *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__ODHistogram, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::ODHistogram const *","max_weight", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::ODHistogram * >(argp1);
  {
    try {
      result = (int)((si_taxi::ODHistogram const *)arg1)->max_weight();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ODHistogram_max_weight_in_row(int argc, VALUE *argv, VALUE self) {
  si_taxi::ODHistogram *arg1 = (si_taxi::ODHistogram *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__ODHistogram, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::ODHistogram const *","max_weight_in_row", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::ODHistogram * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","max_weight_in_row", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      result = (int)((si_taxi::ODHistogram const *)arg1)->max_weight_in_row(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ODHistogram_od_matrix(int argc, VALUE *argv, VALUE self) {
  si_taxi::ODHistogram *arg1 = (si_taxi::ODHistogram *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::numeric::ublas::matrix< int > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__ODHistogram, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::ODHistogram const *","od_matrix", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::ODHistogram * >(argp1);
  {
    try {
      result = (boost::numeric::ublas::matrix< int > *) &((si_taxi::ODHistogram const *)arg1)->od_matrix();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    int i, j, rows, cols;
    VALUE row;
    
    rows = (int) result->size1();
    cols = (int) result->size2();
    vresult = rb_ary_new2(rows);
    for (i = 0; i < rows; ++i) {
      row = rb_ary_new2(cols);
      rb_ary_push(vresult, row);
      for (j = 0; j < cols; ++j) {
        rb_ary_push(row, INT2NUM((*result)(i, j)));
      }
    }
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_si_taxi_ODHistogram(si_taxi::ODHistogram *arg1) {
    delete arg1;
}


/*
  Document-method: SiTaxi::si_taxi.<<

  call-seq:
    <<(os, hist) -> std::ostream

Left shifting or appending operator.
*/
SWIGINTERN VALUE
_wrap___lshift__(int argc, VALUE *argv, VALUE self) {
  std::ostream *arg1 = 0 ;
  si_taxi::ODHistogram *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::ostream *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::ostream &","si_taxi::operator <<", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::ostream &","si_taxi::operator <<", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_si_taxi__ODHistogram,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "si_taxi::ODHistogram const &","si_taxi::operator <<", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "si_taxi::ODHistogram const &","si_taxi::operator <<", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< si_taxi::ODHistogram * >(argp2);
  {
    try {
      result = (std::ostream *) &si_taxi::operator <<(*arg1,(si_taxi::ODHistogram const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


swig_class SwigClassODMatrixWrapper;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_ODMatrixWrapper_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_ODMatrixWrapper_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_si_taxi__ODMatrixWrapper);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_ODMatrixWrapper(int argc, VALUE *argv, VALUE self) {
  boost::numeric::ublas::matrix< double > *arg1 = 0 ;
  const char *classname SWIGUNUSED = "SiTaxi::ODMatrixWrapper";
  si_taxi::ODMatrixWrapper *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    int i, j, rows, cols;
    VALUE row;
    
    if (!rb_obj_is_kind_of(argv[0], rb_cArray)) {
      SWIG_exception_fail(SWIG_ERROR, "not an array");
    }
    
    rows = RARRAY_LEN(argv[0]);
    if (rows > 0) {
      cols = RARRAY_LEN(rb_ary_entry(argv[0], 0));
    } else {
      cols = 0;
    }
    
    arg1 = new boost::numeric::ublas::matrix<double>(rows, cols);
    for (i = 0; i < rows; ++i) {
      row = rb_ary_entry(argv[0], i);
      if (RARRAY_LEN(row) != cols) {
        SWIG_exception_fail(SWIG_ERROR, "ragged array not allowed");
      }
      for (j = 0; j < cols; ++j) {
        (*arg1)(i, j) = NUM2DBL(rb_ary_entry(row, j));
      }
    }
  }
  {
    try {
      result = (si_taxi::ODMatrixWrapper *)new si_taxi::ODMatrixWrapper((boost::numeric::ublas::matrix< double > const &)*arg1);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    delete arg1;
  }
  return self;
fail:
  {
    delete arg1;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ODMatrixWrapper_num_stations(int argc, VALUE *argv, VALUE self) {
  si_taxi::ODMatrixWrapper *arg1 = (si_taxi::ODMatrixWrapper *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__ODMatrixWrapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::ODMatrixWrapper const *","num_stations", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::ODMatrixWrapper * >(argp1);
  {
    try {
      result = ((si_taxi::ODMatrixWrapper const *)arg1)->num_stations();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ODMatrixWrapper_expected_interarrival_time(int argc, VALUE *argv, VALUE self) {
  si_taxi::ODMatrixWrapper *arg1 = (si_taxi::ODMatrixWrapper *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__ODMatrixWrapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::ODMatrixWrapper const *","expected_interarrival_time", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::ODMatrixWrapper * >(argp1);
  {
    try {
      result = (double)((si_taxi::ODMatrixWrapper const *)arg1)->expected_interarrival_time();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ODMatrixWrapper_od_matrix(int argc, VALUE *argv, VALUE self) {
  si_taxi::ODMatrixWrapper *arg1 = (si_taxi::ODMatrixWrapper *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::numeric::ublas::matrix< double > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__ODMatrixWrapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::ODMatrixWrapper const *","od_matrix", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::ODMatrixWrapper * >(argp1);
  {
    try {
      result = (boost::numeric::ublas::matrix< double > *) &((si_taxi::ODMatrixWrapper const *)arg1)->od_matrix();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    int i, j, rows, cols;
    VALUE row;
    
    rows = (int) result->size1();
    cols = (int) result->size2();
    vresult = rb_ary_new2(rows);
    for (i = 0; i < rows; ++i) {
      row = rb_ary_new2(cols);
      rb_ary_push(vresult, row);
      for (j = 0; j < cols; ++j) {
        rb_ary_push(row, rb_float_new((*result)(i, j)));
      }
    }
  }
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::ODMatrixWrapper.at

  call-seq:
    at(i, j) -> double

Return element at a certain index.
*/
SWIGINTERN VALUE
_wrap_ODMatrixWrapper_at(int argc, VALUE *argv, VALUE self) {
  si_taxi::ODMatrixWrapper *arg1 = (si_taxi::ODMatrixWrapper *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__ODMatrixWrapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::ODMatrixWrapper const *","at", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::ODMatrixWrapper * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","at", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "size_t","at", 3, argv[1] ));
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      result = (double)((si_taxi::ODMatrixWrapper const *)arg1)->at(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ODMatrixWrapper_trip_prob(int argc, VALUE *argv, VALUE self) {
  si_taxi::ODMatrixWrapper *arg1 = (si_taxi::ODMatrixWrapper *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__ODMatrixWrapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::ODMatrixWrapper const *","trip_prob", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::ODMatrixWrapper * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","trip_prob", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "size_t","trip_prob", 3, argv[1] ));
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      result = (double)((si_taxi::ODMatrixWrapper const *)arg1)->trip_prob(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ODMatrixWrapper_trip_prob_matrix(int argc, VALUE *argv, VALUE self) {
  si_taxi::ODMatrixWrapper *arg1 = (si_taxi::ODMatrixWrapper *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::numeric::ublas::matrix< double > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__ODMatrixWrapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::ODMatrixWrapper const *","trip_prob_matrix", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::ODMatrixWrapper * >(argp1);
  {
    try {
      result = (boost::numeric::ublas::matrix< double > *) &((si_taxi::ODMatrixWrapper const *)arg1)->trip_prob_matrix();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    int i, j, rows, cols;
    VALUE row;
    
    rows = (int) result->size1();
    cols = (int) result->size2();
    vresult = rb_ary_new2(rows);
    for (i = 0; i < rows; ++i) {
      row = rb_ary_new2(cols);
      rb_ary_push(vresult, row);
      for (j = 0; j < cols; ++j) {
        rb_ary_push(row, rb_float_new((*result)(i, j)));
      }
    }
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ODMatrixWrapper_rate_from(int argc, VALUE *argv, VALUE self) {
  si_taxi::ODMatrixWrapper *arg1 = (si_taxi::ODMatrixWrapper *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__ODMatrixWrapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::ODMatrixWrapper const *","rate_from", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::ODMatrixWrapper * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","rate_from", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      result = (double)((si_taxi::ODMatrixWrapper const *)arg1)->rate_from(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ODMatrixWrapper_rate_to(int argc, VALUE *argv, VALUE self) {
  si_taxi::ODMatrixWrapper *arg1 = (si_taxi::ODMatrixWrapper *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__ODMatrixWrapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::ODMatrixWrapper const *","rate_to", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::ODMatrixWrapper * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","rate_to", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      result = (double)((si_taxi::ODMatrixWrapper const *)arg1)->rate_to(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ODMatrixWrapper_poisson_origin_pmf(int argc, VALUE *argv, VALUE self) {
  si_taxi::ODMatrixWrapper *arg1 = (si_taxi::ODMatrixWrapper *) 0 ;
  size_t arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__ODMatrixWrapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::ODMatrixWrapper const *","poisson_origin_pmf", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::ODMatrixWrapper * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","poisson_origin_pmf", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","poisson_origin_pmf", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (double)((si_taxi::ODMatrixWrapper const *)arg1)->poisson_origin_pmf(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ODMatrixWrapper_poisson_trip_pmf(int argc, VALUE *argv, VALUE self) {
  si_taxi::ODMatrixWrapper *arg1 = (si_taxi::ODMatrixWrapper *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__ODMatrixWrapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::ODMatrixWrapper const *","poisson_trip_pmf", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::ODMatrixWrapper * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","poisson_trip_pmf", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "size_t","poisson_trip_pmf", 3, argv[1] ));
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","poisson_trip_pmf", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (double)((si_taxi::ODMatrixWrapper const *)arg1)->poisson_trip_pmf(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ODMatrixWrapper_poisson_origin_cdf_complement(int argc, VALUE *argv, VALUE self) {
  si_taxi::ODMatrixWrapper *arg1 = (si_taxi::ODMatrixWrapper *) 0 ;
  size_t arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__ODMatrixWrapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::ODMatrixWrapper const *","poisson_origin_cdf_complement", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::ODMatrixWrapper * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","poisson_origin_cdf_complement", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","poisson_origin_cdf_complement", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (double)((si_taxi::ODMatrixWrapper const *)arg1)->poisson_origin_cdf_complement(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ODMatrixWrapper_poisson_trip_cdf_complement(int argc, VALUE *argv, VALUE self) {
  si_taxi::ODMatrixWrapper *arg1 = (si_taxi::ODMatrixWrapper *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__ODMatrixWrapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::ODMatrixWrapper const *","poisson_trip_cdf_complement", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::ODMatrixWrapper * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","poisson_trip_cdf_complement", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "size_t","poisson_trip_cdf_complement", 3, argv[1] ));
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","poisson_trip_cdf_complement", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (double)((si_taxi::ODMatrixWrapper const *)arg1)->poisson_trip_cdf_complement(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ODMatrixWrapper_sample(int argc, VALUE *argv, VALUE self) {
  si_taxi::ODMatrixWrapper *arg1 = (si_taxi::ODMatrixWrapper *) 0 ;
  size_t *arg2 = 0 ;
  size_t *arg3 = 0 ;
  double *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t temp2 ;
  int res2 = SWIG_TMPOBJ ;
  size_t temp3 ;
  int res3 = SWIG_TMPOBJ ;
  double temp4 ;
  int res4 = SWIG_TMPOBJ ;
  VALUE vresult = Qnil;
  
  arg2 = &temp2;
  arg3 = &temp3;
  arg4 = &temp4;
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__ODMatrixWrapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::ODMatrixWrapper const *","sample", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::ODMatrixWrapper * >(argp1);
  {
    try {
      ((si_taxi::ODMatrixWrapper const *)arg1)->sample(*arg2,*arg3,*arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = rb_ary_new();
  if (SWIG_IsTmpObj(res2)) {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_From_size_t((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_size_t, new_flags));
  }
  if (SWIG_IsTmpObj(res3)) {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_From_size_t((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_size_t, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_From_double((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_double, new_flags));
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_si_taxi_ODMatrixWrapper(si_taxi::ODMatrixWrapper *arg1) {
    delete arg1;
}

swig_class SwigClassBWVehicle;

SWIGINTERN VALUE
_wrap_BWVehicle_origin_set(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWVehicle *arg1 = (si_taxi::BWVehicle *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWVehicle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWVehicle *","origin", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWVehicle * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","origin", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  if (arg1) (arg1)->origin = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWVehicle_origin_get(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWVehicle *arg1 = (si_taxi::BWVehicle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWVehicle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWVehicle *","origin", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWVehicle * >(argp1);
  result =  ((arg1)->origin);
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWVehicle_destin_set(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWVehicle *arg1 = (si_taxi::BWVehicle *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWVehicle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWVehicle *","destin", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWVehicle * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","destin", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  if (arg1) (arg1)->destin = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWVehicle_destin_get(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWVehicle *arg1 = (si_taxi::BWVehicle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWVehicle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWVehicle *","destin", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWVehicle * >(argp1);
  result =  ((arg1)->destin);
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWVehicle_arrive_set(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWVehicle *arg1 = (si_taxi::BWVehicle *) 0 ;
  si_taxi::BWTime arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWVehicle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWVehicle *","arrive", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWVehicle * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "si_taxi::BWTime","arrive", 2, argv[0] ));
  } 
  arg2 = static_cast< si_taxi::BWTime >(val2);
  if (arg1) (arg1)->arrive = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWVehicle_arrive_get(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWVehicle *arg1 = (si_taxi::BWVehicle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  si_taxi::BWTime result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWVehicle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWVehicle *","arrive", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWVehicle * >(argp1);
  result = (si_taxi::BWTime) ((arg1)->arrive);
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_BWVehicle__SWIG_0(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "SiTaxi::BWVehicle";
  si_taxi::BWVehicle *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (si_taxi::BWVehicle *)new si_taxi::BWVehicle();
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_BWVehicle__SWIG_1(int argc, VALUE *argv, VALUE self) {
  size_t arg1 ;
  size_t arg2 ;
  si_taxi::BWTime arg3 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  const char *classname SWIGUNUSED = "SiTaxi::BWVehicle";
  si_taxi::BWVehicle *result = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "size_t","si_taxi::BWVehicle", 1, argv[0] ));
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","si_taxi::BWVehicle", 2, argv[1] ));
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_long(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "si_taxi::BWTime","si_taxi::BWVehicle", 3, argv[2] ));
  } 
  arg3 = static_cast< si_taxi::BWTime >(val3);
  {
    try {
      result = (si_taxi::BWVehicle *)new si_taxi::BWVehicle(arg1,arg2,arg3);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_BWVehicle_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_BWVehicle_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_si_taxi__BWVehicle);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_BWVehicle__SWIG_2(int argc, VALUE *argv, VALUE self) {
  size_t arg1 ;
  si_taxi::BWTime arg2 ;
  size_t val1 ;
  int ecode1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  const char *classname SWIGUNUSED = "SiTaxi::BWVehicle";
  si_taxi::BWVehicle *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "size_t","si_taxi::BWVehicle", 1, argv[0] ));
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_long(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "si_taxi::BWTime","si_taxi::BWVehicle", 2, argv[1] ));
  } 
  arg2 = static_cast< si_taxi::BWTime >(val2);
  {
    try {
      result = (si_taxi::BWVehicle *)new si_taxi::BWVehicle(arg1,arg2);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_BWVehicle(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_BWVehicle__SWIG_0(nargs, args, self);
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_BWVehicle__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_BWVehicle__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "BWVehicle.new", 
    "    BWVehicle.new()\n"
    "    BWVehicle.new(size_t origin, size_t destin, si_taxi::BWTime arrive)\n"
    "    BWVehicle.new(size_t destin, si_taxi::BWTime arrive)\n");
  
  return Qnil;
}


SWIGINTERN void
free_si_taxi_BWVehicle(si_taxi::BWVehicle *arg1) {
    delete arg1;
}

swig_class SwigClassBWPax;

SWIGINTERN VALUE
_wrap_BWPax_origin_set(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWPax *arg1 = (si_taxi::BWPax *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWPax, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWPax *","origin", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWPax * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","origin", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  if (arg1) (arg1)->origin = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWPax_origin_get(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWPax *arg1 = (si_taxi::BWPax *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWPax, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWPax *","origin", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWPax * >(argp1);
  result =  ((arg1)->origin);
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWPax_destin_set(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWPax *arg1 = (si_taxi::BWPax *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWPax, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWPax *","destin", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWPax * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","destin", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  if (arg1) (arg1)->destin = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWPax_destin_get(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWPax *arg1 = (si_taxi::BWPax *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWPax, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWPax *","destin", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWPax * >(argp1);
  result =  ((arg1)->destin);
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWPax_arrive_set(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWPax *arg1 = (si_taxi::BWPax *) 0 ;
  si_taxi::BWTime arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWPax, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWPax *","arrive", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWPax * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "si_taxi::BWTime","arrive", 2, argv[0] ));
  } 
  arg2 = static_cast< si_taxi::BWTime >(val2);
  if (arg1) (arg1)->arrive = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWPax_arrive_get(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWPax *arg1 = (si_taxi::BWPax *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  si_taxi::BWTime result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWPax, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWPax *","arrive", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWPax * >(argp1);
  result = (si_taxi::BWTime) ((arg1)->arrive);
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_BWPax__SWIG_0(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "SiTaxi::BWPax";
  si_taxi::BWPax *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (si_taxi::BWPax *)new si_taxi::BWPax();
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_BWPax_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_BWPax_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_si_taxi__BWPax);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_BWPax__SWIG_1(int argc, VALUE *argv, VALUE self) {
  size_t arg1 ;
  size_t arg2 ;
  si_taxi::BWTime arg3 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  const char *classname SWIGUNUSED = "SiTaxi::BWPax";
  si_taxi::BWPax *result = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "size_t","si_taxi::BWPax", 1, argv[0] ));
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","si_taxi::BWPax", 2, argv[1] ));
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_long(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "si_taxi::BWTime","si_taxi::BWPax", 3, argv[2] ));
  } 
  arg3 = static_cast< si_taxi::BWTime >(val3);
  {
    try {
      result = (si_taxi::BWPax *)new si_taxi::BWPax(arg1,arg2,arg3);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_BWPax(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_BWPax__SWIG_0(nargs, args, self);
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_BWPax__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "BWPax.new", 
    "    BWPax.new()\n"
    "    BWPax.new(size_t origin, size_t destin, si_taxi::BWTime arrive)\n");
  
  return Qnil;
}


SWIGINTERN void
free_si_taxi_BWPax(si_taxi::BWPax *arg1) {
    delete arg1;
}

swig_class SwigClassBWPaxStream;

SWIGINTERN void
free_si_taxi_BWPaxStream(si_taxi::BWPaxStream *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_BWPaxStream_next_pax(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWPaxStream *arg1 = (si_taxi::BWPaxStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  si_taxi::BWPax result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWPaxStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWPaxStream *","next_pax", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWPaxStream * >(argp1);
  {
    try {
      result = (arg1)->next_pax();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new si_taxi::BWPax(static_cast< const si_taxi::BWPax& >(result))), SWIGTYPE_p_si_taxi__BWPax, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWPaxStream_reset(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWPaxStream *arg1 = (si_taxi::BWPaxStream *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWPaxStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWPaxStream *","reset", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWPaxStream * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","reset", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->reset(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


swig_class SwigClassBWSim;

SWIGINTERN VALUE
_wrap_BWSim_now_set(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSim *arg1 = (si_taxi::BWSim *) 0 ;
  si_taxi::BWTime arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSim *","now", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSim * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "si_taxi::BWTime","now", 2, argv[0] ));
  } 
  arg2 = static_cast< si_taxi::BWTime >(val2);
  if (arg1) (arg1)->now = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSim_now_get(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSim *arg1 = (si_taxi::BWSim *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  si_taxi::BWTime result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSim *","now", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSim * >(argp1);
  result = (si_taxi::BWTime) ((arg1)->now);
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSim_strobe_set(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSim *arg1 = (si_taxi::BWSim *) 0 ;
  si_taxi::BWTime arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSim *","strobe", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSim * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "si_taxi::BWTime","strobe", 2, argv[0] ));
  } 
  arg2 = static_cast< si_taxi::BWTime >(val2);
  if (arg1) (arg1)->strobe = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSim_strobe_get(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSim *arg1 = (si_taxi::BWSim *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  si_taxi::BWTime result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSim *","strobe", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSim * >(argp1);
  result = (si_taxi::BWTime) ((arg1)->strobe);
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSim_reactive_set(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSim *arg1 = (si_taxi::BWSim *) 0 ;
  si_taxi::BWReactiveHandler *arg2 = (si_taxi::BWReactiveHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSim *","reactive", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSim * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_si_taxi__BWReactiveHandler, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "si_taxi::BWReactiveHandler *","reactive", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< si_taxi::BWReactiveHandler * >(argp2);
  if (arg1) (arg1)->reactive = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSim_reactive_get(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSim *arg1 = (si_taxi::BWSim *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  si_taxi::BWReactiveHandler *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSim *","reactive", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSim * >(argp1);
  result = (si_taxi::BWReactiveHandler *) ((arg1)->reactive);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_si_taxi__BWReactiveHandler, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSim_proactive_set(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSim *arg1 = (si_taxi::BWSim *) 0 ;
  si_taxi::BWProactiveHandler *arg2 = (si_taxi::BWProactiveHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSim *","proactive", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSim * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_si_taxi__BWProactiveHandler, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "si_taxi::BWProactiveHandler *","proactive", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< si_taxi::BWProactiveHandler * >(argp2);
  if (arg1) (arg1)->proactive = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSim_proactive_get(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSim *arg1 = (si_taxi::BWSim *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  si_taxi::BWProactiveHandler *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSim *","proactive", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSim * >(argp1);
  result = (si_taxi::BWProactiveHandler *) ((arg1)->proactive);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_si_taxi__BWProactiveHandler, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSim_vehs_set(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSim *arg1 = (si_taxi::BWSim *) 0 ;
  std::vector< si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > > *arg2 = (std::vector< si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSim *","vehs", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSim * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > > *","vehs", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< std::vector< si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > > * >(argp2);
  if (arg1) (arg1)->vehs = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSim_vehs_get(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSim *arg1 = (si_taxi::BWSim *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSim *","vehs", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSim * >(argp1);
  result = (std::vector< si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > > *)& ((arg1)->vehs);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSim_trip_time_set(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSim *arg1 = (si_taxi::BWSim *) 0 ;
  boost::numeric::ublas::matrix< int > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSim *","trip_time", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSim * >(argp1);
  {
    int i, j, rows, cols;
    VALUE row;
    
    if (!rb_obj_is_kind_of(argv[0], rb_cArray)) {
      SWIG_exception_fail(SWIG_ERROR, "not an array");
    }
    
    rows = RARRAY_LEN(argv[0]);
    if (rows > 0) {
      cols = RARRAY_LEN(rb_ary_entry(argv[0], 0));
    } else {
      cols = 0;
    }
    
    arg2 = boost::numeric::ublas::matrix<int>(rows, cols);
    for (i = 0; i < rows; ++i) {
      row = rb_ary_entry(argv[0], i);
      if (RARRAY_LEN(row) != cols) {
        SWIG_exception_fail(SWIG_ERROR, "ragged array not allowed");
      }
      for (j = 0; j < cols; ++j) {
        arg2(i, j) = NUM2INT(rb_ary_entry(row, j));
      }
    }
  }
  if (arg1) (arg1)->trip_time = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSim_trip_time_get(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSim *arg1 = (si_taxi::BWSim *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::numeric::ublas::matrix< int > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSim *","trip_time", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSim * >(argp1);
  result =  ((arg1)->trip_time);
  {
    int i, j, rows, cols;
    VALUE row;
    
    rows = (int) (&result)->size1();
    cols = (int) (&result)->size2();
    vresult = rb_ary_new2(rows);
    for (i = 0; i < rows; ++i) {
      row = rb_ary_new2(cols);
      rb_ary_push(vresult, row);
      for (j = 0; j < cols; ++j) {
        rb_ary_push(row, INT2NUM(result(i, j)));
      }
    }
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSim_stats_set(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSim *arg1 = (si_taxi::BWSim *) 0 ;
  si_taxi::BWSimStats *arg2 = (si_taxi::BWSimStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSim *","stats", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSim * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_si_taxi__BWSimStats, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "si_taxi::BWSimStats *","stats", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< si_taxi::BWSimStats * >(argp2);
  if (arg1) (arg1)->stats = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSim_stats_get(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSim *arg1 = (si_taxi::BWSim *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  si_taxi::BWSimStats *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSim *","stats", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSim * >(argp1);
  result = (si_taxi::BWSimStats *) ((arg1)->stats);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_si_taxi__BWSimStats, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_BWSim_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_BWSim_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_si_taxi__BWSim);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_BWSim(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "SiTaxi::BWSim";
  si_taxi::BWSim *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (si_taxi::BWSim *)new si_taxi::BWSim();
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSim_num_stations(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSim *arg1 = (si_taxi::BWSim *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSim const *","num_stations", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSim * >(argp1);
  {
    try {
      result = ((si_taxi::BWSim const *)arg1)->num_stations();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSim_init(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSim *arg1 = (si_taxi::BWSim *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSim *","init", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSim * >(argp1);
  {
    try {
      (arg1)->init();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSim_add_vehicles_in_turn__SWIG_0(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSim *arg1 = (si_taxi::BWSim *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSim *","add_vehicles_in_turn", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSim * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","add_vehicles_in_turn", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "size_t","add_vehicles_in_turn", 3, argv[1] ));
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      (arg1)->add_vehicles_in_turn(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSim_add_vehicles_in_turn__SWIG_1(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSim *arg1 = (si_taxi::BWSim *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSim *","add_vehicles_in_turn", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSim * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","add_vehicles_in_turn", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      (arg1)->add_vehicles_in_turn(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_BWSim_add_vehicles_in_turn(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_si_taxi__BWSim, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BWSim_add_vehicles_in_turn__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_si_taxi__BWSim, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BWSim_add_vehicles_in_turn__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "BWSim.add_vehicles_in_turn", 
    "    void BWSim.add_vehicles_in_turn(size_t num_veh, size_t station)\n"
    "    void BWSim.add_vehicles_in_turn(size_t num_veh)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSim_park_vehicles_in_turn__SWIG_0(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSim *arg1 = (si_taxi::BWSim *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSim *","park_vehicles_in_turn", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSim * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","park_vehicles_in_turn", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      (arg1)->park_vehicles_in_turn(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSim_park_vehicles_in_turn__SWIG_1(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSim *arg1 = (si_taxi::BWSim *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSim *","park_vehicles_in_turn", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSim * >(argp1);
  {
    try {
      (arg1)->park_vehicles_in_turn();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_BWSim_park_vehicles_in_turn(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_si_taxi__BWSim, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_BWSim_park_vehicles_in_turn__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_si_taxi__BWSim, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BWSim_park_vehicles_in_turn__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "BWSim.park_vehicles_in_turn", 
    "    void BWSim.park_vehicles_in_turn(size_t station)\n"
    "    void BWSim.park_vehicles_in_turn()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSim_run_to(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSim *arg1 = (si_taxi::BWSim *) 0 ;
  si_taxi::BWTime arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSim *","run_to", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSim * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "si_taxi::BWTime","run_to", 2, argv[0] ));
  } 
  arg2 = static_cast< si_taxi::BWTime >(val2);
  {
    try {
      (arg1)->run_to(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSim_handle_pax(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSim *arg1 = (si_taxi::BWSim *) 0 ;
  si_taxi::BWPax *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSim *","handle_pax", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSim * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_si_taxi__BWPax,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "si_taxi::BWPax const &","handle_pax", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "si_taxi::BWPax const &","handle_pax", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< si_taxi::BWPax * >(argp2);
  {
    try {
      (arg1)->handle_pax((si_taxi::BWPax const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSim_handle_pax_stream(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSim *arg1 = (si_taxi::BWSim *) 0 ;
  size_t arg2 ;
  si_taxi::BWPaxStream *arg3 = (si_taxi::BWPaxStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSim *","handle_pax_stream", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSim * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","handle_pax_stream", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_si_taxi__BWPaxStream, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "si_taxi::BWPaxStream *","handle_pax_stream", 3, argv[1] )); 
  }
  arg3 = reinterpret_cast< si_taxi::BWPaxStream * >(argp3);
  {
    try {
      (arg1)->handle_pax_stream(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSim_move_empty(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSim *arg1 = (si_taxi::BWSim *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSim *","move_empty", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSim * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","move_empty", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "size_t","move_empty", 3, argv[1] ));
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      (arg1)->move_empty(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSim_move_empty_od(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSim *arg1 = (si_taxi::BWSim *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSim *","move_empty_od", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSim * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","move_empty_od", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "size_t","move_empty_od", 3, argv[1] ));
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      result = (arg1)->move_empty_od(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSim_serve_pax(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSim *arg1 = (si_taxi::BWSim *) 0 ;
  size_t arg2 ;
  si_taxi::BWPax *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSim *","serve_pax", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSim * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","serve_pax", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_si_taxi__BWPax,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "si_taxi::BWPax const &","serve_pax", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "si_taxi::BWPax const &","serve_pax", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< si_taxi::BWPax * >(argp3);
  {
    try {
      (arg1)->serve_pax(arg2,(si_taxi::BWPax const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSim_num_vehicles_inbound(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSim *arg1 = (si_taxi::BWSim *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSim const *","num_vehicles_inbound", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSim * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","num_vehicles_inbound", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      result = (int)((si_taxi::BWSim const *)arg1)->num_vehicles_inbound(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSim_num_vehicles_immediately_inbound(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSim *arg1 = (si_taxi::BWSim *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSim const *","num_vehicles_immediately_inbound", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSim * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","num_vehicles_immediately_inbound", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      result = (int)((si_taxi::BWSim const *)arg1)->num_vehicles_immediately_inbound(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSim_num_vehicles_idle_by(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSim *arg1 = (si_taxi::BWSim *) 0 ;
  size_t arg2 ;
  si_taxi::BWTime arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSim const *","num_vehicles_idle_by", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSim * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","num_vehicles_idle_by", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "si_taxi::BWTime","num_vehicles_idle_by", 3, argv[1] ));
  } 
  arg3 = static_cast< si_taxi::BWTime >(val3);
  {
    try {
      result = (int)((si_taxi::BWSim const *)arg1)->num_vehicles_idle_by(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSim_idle_veh_at(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSim *arg1 = (si_taxi::BWSim *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSim const *","idle_veh_at", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSim * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","idle_veh_at", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      result = ((si_taxi::BWSim const *)arg1)->idle_veh_at(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSim_count_idle_vehs(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSim *arg1 = (si_taxi::BWSim *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSim const *","count_idle_vehs", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSim * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< int,std::allocator< int > > &","count_idle_vehs", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< int,std::allocator< int > > &","count_idle_vehs", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< int,std::allocator< int > > * >(argp2);
  {
    try {
      ((si_taxi::BWSim const *)arg1)->count_idle_vehs(*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN void
free_si_taxi_BWSim(si_taxi::BWSim *arg1) {
    delete arg1;
}

swig_class SwigClassBWReactiveHandler;

SWIGINTERN void
free_si_taxi_BWReactiveHandler(si_taxi::BWReactiveHandler *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_BWReactiveHandler_init(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWReactiveHandler *arg1 = (si_taxi::BWReactiveHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWReactiveHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWReactiveHandler *","init", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWReactiveHandler * >(argp1);
  {
    try {
      (arg1)->init();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWReactiveHandler_handle_pax(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWReactiveHandler *arg1 = (si_taxi::BWReactiveHandler *) 0 ;
  si_taxi::BWPax *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  size_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWReactiveHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWReactiveHandler *","handle_pax", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWReactiveHandler * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_si_taxi__BWPax,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "si_taxi::BWPax const &","handle_pax", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "si_taxi::BWPax const &","handle_pax", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< si_taxi::BWPax * >(argp2);
  {
    try {
      result = (arg1)->handle_pax((si_taxi::BWPax const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWReactiveHandler_sim_set(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWReactiveHandler *arg1 = (si_taxi::BWReactiveHandler *) 0 ;
  si_taxi::BWSim *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWReactiveHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWReactiveHandler *","sim", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWReactiveHandler * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_si_taxi__BWSim,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "si_taxi::BWSim &","sim", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "si_taxi::BWSim &","sim", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< si_taxi::BWSim * >(argp2);
  if (arg1) (arg1)->sim = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWReactiveHandler_sim_get(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWReactiveHandler *arg1 = (si_taxi::BWReactiveHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  si_taxi::BWSim *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWReactiveHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWReactiveHandler *","sim", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWReactiveHandler * >(argp1);
  result = (si_taxi::BWSim *) &(si_taxi::BWSim &) ((arg1)->sim);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_si_taxi__BWSim, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


swig_class SwigClassBWProactiveHandler;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_BWProactiveHandler_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_BWProactiveHandler_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_si_taxi__BWProactiveHandler);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_BWProactiveHandler(int argc, VALUE *argv, VALUE self) {
  VALUE arg1 = (VALUE) 0 ;
  si_taxi::BWSim *arg2 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  const char *classname SWIGUNUSED = "SiTaxi::BWProactiveHandler";
  si_taxi::BWProactiveHandler *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  arg1 = self;
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_si_taxi__BWSim,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "si_taxi::BWSim &","si_taxi::BWProactiveHandler", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "si_taxi::BWSim &","si_taxi::BWProactiveHandler", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< si_taxi::BWSim * >(argp2);
  {
    try {
      if ( strcmp(rb_obj_classname(self), classname) != 0 ) {
        /* subclassed */
        result = (si_taxi::BWProactiveHandler *)new SwigDirector_BWProactiveHandler(arg1,*arg2); 
      } else {
        result = (si_taxi::BWProactiveHandler *)new si_taxi::BWProactiveHandler(*arg2); 
      }
      
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_si_taxi_BWProactiveHandler(si_taxi::BWProactiveHandler *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_BWProactiveHandler_init(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWProactiveHandler *arg1 = (si_taxi::BWProactiveHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWProactiveHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWProactiveHandler *","init", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWProactiveHandler * >(argp1);
  director = dynamic_cast<Swig::Director *>(arg1);
  upcall = (director && (director->swig_get_self() == self));
  try {
    {
      try {
        if (upcall) {
          (arg1)->si_taxi::BWProactiveHandler::init();
        } else {
          (arg1)->init();
        }
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
  } catch (Swig::DirectorException& e) {
    rb_exc_raise(e.getError());
    SWIG_fail;
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWProactiveHandler_handle_pax_served(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWProactiveHandler *arg1 = (si_taxi::BWProactiveHandler *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWProactiveHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWProactiveHandler *","handle_pax_served", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWProactiveHandler * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","handle_pax_served", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  director = dynamic_cast<Swig::Director *>(arg1);
  upcall = (director && (director->swig_get_self() == self));
  try {
    {
      try {
        if (upcall) {
          (arg1)->si_taxi::BWProactiveHandler::handle_pax_served(arg2);
        } else {
          (arg1)->handle_pax_served(arg2);
        }
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
  } catch (Swig::DirectorException& e) {
    rb_exc_raise(e.getError());
    SWIG_fail;
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWProactiveHandler_handle_idle(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWProactiveHandler *arg1 = (si_taxi::BWProactiveHandler *) 0 ;
  si_taxi::BWVehicle *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWProactiveHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWProactiveHandler *","handle_idle", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWProactiveHandler * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_si_taxi__BWVehicle,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "si_taxi::BWVehicle &","handle_idle", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "si_taxi::BWVehicle &","handle_idle", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< si_taxi::BWVehicle * >(argp2);
  director = dynamic_cast<Swig::Director *>(arg1);
  upcall = (director && (director->swig_get_self() == self));
  try {
    {
      try {
        if (upcall) {
          (arg1)->si_taxi::BWProactiveHandler::handle_idle(*arg2);
        } else {
          (arg1)->handle_idle(*arg2);
        }
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
  } catch (Swig::DirectorException& e) {
    rb_exc_raise(e.getError());
    SWIG_fail;
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWProactiveHandler_handle_strobe(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWProactiveHandler *arg1 = (si_taxi::BWProactiveHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWProactiveHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWProactiveHandler *","handle_strobe", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWProactiveHandler * >(argp1);
  director = dynamic_cast<Swig::Director *>(arg1);
  upcall = (director && (director->swig_get_self() == self));
  try {
    {
      try {
        if (upcall) {
          (arg1)->si_taxi::BWProactiveHandler::handle_strobe();
        } else {
          (arg1)->handle_strobe();
        }
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
  } catch (Swig::DirectorException& e) {
    rb_exc_raise(e.getError());
    SWIG_fail;
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWProactiveHandler_sim_set(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWProactiveHandler *arg1 = (si_taxi::BWProactiveHandler *) 0 ;
  si_taxi::BWSim *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWProactiveHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWProactiveHandler *","sim", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWProactiveHandler * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_si_taxi__BWSim,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "si_taxi::BWSim &","sim", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "si_taxi::BWSim &","sim", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< si_taxi::BWSim * >(argp2);
  if (arg1) (arg1)->sim = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWProactiveHandler_sim_get(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWProactiveHandler *arg1 = (si_taxi::BWProactiveHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  si_taxi::BWSim *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWProactiveHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWProactiveHandler *","sim", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWProactiveHandler * >(argp1);
  result = (si_taxi::BWSim *) &(si_taxi::BWSim &) ((arg1)->sim);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_si_taxi__BWSim, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_disown_BWProactiveHandler(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWProactiveHandler *arg1 = (si_taxi::BWProactiveHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_si_taxi__BWProactiveHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWProactiveHandler *","disown_BWProactiveHandler", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWProactiveHandler * >(argp1);
  {
    Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
    if (director) director->swig_disown();
  }
  
  return Qnil;
fail:
  return Qnil;
}


swig_class SwigClassBWSimStats;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_BWSimStats_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_BWSimStats_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_si_taxi__BWSimStats);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_BWSimStats(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSim *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  const char *classname SWIGUNUSED = "SiTaxi::BWSimStats";
  si_taxi::BWSimStats *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_si_taxi__BWSim,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSim &","si_taxi::BWSimStats", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "si_taxi::BWSim &","si_taxi::BWSimStats", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSim * >(argp1);
  {
    try {
      result = (si_taxi::BWSimStats *)new si_taxi::BWSimStats(*arg1);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_si_taxi_BWSimStats(si_taxi::BWSimStats *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_BWSimStats_init(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSimStats *arg1 = (si_taxi::BWSimStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSimStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSimStats *","init", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSimStats * >(argp1);
  {
    try {
      (arg1)->init();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSimStats_record_time_step_stats(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSimStats *arg1 = (si_taxi::BWSimStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSimStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSimStats *","record_time_step_stats", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSimStats * >(argp1);
  {
    try {
      (arg1)->record_time_step_stats();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSimStats_record_pax_served(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSimStats *arg1 = (si_taxi::BWSimStats *) 0 ;
  si_taxi::BWPax *arg2 = 0 ;
  size_t arg3 ;
  si_taxi::BWTime arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSimStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSimStats *","record_pax_served", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSimStats * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_si_taxi__BWPax,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "si_taxi::BWPax const &","record_pax_served", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "si_taxi::BWPax const &","record_pax_served", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< si_taxi::BWPax * >(argp2);
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "size_t","record_pax_served", 3, argv[1] ));
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_long(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "si_taxi::BWTime","record_pax_served", 4, argv[2] ));
  } 
  arg4 = static_cast< si_taxi::BWTime >(val4);
  {
    try {
      (arg1)->record_pax_served((si_taxi::BWPax const &)*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSimStats_record_empty_trip(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSimStats *arg1 = (si_taxi::BWSimStats *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSimStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSimStats *","record_empty_trip", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSimStats * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","record_empty_trip", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "size_t","record_empty_trip", 3, argv[1] ));
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      (arg1)->record_empty_trip(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSimStats_sim_set(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSimStats *arg1 = (si_taxi::BWSimStats *) 0 ;
  si_taxi::BWSim *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSimStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSimStats *","sim", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSimStats * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_si_taxi__BWSim,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "si_taxi::BWSim &","sim", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "si_taxi::BWSim &","sim", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< si_taxi::BWSim * >(argp2);
  if (arg1) (arg1)->sim = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSimStats_sim_get(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSimStats *arg1 = (si_taxi::BWSimStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  si_taxi::BWSim *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSimStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSimStats *","sim", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSimStats * >(argp1);
  result = (si_taxi::BWSim *) &(si_taxi::BWSim &) ((arg1)->sim);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_si_taxi__BWSim, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


swig_class SwigClassBWSimStatsDetailed;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_BWSimStatsDetailed_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_BWSimStatsDetailed_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_si_taxi__BWSimStatsDetailed);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_BWSimStatsDetailed(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSim *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  const char *classname SWIGUNUSED = "SiTaxi::BWSimStatsDetailed";
  si_taxi::BWSimStatsDetailed *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_si_taxi__BWSim,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSim &","si_taxi::BWSimStatsDetailed", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "si_taxi::BWSim &","si_taxi::BWSimStatsDetailed", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSim * >(argp1);
  {
    try {
      result = (si_taxi::BWSimStatsDetailed *)new si_taxi::BWSimStatsDetailed(*arg1);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_si_taxi_BWSimStatsDetailed(si_taxi::BWSimStatsDetailed *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_BWSimStatsDetailed_init(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSimStatsDetailed *arg1 = (si_taxi::BWSimStatsDetailed *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSimStatsDetailed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSimStatsDetailed *","init", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSimStatsDetailed * >(argp1);
  {
    try {
      (arg1)->init();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSimStatsDetailed_record_time_step_stats(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSimStatsDetailed *arg1 = (si_taxi::BWSimStatsDetailed *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSimStatsDetailed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSimStatsDetailed *","record_time_step_stats", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSimStatsDetailed * >(argp1);
  {
    try {
      (arg1)->record_time_step_stats();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSimStatsDetailed_record_pax_served(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSimStatsDetailed *arg1 = (si_taxi::BWSimStatsDetailed *) 0 ;
  si_taxi::BWPax *arg2 = 0 ;
  size_t arg3 ;
  si_taxi::BWTime arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSimStatsDetailed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSimStatsDetailed *","record_pax_served", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSimStatsDetailed * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_si_taxi__BWPax,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "si_taxi::BWPax const &","record_pax_served", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "si_taxi::BWPax const &","record_pax_served", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< si_taxi::BWPax * >(argp2);
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "size_t","record_pax_served", 3, argv[1] ));
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_long(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "si_taxi::BWTime","record_pax_served", 4, argv[2] ));
  } 
  arg4 = static_cast< si_taxi::BWTime >(val4);
  {
    try {
      (arg1)->record_pax_served((si_taxi::BWPax const &)*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSimStatsDetailed_record_empty_trip(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSimStatsDetailed *arg1 = (si_taxi::BWSimStatsDetailed *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSimStatsDetailed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSimStatsDetailed *","record_empty_trip", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSimStatsDetailed * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","record_empty_trip", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "size_t","record_empty_trip", 3, argv[1] ));
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      (arg1)->record_empty_trip(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSimStatsDetailed_queue_at(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSimStatsDetailed *arg1 = (si_taxi::BWSimStatsDetailed *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSimStatsDetailed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSimStatsDetailed *","queue_at", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSimStatsDetailed * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","queue_at", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      result = (arg1)->queue_at(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSimStatsDetailed_pax_wait_set(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSimStatsDetailed *arg1 = (si_taxi::BWSimStatsDetailed *) 0 ;
  std::vector< si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > > *arg2 = (std::vector< si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSimStatsDetailed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSimStatsDetailed *","pax_wait", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSimStatsDetailed * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > > *","pax_wait", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< std::vector< si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > > * >(argp2);
  if (arg1) (arg1)->pax_wait = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSimStatsDetailed_pax_wait_get(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSimStatsDetailed *arg1 = (si_taxi::BWSimStatsDetailed *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSimStatsDetailed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSimStatsDetailed *","pax_wait", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSimStatsDetailed * >(argp1);
  result = (std::vector< si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > > *)& ((arg1)->pax_wait);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSimStatsDetailed_queue_len_set(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSimStatsDetailed *arg1 = (si_taxi::BWSimStatsDetailed *) 0 ;
  std::vector< si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > > *arg2 = (std::vector< si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSimStatsDetailed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSimStatsDetailed *","queue_len", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSimStatsDetailed * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > > *","queue_len", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< std::vector< si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > > * >(argp2);
  if (arg1) (arg1)->queue_len = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSimStatsDetailed_queue_len_get(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSimStatsDetailed *arg1 = (si_taxi::BWSimStatsDetailed *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSimStatsDetailed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSimStatsDetailed *","queue_len", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSimStatsDetailed * >(argp1);
  result = (std::vector< si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > > *)& ((arg1)->queue_len);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSimStatsDetailed_idle_vehs_set(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSimStatsDetailed *arg1 = (si_taxi::BWSimStatsDetailed *) 0 ;
  std::vector< si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > > *arg2 = (std::vector< si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSimStatsDetailed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSimStatsDetailed *","idle_vehs", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSimStatsDetailed * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > > *","idle_vehs", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< std::vector< si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > > * >(argp2);
  if (arg1) (arg1)->idle_vehs = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSimStatsDetailed_idle_vehs_get(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSimStatsDetailed *arg1 = (si_taxi::BWSimStatsDetailed *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSimStatsDetailed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSimStatsDetailed *","idle_vehs", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSimStatsDetailed * >(argp1);
  result = (std::vector< si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > > *)& ((arg1)->idle_vehs);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSimStatsDetailed_idle_vehs_total_set(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSimStatsDetailed *arg1 = (si_taxi::BWSimStatsDetailed *) 0 ;
  si_taxi::NaturalHistogram *arg2 = (si_taxi::NaturalHistogram *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSimStatsDetailed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSimStatsDetailed *","idle_vehs_total", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSimStatsDetailed * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_si_taxi__NaturalHistogram, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "si_taxi::NaturalHistogram *","idle_vehs_total", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< si_taxi::NaturalHistogram * >(argp2);
  if (arg1) (arg1)->idle_vehs_total = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSimStatsDetailed_idle_vehs_total_get(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSimStatsDetailed *arg1 = (si_taxi::BWSimStatsDetailed *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  si_taxi::NaturalHistogram *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSimStatsDetailed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSimStatsDetailed *","idle_vehs_total", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSimStatsDetailed * >(argp1);
  result = (si_taxi::NaturalHistogram *)& ((arg1)->idle_vehs_total);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_si_taxi__NaturalHistogram, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSimStatsDetailed_pickups_set(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSimStatsDetailed *arg1 = (si_taxi::BWSimStatsDetailed *) 0 ;
  std::vector< std::priority_queue< si_taxi::BWTime,std::vector< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::greater< si_taxi::BWTime > >,std::allocator< std::priority_queue< si_taxi::BWTime,std::vector< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::greater< si_taxi::BWTime > > > > *arg2 = (std::vector< std::priority_queue< si_taxi::BWTime,std::vector< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::greater< si_taxi::BWTime > >,std::allocator< std::priority_queue< si_taxi::BWTime,std::vector< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::greater< si_taxi::BWTime > > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSimStatsDetailed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSimStatsDetailed *","pickups", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSimStatsDetailed * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_std__vectorT_std__priority_queueT_long_std__vectorT_long_std__allocatorT_long_t_t_std__greaterT_long_t_t_std__allocatorT_std__priority_queueT_long_std__vectorT_long_std__allocatorT_long_t_t_std__greaterT_long_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< std::priority_queue< si_taxi::BWTime,std::vector< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::greater< si_taxi::BWTime > >,std::allocator< std::priority_queue< si_taxi::BWTime,std::vector< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::greater< si_taxi::BWTime > > > > *","pickups", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< std::vector< std::priority_queue< si_taxi::BWTime,std::vector< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::greater< si_taxi::BWTime > >,std::allocator< std::priority_queue< si_taxi::BWTime,std::vector< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::greater< si_taxi::BWTime > > > > * >(argp2);
  if (arg1) (arg1)->pickups = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSimStatsDetailed_pickups_get(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSimStatsDetailed *arg1 = (si_taxi::BWSimStatsDetailed *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::priority_queue< si_taxi::BWTime,std::vector< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::greater< si_taxi::BWTime > >,std::allocator< std::priority_queue< si_taxi::BWTime,std::vector< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::greater< si_taxi::BWTime > > > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSimStatsDetailed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSimStatsDetailed *","pickups", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSimStatsDetailed * >(argp1);
  result = (std::vector< std::priority_queue< si_taxi::BWTime,std::vector< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::greater< si_taxi::BWTime > >,std::allocator< std::priority_queue< si_taxi::BWTime,std::vector< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::greater< si_taxi::BWTime > > > > *)& ((arg1)->pickups);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__priority_queueT_long_std__vectorT_long_std__allocatorT_long_t_t_std__greaterT_long_t_t_std__allocatorT_std__priority_queueT_long_std__vectorT_long_std__allocatorT_long_t_t_std__greaterT_long_t_t_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSimStatsDetailed_occupied_trips_set(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSimStatsDetailed *arg1 = (si_taxi::BWSimStatsDetailed *) 0 ;
  boost::numeric::ublas::matrix< size_t > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSimStatsDetailed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSimStatsDetailed *","occupied_trips", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSimStatsDetailed * >(argp1);
  {
    int i, j, rows, cols;
    VALUE row;
    
    if (!rb_obj_is_kind_of(argv[0], rb_cArray)) {
      SWIG_exception_fail(SWIG_ERROR, "not an array");
    }
    
    rows = RARRAY_LEN(argv[0]);
    if (rows > 0) {
      cols = RARRAY_LEN(rb_ary_entry(argv[0], 0));
    } else {
      cols = 0;
    }
    
    arg2 = boost::numeric::ublas::matrix<size_t>(rows, cols);
    for (i = 0; i < rows; ++i) {
      row = rb_ary_entry(argv[0], i);
      if (RARRAY_LEN(row) != cols) {
        SWIG_exception_fail(SWIG_ERROR, "ragged array not allowed");
      }
      for (j = 0; j < cols; ++j) {
        arg2(i, j) = NUM2ULONG(rb_ary_entry(row, j));
      }
    }
  }
  if (arg1) (arg1)->occupied_trips = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSimStatsDetailed_occupied_trips_get(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSimStatsDetailed *arg1 = (si_taxi::BWSimStatsDetailed *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::numeric::ublas::matrix< size_t > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSimStatsDetailed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSimStatsDetailed *","occupied_trips", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSimStatsDetailed * >(argp1);
  result =  ((arg1)->occupied_trips);
  {
    int i, j, rows, cols;
    VALUE row;
    
    rows = (int) (&result)->size1();
    cols = (int) (&result)->size2();
    vresult = rb_ary_new2(rows);
    for (i = 0; i < rows; ++i) {
      row = rb_ary_new2(cols);
      rb_ary_push(vresult, row);
      for (j = 0; j < cols; ++j) {
        rb_ary_push(row, ULONG2NUM(result(i, j)));
      }
    }
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSimStatsDetailed_empty_trips_set(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSimStatsDetailed *arg1 = (si_taxi::BWSimStatsDetailed *) 0 ;
  boost::numeric::ublas::matrix< size_t > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSimStatsDetailed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSimStatsDetailed *","empty_trips", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSimStatsDetailed * >(argp1);
  {
    int i, j, rows, cols;
    VALUE row;
    
    if (!rb_obj_is_kind_of(argv[0], rb_cArray)) {
      SWIG_exception_fail(SWIG_ERROR, "not an array");
    }
    
    rows = RARRAY_LEN(argv[0]);
    if (rows > 0) {
      cols = RARRAY_LEN(rb_ary_entry(argv[0], 0));
    } else {
      cols = 0;
    }
    
    arg2 = boost::numeric::ublas::matrix<size_t>(rows, cols);
    for (i = 0; i < rows; ++i) {
      row = rb_ary_entry(argv[0], i);
      if (RARRAY_LEN(row) != cols) {
        SWIG_exception_fail(SWIG_ERROR, "ragged array not allowed");
      }
      for (j = 0; j < cols; ++j) {
        arg2(i, j) = NUM2ULONG(rb_ary_entry(row, j));
      }
    }
  }
  if (arg1) (arg1)->empty_trips = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSimStatsDetailed_empty_trips_get(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSimStatsDetailed *arg1 = (si_taxi::BWSimStatsDetailed *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::numeric::ublas::matrix< size_t > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSimStatsDetailed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSimStatsDetailed *","empty_trips", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSimStatsDetailed * >(argp1);
  result =  ((arg1)->empty_trips);
  {
    int i, j, rows, cols;
    VALUE row;
    
    rows = (int) (&result)->size1();
    cols = (int) (&result)->size2();
    vresult = rb_ary_new2(rows);
    for (i = 0; i < rows; ++i) {
      row = rb_ary_new2(cols);
      rb_ary_push(vresult, row);
      for (j = 0; j < cols; ++j) {
        rb_ary_push(row, ULONG2NUM(result(i, j)));
      }
    }
  }
  return vresult;
fail:
  return Qnil;
}


swig_class SwigClassBWSimStatsMeanPaxWait;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_BWSimStatsMeanPaxWait_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_BWSimStatsMeanPaxWait_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_si_taxi__BWSimStatsMeanPaxWait);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_BWSimStatsMeanPaxWait(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSim *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  const char *classname SWIGUNUSED = "SiTaxi::BWSimStatsMeanPaxWait";
  si_taxi::BWSimStatsMeanPaxWait *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_si_taxi__BWSim,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSim &","si_taxi::BWSimStatsMeanPaxWait", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "si_taxi::BWSim &","si_taxi::BWSimStatsMeanPaxWait", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSim * >(argp1);
  {
    try {
      result = (si_taxi::BWSimStatsMeanPaxWait *)new si_taxi::BWSimStatsMeanPaxWait(*arg1);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_si_taxi_BWSimStatsMeanPaxWait(si_taxi::BWSimStatsMeanPaxWait *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_BWSimStatsMeanPaxWait_init(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSimStatsMeanPaxWait *arg1 = (si_taxi::BWSimStatsMeanPaxWait *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSimStatsMeanPaxWait, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSimStatsMeanPaxWait *","init", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSimStatsMeanPaxWait * >(argp1);
  {
    try {
      (arg1)->init();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSimStatsMeanPaxWait_record_pax_served(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSimStatsMeanPaxWait *arg1 = (si_taxi::BWSimStatsMeanPaxWait *) 0 ;
  si_taxi::BWPax *arg2 = 0 ;
  size_t arg3 ;
  si_taxi::BWTime arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSimStatsMeanPaxWait, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSimStatsMeanPaxWait *","record_pax_served", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSimStatsMeanPaxWait * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_si_taxi__BWPax,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "si_taxi::BWPax const &","record_pax_served", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "si_taxi::BWPax const &","record_pax_served", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< si_taxi::BWPax * >(argp2);
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "size_t","record_pax_served", 3, argv[1] ));
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_long(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "si_taxi::BWTime","record_pax_served", 4, argv[2] ));
  } 
  arg4 = static_cast< si_taxi::BWTime >(val4);
  {
    try {
      (arg1)->record_pax_served((si_taxi::BWPax const &)*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSimStatsMeanPaxWait_mean_pax_wait_set(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSimStatsMeanPaxWait *arg1 = (si_taxi::BWSimStatsMeanPaxWait *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSimStatsMeanPaxWait, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSimStatsMeanPaxWait *","mean_pax_wait", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSimStatsMeanPaxWait * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","mean_pax_wait", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->mean_pax_wait = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSimStatsMeanPaxWait_mean_pax_wait_get(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSimStatsMeanPaxWait *arg1 = (si_taxi::BWSimStatsMeanPaxWait *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSimStatsMeanPaxWait, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSimStatsMeanPaxWait *","mean_pax_wait", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSimStatsMeanPaxWait * >(argp1);
  result = (double) ((arg1)->mean_pax_wait);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSimStatsMeanPaxWait_pax_count_set(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSimStatsMeanPaxWait *arg1 = (si_taxi::BWSimStatsMeanPaxWait *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSimStatsMeanPaxWait, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSimStatsMeanPaxWait *","pax_count", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSimStatsMeanPaxWait * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","pax_count", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->pax_count = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSimStatsMeanPaxWait_pax_count_get(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSimStatsMeanPaxWait *arg1 = (si_taxi::BWSimStatsMeanPaxWait *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSimStatsMeanPaxWait, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSimStatsMeanPaxWait *","pax_count", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSimStatsMeanPaxWait * >(argp1);
  result = (int) ((arg1)->pax_count);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


swig_class SwigClassBWSimStatsPaxRecord;

SWIGINTERN VALUE
_wrap_BWSimStatsPaxRecord_empty_origin_set(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSimStatsPaxRecord *arg1 = (si_taxi::BWSimStatsPaxRecord *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSimStatsPaxRecord, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSimStatsPaxRecord *","empty_origin", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSimStatsPaxRecord * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","empty_origin", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  if (arg1) (arg1)->empty_origin = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSimStatsPaxRecord_empty_origin_get(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSimStatsPaxRecord *arg1 = (si_taxi::BWSimStatsPaxRecord *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSimStatsPaxRecord, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSimStatsPaxRecord *","empty_origin", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSimStatsPaxRecord * >(argp1);
  result =  ((arg1)->empty_origin);
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSimStatsPaxRecord_pickup_set(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSimStatsPaxRecord *arg1 = (si_taxi::BWSimStatsPaxRecord *) 0 ;
  si_taxi::BWTime arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSimStatsPaxRecord, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSimStatsPaxRecord *","pickup", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSimStatsPaxRecord * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "si_taxi::BWTime","pickup", 2, argv[0] ));
  } 
  arg2 = static_cast< si_taxi::BWTime >(val2);
  if (arg1) (arg1)->pickup = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSimStatsPaxRecord_pickup_get(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSimStatsPaxRecord *arg1 = (si_taxi::BWSimStatsPaxRecord *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  si_taxi::BWTime result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSimStatsPaxRecord, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSimStatsPaxRecord *","pickup", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSimStatsPaxRecord * >(argp1);
  result = (si_taxi::BWTime) ((arg1)->pickup);
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_BWSimStatsPaxRecord_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_BWSimStatsPaxRecord_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_si_taxi__BWSimStatsPaxRecord);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_BWSimStatsPaxRecord(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "SiTaxi::BWSimStatsPaxRecord";
  si_taxi::BWSimStatsPaxRecord *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (si_taxi::BWSimStatsPaxRecord *)new si_taxi::BWSimStatsPaxRecord();
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_si_taxi_BWSimStatsPaxRecord(si_taxi::BWSimStatsPaxRecord *arg1) {
    delete arg1;
}

swig_class SwigClassBWSimStatsPaxRecorder;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_BWSimStatsPaxRecorder_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_BWSimStatsPaxRecorder_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_si_taxi__BWSimStatsPaxRecorder);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_BWSimStatsPaxRecorder(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSim *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  const char *classname SWIGUNUSED = "SiTaxi::BWSimStatsPaxRecorder";
  si_taxi::BWSimStatsPaxRecorder *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_si_taxi__BWSim,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSim &","si_taxi::BWSimStatsPaxRecorder", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "si_taxi::BWSim &","si_taxi::BWSimStatsPaxRecorder", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSim * >(argp1);
  {
    try {
      result = (si_taxi::BWSimStatsPaxRecorder *)new si_taxi::BWSimStatsPaxRecorder(*arg1);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_si_taxi_BWSimStatsPaxRecorder(si_taxi::BWSimStatsPaxRecorder *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_BWSimStatsPaxRecorder_init(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSimStatsPaxRecorder *arg1 = (si_taxi::BWSimStatsPaxRecorder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSimStatsPaxRecorder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSimStatsPaxRecorder *","init", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSimStatsPaxRecorder * >(argp1);
  {
    try {
      (arg1)->init();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSimStatsPaxRecorder_record_pax_served(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSimStatsPaxRecorder *arg1 = (si_taxi::BWSimStatsPaxRecorder *) 0 ;
  si_taxi::BWPax *arg2 = 0 ;
  size_t arg3 ;
  si_taxi::BWTime arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSimStatsPaxRecorder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSimStatsPaxRecorder *","record_pax_served", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSimStatsPaxRecorder * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_si_taxi__BWPax,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "si_taxi::BWPax const &","record_pax_served", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "si_taxi::BWPax const &","record_pax_served", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< si_taxi::BWPax * >(argp2);
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "size_t","record_pax_served", 3, argv[1] ));
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_long(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "si_taxi::BWTime","record_pax_served", 4, argv[2] ));
  } 
  arg4 = static_cast< si_taxi::BWTime >(val4);
  {
    try {
      (arg1)->record_pax_served((si_taxi::BWPax const &)*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSimStatsPaxRecorder_records_set(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSimStatsPaxRecorder *arg1 = (si_taxi::BWSimStatsPaxRecorder *) 0 ;
  std::vector< si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > > *arg2 = (std::vector< si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSimStatsPaxRecorder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSimStatsPaxRecorder *","records", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSimStatsPaxRecorder * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > > *","records", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< std::vector< si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > > * >(argp2);
  if (arg1) (arg1)->records = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSimStatsPaxRecorder_records_get(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSimStatsPaxRecorder *arg1 = (si_taxi::BWSimStatsPaxRecorder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSimStatsPaxRecorder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSimStatsPaxRecorder *","records", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSimStatsPaxRecorder * >(argp1);
  result = (std::vector< si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > > *)& ((arg1)->records);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


swig_class SwigClassBWNNHandler;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_BWNNHandler_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_BWNNHandler_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_si_taxi__BWNNHandler);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_BWNNHandler(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSim *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  const char *classname SWIGUNUSED = "SiTaxi::BWNNHandler";
  si_taxi::BWNNHandler *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_si_taxi__BWSim,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSim &","si_taxi::BWNNHandler", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "si_taxi::BWSim &","si_taxi::BWNNHandler", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSim * >(argp1);
  {
    try {
      result = (si_taxi::BWNNHandler *)new si_taxi::BWNNHandler(*arg1);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_si_taxi_BWNNHandler(si_taxi::BWNNHandler *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_BWNNHandler_handle_pax(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWNNHandler *arg1 = (si_taxi::BWNNHandler *) 0 ;
  si_taxi::BWPax *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  size_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWNNHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWNNHandler *","handle_pax", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWNNHandler * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_si_taxi__BWPax,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "si_taxi::BWPax const &","handle_pax", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "si_taxi::BWPax const &","handle_pax", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< si_taxi::BWPax * >(argp2);
  {
    try {
      result = (arg1)->handle_pax((si_taxi::BWPax const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWNNHandler_wait(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWNNHandler *arg1 = (si_taxi::BWNNHandler *) 0 ;
  si_taxi::BWPax *arg2 = 0 ;
  si_taxi::BWVehicle *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  si_taxi::BWTime result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWNNHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWNNHandler const *","wait", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWNNHandler * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_si_taxi__BWPax,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "si_taxi::BWPax const &","wait", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "si_taxi::BWPax const &","wait", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< si_taxi::BWPax * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_si_taxi__BWVehicle,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "si_taxi::BWVehicle const &","wait", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "si_taxi::BWVehicle const &","wait", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< si_taxi::BWVehicle * >(argp3);
  {
    try {
      result = (si_taxi::BWTime)((si_taxi::BWNNHandler const *)arg1)->wait((si_taxi::BWPax const &)*arg2,(si_taxi::BWVehicle const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


swig_class SwigClassBWHxHandler;

SWIGINTERN void
free_si_taxi_BWHxHandler(si_taxi::BWHxHandler *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_BWHxHandler_handle_pax(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWHxHandler *arg1 = (si_taxi::BWHxHandler *) 0 ;
  si_taxi::BWPax *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  size_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWHxHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWHxHandler *","handle_pax", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWHxHandler * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_si_taxi__BWPax,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "si_taxi::BWPax const &","handle_pax", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "si_taxi::BWPax const &","handle_pax", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< si_taxi::BWPax * >(argp2);
  {
    try {
      result = (arg1)->handle_pax((si_taxi::BWPax const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWHxHandler_value(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWHxHandler *arg1 = (si_taxi::BWHxHandler *) 0 ;
  si_taxi::BWPax *arg2 = 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWHxHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWHxHandler const *","value", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWHxHandler * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_si_taxi__BWPax,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "si_taxi::BWPax const &","value", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "si_taxi::BWPax const &","value", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< si_taxi::BWPax * >(argp2);
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "size_t","value", 3, argv[1] ));
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      result = (double)((si_taxi::BWHxHandler const *)arg1)->value((si_taxi::BWPax const &)*arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWHxHandler_od(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWHxHandler *arg1 = (si_taxi::BWHxHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  si_taxi::ODMatrixWrapper *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWHxHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWHxHandler const *","od", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWHxHandler * >(argp1);
  {
    try {
      result = (si_taxi::ODMatrixWrapper *) &((si_taxi::BWHxHandler const *)arg1)->od();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_si_taxi__ODMatrixWrapper, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWHxHandler_alpha(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWHxHandler *arg1 = (si_taxi::BWHxHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWHxHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWHxHandler const *","alpha", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWHxHandler * >(argp1);
  {
    try {
      result = (double)((si_taxi::BWHxHandler const *)arg1)->alpha();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


swig_class SwigClassBWH1Handler;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_BWH1Handler_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_BWH1Handler_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_si_taxi__BWH1Handler);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_BWH1Handler(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSim *arg1 = 0 ;
  boost::numeric::ublas::matrix< double > arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  const char *classname SWIGUNUSED = "SiTaxi::BWH1Handler";
  si_taxi::BWH1Handler *result = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_si_taxi__BWSim,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSim &","si_taxi::BWH1Handler", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "si_taxi::BWSim &","si_taxi::BWH1Handler", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSim * >(argp1);
  {
    int i, j, rows, cols;
    VALUE row;
    
    if (!rb_obj_is_kind_of(argv[1], rb_cArray)) {
      SWIG_exception_fail(SWIG_ERROR, "not an array");
    }
    
    rows = RARRAY_LEN(argv[1]);
    if (rows > 0) {
      cols = RARRAY_LEN(rb_ary_entry(argv[1], 0));
    } else {
      cols = 0;
    }
    
    arg2 = boost::numeric::ublas::matrix<double>(rows, cols);
    for (i = 0; i < rows; ++i) {
      row = rb_ary_entry(argv[1], i);
      if (RARRAY_LEN(row) != cols) {
        SWIG_exception_fail(SWIG_ERROR, "ragged array not allowed");
      }
      for (j = 0; j < cols; ++j) {
        arg2(i, j) = NUM2DBL(rb_ary_entry(row, j));
      }
    }
  }
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","si_taxi::BWH1Handler", 3, argv[2] ));
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (si_taxi::BWH1Handler *)new si_taxi::BWH1Handler(*arg1,arg2,arg3);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_si_taxi_BWH1Handler(si_taxi::BWH1Handler *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_BWH1Handler_expected_trip_time_from(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWH1Handler *arg1 = (si_taxi::BWH1Handler *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWH1Handler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWH1Handler const *","expected_trip_time_from", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWH1Handler * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","expected_trip_time_from", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      result = (double)((si_taxi::BWH1Handler const *)arg1)->expected_trip_time_from(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWH1Handler_value(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWH1Handler *arg1 = (si_taxi::BWH1Handler *) 0 ;
  si_taxi::BWPax *arg2 = 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWH1Handler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWH1Handler const *","value", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWH1Handler * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_si_taxi__BWPax,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "si_taxi::BWPax const &","value", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "si_taxi::BWPax const &","value", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< si_taxi::BWPax * >(argp2);
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "size_t","value", 3, argv[1] ));
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      result = (double)((si_taxi::BWH1Handler const *)arg1)->value((si_taxi::BWPax const &)*arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


swig_class SwigClassBWH2Handler;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_BWH2Handler_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_BWH2Handler_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_si_taxi__BWH2Handler);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_BWH2Handler(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSim *arg1 = 0 ;
  boost::numeric::ublas::matrix< double > arg2 ;
  double arg3 ;
  size_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  const char *classname SWIGUNUSED = "SiTaxi::BWH2Handler";
  si_taxi::BWH2Handler *result = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_si_taxi__BWSim,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSim &","si_taxi::BWH2Handler", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "si_taxi::BWSim &","si_taxi::BWH2Handler", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSim * >(argp1);
  {
    int i, j, rows, cols;
    VALUE row;
    
    if (!rb_obj_is_kind_of(argv[1], rb_cArray)) {
      SWIG_exception_fail(SWIG_ERROR, "not an array");
    }
    
    rows = RARRAY_LEN(argv[1]);
    if (rows > 0) {
      cols = RARRAY_LEN(rb_ary_entry(argv[1], 0));
    } else {
      cols = 0;
    }
    
    arg2 = boost::numeric::ublas::matrix<double>(rows, cols);
    for (i = 0; i < rows; ++i) {
      row = rb_ary_entry(argv[1], i);
      if (RARRAY_LEN(row) != cols) {
        SWIG_exception_fail(SWIG_ERROR, "ragged array not allowed");
      }
      for (j = 0; j < cols; ++j) {
        arg2(i, j) = NUM2DBL(rb_ary_entry(row, j));
      }
    }
  }
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","si_taxi::BWH2Handler", 3, argv[2] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_size_t(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "size_t","si_taxi::BWH2Handler", 4, argv[3] ));
  } 
  arg4 = static_cast< size_t >(val4);
  {
    try {
      result = (si_taxi::BWH2Handler *)new si_taxi::BWH2Handler(*arg1,arg2,arg3,arg4);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_si_taxi_BWH2Handler(si_taxi::BWH2Handler *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_BWH2Handler_value(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWH2Handler *arg1 = (si_taxi::BWH2Handler *) 0 ;
  si_taxi::BWPax *arg2 = 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWH2Handler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWH2Handler const *","value", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWH2Handler * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_si_taxi__BWPax,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "si_taxi::BWPax const &","value", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "si_taxi::BWPax const &","value", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< si_taxi::BWPax * >(argp2);
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "size_t","value", 3, argv[1] ));
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      result = (double)((si_taxi::BWH2Handler const *)arg1)->value((si_taxi::BWPax const &)*arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWH2Handler_horizon_set(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWH2Handler *arg1 = (si_taxi::BWH2Handler *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWH2Handler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWH2Handler *","horizon", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWH2Handler * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","horizon", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  if (arg1) (arg1)->horizon = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWH2Handler_horizon_get(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWH2Handler *arg1 = (si_taxi::BWH2Handler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWH2Handler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWH2Handler *","horizon", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWH2Handler * >(argp1);
  result =  ((arg1)->horizon);
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


swig_class SwigClassBWETNNHandler;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_BWETNNHandler_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_BWETNNHandler_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_si_taxi__BWETNNHandler);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_BWETNNHandler(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSim *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  const char *classname SWIGUNUSED = "SiTaxi::BWETNNHandler";
  si_taxi::BWETNNHandler *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_si_taxi__BWSim,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSim &","si_taxi::BWETNNHandler", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "si_taxi::BWSim &","si_taxi::BWETNNHandler", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSim * >(argp1);
  {
    try {
      result = (si_taxi::BWETNNHandler *)new si_taxi::BWETNNHandler(*arg1);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_si_taxi_BWETNNHandler(si_taxi::BWETNNHandler *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_BWETNNHandler_handle_pax(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWETNNHandler *arg1 = (si_taxi::BWETNNHandler *) 0 ;
  si_taxi::BWPax *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  size_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWETNNHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWETNNHandler *","handle_pax", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWETNNHandler * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_si_taxi__BWPax,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "si_taxi::BWPax const &","handle_pax", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "si_taxi::BWPax const &","handle_pax", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< si_taxi::BWPax * >(argp2);
  {
    try {
      result = (arg1)->handle_pax((si_taxi::BWPax const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


swig_class SwigClassBWSNNHandler;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_BWSNNHandler_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_BWSNNHandler_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_si_taxi__BWSNNHandler);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_BWSNNHandler(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSim *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  const char *classname SWIGUNUSED = "SiTaxi::BWSNNHandler";
  si_taxi::BWSNNHandler *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_si_taxi__BWSim,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSim &","si_taxi::BWSNNHandler", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "si_taxi::BWSim &","si_taxi::BWSNNHandler", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSim * >(argp1);
  {
    try {
      result = (si_taxi::BWSNNHandler *)new si_taxi::BWSNNHandler(*arg1);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_si_taxi_BWSNNHandler(si_taxi::BWSNNHandler *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_BWSNNHandler_choose_veh(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWPax *arg1 = 0 ;
  std::vector< si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > > *arg2 = 0 ;
  boost::numeric::ublas::matrix< int > *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  size_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_si_taxi__BWPax,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWPax const &","si_taxi::BWSNNHandler::choose_veh", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "si_taxi::BWPax const &","si_taxi::BWSNNHandler::choose_veh", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< si_taxi::BWPax * >(argp1);
  {
    std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > > *ptr = (std::vector<si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > > *)0;
    res2 = swig::asptr(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > > const &","si_taxi::BWSNNHandler::choose_veh", 2, argv[1] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > > const &","si_taxi::BWSNNHandler::choose_veh", 2, argv[1])); 
    }
    arg2 = ptr;
  }
  {
    int i, j, rows, cols;
    VALUE row;
    
    if (!rb_obj_is_kind_of(argv[2], rb_cArray)) {
      SWIG_exception_fail(SWIG_ERROR, "not an array");
    }
    
    rows = RARRAY_LEN(argv[2]);
    if (rows > 0) {
      cols = RARRAY_LEN(rb_ary_entry(argv[2], 0));
    } else {
      cols = 0;
    }
    
    arg3 = new boost::numeric::ublas::matrix<int>(rows, cols);
    for (i = 0; i < rows; ++i) {
      row = rb_ary_entry(argv[2], i);
      if (RARRAY_LEN(row) != cols) {
        SWIG_exception_fail(SWIG_ERROR, "ragged array not allowed");
      }
      for (j = 0; j < cols; ++j) {
        (*arg3)(i, j) = NUM2INT(rb_ary_entry(row, j));
      }
    }
  }
  {
    try {
      result = si_taxi::BWSNNHandler::choose_veh((si_taxi::BWPax const &)*arg1,(std::vector< si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > > const &)*arg2,(boost::numeric::ublas::matrix< int > const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  {
    delete arg3;
  }
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSNNHandler_update_veh(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWPax *arg1 = 0 ;
  si_taxi::BWVehicle *arg2 = 0 ;
  boost::numeric::ublas::matrix< int > *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  si_taxi::BWTime result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_si_taxi__BWPax,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWPax const &","si_taxi::BWSNNHandler::update_veh", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "si_taxi::BWPax const &","si_taxi::BWSNNHandler::update_veh", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< si_taxi::BWPax * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_si_taxi__BWVehicle,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "si_taxi::BWVehicle &","si_taxi::BWSNNHandler::update_veh", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "si_taxi::BWVehicle &","si_taxi::BWSNNHandler::update_veh", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< si_taxi::BWVehicle * >(argp2);
  {
    int i, j, rows, cols;
    VALUE row;
    
    if (!rb_obj_is_kind_of(argv[2], rb_cArray)) {
      SWIG_exception_fail(SWIG_ERROR, "not an array");
    }
    
    rows = RARRAY_LEN(argv[2]);
    if (rows > 0) {
      cols = RARRAY_LEN(rb_ary_entry(argv[2], 0));
    } else {
      cols = 0;
    }
    
    arg3 = new boost::numeric::ublas::matrix<int>(rows, cols);
    for (i = 0; i < rows; ++i) {
      row = rb_ary_entry(argv[2], i);
      if (RARRAY_LEN(row) != cols) {
        SWIG_exception_fail(SWIG_ERROR, "ragged array not allowed");
      }
      for (j = 0; j < cols; ++j) {
        (*arg3)(i, j) = NUM2INT(rb_ary_entry(row, j));
      }
    }
  }
  {
    try {
      result = (si_taxi::BWTime)si_taxi::BWSNNHandler::update_veh((si_taxi::BWPax const &)*arg1,*arg2,(boost::numeric::ublas::matrix< int > const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  {
    delete arg3;
  }
  return vresult;
fail:
  {
    delete arg3;
  }
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSNNHandler_handle_pax(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSNNHandler *arg1 = (si_taxi::BWSNNHandler *) 0 ;
  si_taxi::BWPax *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  size_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSNNHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSNNHandler *","handle_pax", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSNNHandler * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_si_taxi__BWPax,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "si_taxi::BWPax const &","handle_pax", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "si_taxi::BWPax const &","handle_pax", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< si_taxi::BWPax * >(argp2);
  {
    try {
      result = (arg1)->handle_pax((si_taxi::BWPax const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


swig_class SwigClassBWPoissonPaxStream;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_BWPoissonPaxStream_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_BWPoissonPaxStream_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_si_taxi__BWPoissonPaxStream);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_BWPoissonPaxStream(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  boost::numeric::ublas::matrix< double > arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  const char *classname SWIGUNUSED = "SiTaxi::BWPoissonPaxStream";
  si_taxi::BWPoissonPaxStream *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","si_taxi::BWPoissonPaxStream", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  {
    int i, j, rows, cols;
    VALUE row;
    
    if (!rb_obj_is_kind_of(argv[1], rb_cArray)) {
      SWIG_exception_fail(SWIG_ERROR, "not an array");
    }
    
    rows = RARRAY_LEN(argv[1]);
    if (rows > 0) {
      cols = RARRAY_LEN(rb_ary_entry(argv[1], 0));
    } else {
      cols = 0;
    }
    
    arg2 = boost::numeric::ublas::matrix<double>(rows, cols);
    for (i = 0; i < rows; ++i) {
      row = rb_ary_entry(argv[1], i);
      if (RARRAY_LEN(row) != cols) {
        SWIG_exception_fail(SWIG_ERROR, "ragged array not allowed");
      }
      for (j = 0; j < cols; ++j) {
        arg2(i, j) = NUM2DBL(rb_ary_entry(row, j));
      }
    }
  }
  {
    try {
      result = (si_taxi::BWPoissonPaxStream *)new si_taxi::BWPoissonPaxStream(arg1,arg2);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWPoissonPaxStream_next_pax(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWPoissonPaxStream *arg1 = (si_taxi::BWPoissonPaxStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  si_taxi::BWPax result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWPoissonPaxStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWPoissonPaxStream *","next_pax", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWPoissonPaxStream * >(argp1);
  {
    try {
      result = (arg1)->next_pax();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new si_taxi::BWPax(static_cast< const si_taxi::BWPax& >(result))), SWIGTYPE_p_si_taxi__BWPax, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWPoissonPaxStream_reset(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWPoissonPaxStream *arg1 = (si_taxi::BWPoissonPaxStream *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWPoissonPaxStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWPoissonPaxStream *","reset", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWPoissonPaxStream * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","reset", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->reset(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWPoissonPaxStream_last_time_set(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWPoissonPaxStream *arg1 = (si_taxi::BWPoissonPaxStream *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWPoissonPaxStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWPoissonPaxStream *","last_time", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWPoissonPaxStream * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","last_time", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->last_time = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWPoissonPaxStream_last_time_get(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWPoissonPaxStream *arg1 = (si_taxi::BWPoissonPaxStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWPoissonPaxStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWPoissonPaxStream *","last_time", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWPoissonPaxStream * >(argp1);
  result = (double) ((arg1)->last_time);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWPoissonPaxStream_od(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWPoissonPaxStream *arg1 = (si_taxi::BWPoissonPaxStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  si_taxi::ODMatrixWrapper *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWPoissonPaxStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWPoissonPaxStream const *","od", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWPoissonPaxStream * >(argp1);
  {
    try {
      result = (si_taxi::ODMatrixWrapper *) &((si_taxi::BWPoissonPaxStream const *)arg1)->od();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_si_taxi__ODMatrixWrapper, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_si_taxi_BWPoissonPaxStream(si_taxi::BWPoissonPaxStream *arg1) {
    delete arg1;
}

swig_class SwigClassBWTestPaxStream;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_BWTestPaxStream_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_BWTestPaxStream_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_si_taxi__BWTestPaxStream);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_BWTestPaxStream(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "SiTaxi::BWTestPaxStream";
  si_taxi::BWTestPaxStream *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (si_taxi::BWTestPaxStream *)new si_taxi::BWTestPaxStream();
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWTestPaxStream_next_pax(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWTestPaxStream *arg1 = (si_taxi::BWTestPaxStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  si_taxi::BWPax result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWTestPaxStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWTestPaxStream *","next_pax", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWTestPaxStream * >(argp1);
  {
    try {
      result = (arg1)->next_pax();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new si_taxi::BWPax(static_cast< const si_taxi::BWPax& >(result))), SWIGTYPE_p_si_taxi__BWPax, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWTestPaxStream_reset(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWTestPaxStream *arg1 = (si_taxi::BWTestPaxStream *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWTestPaxStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWTestPaxStream *","reset", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWTestPaxStream * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","reset", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->reset(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWTestPaxStream_pax_set(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWTestPaxStream *arg1 = (si_taxi::BWTestPaxStream *) 0 ;
  std::queue< si_taxi::BWPax,std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > *arg2 = (std::queue< si_taxi::BWPax,std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWTestPaxStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWTestPaxStream *","pax", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWTestPaxStream * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_std__queueT_si_taxi__BWPax_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::queue< si_taxi::BWPax,std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > *","pax", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< std::queue< si_taxi::BWPax,std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > * >(argp2);
  if (arg1) (arg1)->pax = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWTestPaxStream_pax_get(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWTestPaxStream *arg1 = (si_taxi::BWTestPaxStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::queue< si_taxi::BWPax,std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWTestPaxStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWTestPaxStream *","pax", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWTestPaxStream * >(argp1);
  result = (std::queue< si_taxi::BWPax,std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > *)& ((arg1)->pax);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__queueT_si_taxi__BWPax_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_si_taxi_BWTestPaxStream(si_taxi::BWTestPaxStream *arg1) {
    delete arg1;
}

swig_class SwigClassBWCallTimeTracker;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_BWCallTimeTracker_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_BWCallTimeTracker_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_si_taxi__BWCallTimeTracker);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_BWCallTimeTracker(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSim *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  const char *classname SWIGUNUSED = "SiTaxi::BWCallTimeTracker";
  si_taxi::BWCallTimeTracker *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_si_taxi__BWSim,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSim &","si_taxi::BWCallTimeTracker", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "si_taxi::BWSim &","si_taxi::BWCallTimeTracker", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSim * >(argp1);
  {
    try {
      result = (si_taxi::BWCallTimeTracker *)new si_taxi::BWCallTimeTracker(*arg1);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWCallTimeTracker_call_time_set(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWCallTimeTracker *arg1 = (si_taxi::BWCallTimeTracker *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = (std::vector< double,std::allocator< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWCallTimeTracker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWCallTimeTracker *","call_time", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWCallTimeTracker * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< double,std::allocator< double > > *","call_time", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  if (arg1) (arg1)->call_time = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWCallTimeTracker_call_time_get(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWCallTimeTracker *arg1 = (si_taxi::BWCallTimeTracker *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWCallTimeTracker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWCallTimeTracker *","call_time", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWCallTimeTracker * >(argp1);
  result = (std::vector< double,std::allocator< double > > *)& ((arg1)->call_time);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWCallTimeTracker_call_set(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWCallTimeTracker *arg1 = (si_taxi::BWCallTimeTracker *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = (std::vector< int,std::allocator< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWCallTimeTracker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWCallTimeTracker *","call", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWCallTimeTracker * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< int,std::allocator< int > > *","call", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< std::vector< int,std::allocator< int > > * >(argp2);
  if (arg1) (arg1)->call = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWCallTimeTracker_call_get(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWCallTimeTracker *arg1 = (si_taxi::BWCallTimeTracker *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWCallTimeTracker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWCallTimeTracker *","call", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWCallTimeTracker * >(argp1);
  result = (std::vector< int,std::allocator< int > > *)& ((arg1)->call);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWCallTimeTracker_init(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWCallTimeTracker *arg1 = (si_taxi::BWCallTimeTracker *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWCallTimeTracker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWCallTimeTracker *","init", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWCallTimeTracker * >(argp1);
  {
    try {
      (arg1)->init();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWCallTimeTracker.at

  call-seq:
    at(i) -> double

Return element at a certain index.
*/
SWIGINTERN VALUE
_wrap_BWCallTimeTracker_at(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWCallTimeTracker *arg1 = (si_taxi::BWCallTimeTracker *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWCallTimeTracker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWCallTimeTracker const *","at", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWCallTimeTracker * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","at", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      result = (double)((si_taxi::BWCallTimeTracker const *)arg1)->at(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWCallTimeTracker_update(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWCallTimeTracker *arg1 = (si_taxi::BWCallTimeTracker *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWCallTimeTracker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWCallTimeTracker *","update", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWCallTimeTracker * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","update", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "size_t","update", 3, argv[1] ));
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      (arg1)->update(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWCallTimeTracker_num_vehicles_inbound_in_call_time(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWCallTimeTracker *arg1 = (si_taxi::BWCallTimeTracker *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWCallTimeTracker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWCallTimeTracker const *","num_vehicles_inbound_in_call_time", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWCallTimeTracker * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","num_vehicles_inbound_in_call_time", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      result = (int)((si_taxi::BWCallTimeTracker const *)arg1)->num_vehicles_inbound_in_call_time(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWCallTimeTracker_num_vehicles_immediately_inbound_in_call_time(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWCallTimeTracker *arg1 = (si_taxi::BWCallTimeTracker *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWCallTimeTracker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWCallTimeTracker const *","num_vehicles_immediately_inbound_in_call_time", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWCallTimeTracker * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","num_vehicles_immediately_inbound_in_call_time", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      result = (int)((si_taxi::BWCallTimeTracker const *)arg1)->num_vehicles_immediately_inbound_in_call_time(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_si_taxi_BWCallTimeTracker(si_taxi::BWCallTimeTracker *arg1) {
    delete arg1;
}

swig_class SwigClassBWNNHandlerWithCallTimeUpdates;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_BWNNHandlerWithCallTimeUpdates_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_BWNNHandlerWithCallTimeUpdates_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_si_taxi__BWNNHandlerWithCallTimeUpdates);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_BWNNHandlerWithCallTimeUpdates(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSim *arg1 = 0 ;
  si_taxi::BWCallTimeTracker *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  const char *classname SWIGUNUSED = "SiTaxi::BWNNHandlerWithCallTimeUpdates";
  si_taxi::BWNNHandlerWithCallTimeUpdates *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_si_taxi__BWSim,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSim &","si_taxi::BWNNHandlerWithCallTimeUpdates", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "si_taxi::BWSim &","si_taxi::BWNNHandlerWithCallTimeUpdates", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSim * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_si_taxi__BWCallTimeTracker,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "si_taxi::BWCallTimeTracker &","si_taxi::BWNNHandlerWithCallTimeUpdates", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "si_taxi::BWCallTimeTracker &","si_taxi::BWNNHandlerWithCallTimeUpdates", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< si_taxi::BWCallTimeTracker * >(argp2);
  {
    try {
      result = (si_taxi::BWNNHandlerWithCallTimeUpdates *)new si_taxi::BWNNHandlerWithCallTimeUpdates(*arg1,*arg2);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_si_taxi_BWNNHandlerWithCallTimeUpdates(si_taxi::BWNNHandlerWithCallTimeUpdates *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_BWNNHandlerWithCallTimeUpdates_handle_pax(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWNNHandlerWithCallTimeUpdates *arg1 = (si_taxi::BWNNHandlerWithCallTimeUpdates *) 0 ;
  si_taxi::BWPax *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  size_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWNNHandlerWithCallTimeUpdates, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWNNHandlerWithCallTimeUpdates *","handle_pax", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWNNHandlerWithCallTimeUpdates * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_si_taxi__BWPax,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "si_taxi::BWPax const &","handle_pax", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "si_taxi::BWPax const &","handle_pax", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< si_taxi::BWPax * >(argp2);
  {
    try {
      result = (arg1)->handle_pax((si_taxi::BWPax const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWNNHandlerWithCallTimeUpdates_init(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWNNHandlerWithCallTimeUpdates *arg1 = (si_taxi::BWNNHandlerWithCallTimeUpdates *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWNNHandlerWithCallTimeUpdates, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWNNHandlerWithCallTimeUpdates *","init", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWNNHandlerWithCallTimeUpdates * >(argp1);
  {
    try {
      (arg1)->init();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWNNHandlerWithCallTimeUpdates_call_time(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWNNHandlerWithCallTimeUpdates *arg1 = (si_taxi::BWNNHandlerWithCallTimeUpdates *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  si_taxi::BWCallTimeTracker *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWNNHandlerWithCallTimeUpdates, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWNNHandlerWithCallTimeUpdates const *","call_time", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWNNHandlerWithCallTimeUpdates * >(argp1);
  {
    try {
      result = (si_taxi::BWCallTimeTracker *) &((si_taxi::BWNNHandlerWithCallTimeUpdates const *)arg1)->call_time();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_si_taxi__BWCallTimeTracker, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


swig_class SwigClassBWAndreassonHandler;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_BWAndreassonHandler_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_BWAndreassonHandler_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_si_taxi__BWAndreassonHandler);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_BWAndreassonHandler(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSim *arg1 = 0 ;
  si_taxi::BWCallTimeTracker *arg2 = 0 ;
  boost::numeric::ublas::matrix< double > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  const char *classname SWIGUNUSED = "SiTaxi::BWAndreassonHandler";
  si_taxi::BWAndreassonHandler *result = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_si_taxi__BWSim,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSim &","si_taxi::BWAndreassonHandler", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "si_taxi::BWSim &","si_taxi::BWAndreassonHandler", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSim * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_si_taxi__BWCallTimeTracker,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "si_taxi::BWCallTimeTracker &","si_taxi::BWAndreassonHandler", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "si_taxi::BWCallTimeTracker &","si_taxi::BWAndreassonHandler", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< si_taxi::BWCallTimeTracker * >(argp2);
  {
    int i, j, rows, cols;
    VALUE row;
    
    if (!rb_obj_is_kind_of(argv[2], rb_cArray)) {
      SWIG_exception_fail(SWIG_ERROR, "not an array");
    }
    
    rows = RARRAY_LEN(argv[2]);
    if (rows > 0) {
      cols = RARRAY_LEN(rb_ary_entry(argv[2], 0));
    } else {
      cols = 0;
    }
    
    arg3 = boost::numeric::ublas::matrix<double>(rows, cols);
    for (i = 0; i < rows; ++i) {
      row = rb_ary_entry(argv[2], i);
      if (RARRAY_LEN(row) != cols) {
        SWIG_exception_fail(SWIG_ERROR, "ragged array not allowed");
      }
      for (j = 0; j < cols; ++j) {
        arg3(i, j) = NUM2DBL(rb_ary_entry(row, j));
      }
    }
  }
  {
    try {
      result = (si_taxi::BWAndreassonHandler *)new si_taxi::BWAndreassonHandler(*arg1,*arg2,arg3);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWAndreassonHandler_init(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWAndreassonHandler *arg1 = (si_taxi::BWAndreassonHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWAndreassonHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWAndreassonHandler *","init", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWAndreassonHandler * >(argp1);
  {
    try {
      (arg1)->init();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWAndreassonHandler_handle_pax_served(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWAndreassonHandler *arg1 = (si_taxi::BWAndreassonHandler *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWAndreassonHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWAndreassonHandler *","handle_pax_served", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWAndreassonHandler * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","handle_pax_served", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      (arg1)->handle_pax_served(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWAndreassonHandler_handle_idle(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWAndreassonHandler *arg1 = (si_taxi::BWAndreassonHandler *) 0 ;
  si_taxi::BWVehicle *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWAndreassonHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWAndreassonHandler *","handle_idle", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWAndreassonHandler * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_si_taxi__BWVehicle,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "si_taxi::BWVehicle &","handle_idle", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "si_taxi::BWVehicle &","handle_idle", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< si_taxi::BWVehicle * >(argp2);
  {
    try {
      (arg1)->handle_idle(*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWAndreassonHandler_supply_at(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWAndreassonHandler *arg1 = (si_taxi::BWAndreassonHandler *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWAndreassonHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWAndreassonHandler const *","supply_at", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWAndreassonHandler * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","supply_at", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      result = (int)((si_taxi::BWAndreassonHandler const *)arg1)->supply_at(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWAndreassonHandler_demand_at(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWAndreassonHandler *arg1 = (si_taxi::BWAndreassonHandler *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWAndreassonHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWAndreassonHandler const *","demand_at", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWAndreassonHandler * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","demand_at", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      result = (double)((si_taxi::BWAndreassonHandler const *)arg1)->demand_at(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWAndreassonHandler_surplus(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWAndreassonHandler *arg1 = (si_taxi::BWAndreassonHandler *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWAndreassonHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWAndreassonHandler const *","surplus", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWAndreassonHandler * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","surplus", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      result = (double)((si_taxi::BWAndreassonHandler const *)arg1)->surplus(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWAndreassonHandler_find_call_origin(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWAndreassonHandler *arg1 = (si_taxi::BWAndreassonHandler *) 0 ;
  size_t arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  size_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWAndreassonHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWAndreassonHandler const *","find_call_origin", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWAndreassonHandler * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","find_call_origin", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","find_call_origin", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = ((si_taxi::BWAndreassonHandler const *)arg1)->find_call_origin(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWAndreassonHandler_find_send_destin(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWAndreassonHandler *arg1 = (si_taxi::BWAndreassonHandler *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWAndreassonHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWAndreassonHandler const *","find_send_destin", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWAndreassonHandler * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","find_send_destin", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      result = ((si_taxi::BWAndreassonHandler const *)arg1)->find_send_destin(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWAndreassonHandler_call_time(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWAndreassonHandler *arg1 = (si_taxi::BWAndreassonHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  si_taxi::BWCallTimeTracker *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWAndreassonHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWAndreassonHandler const *","call_time", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWAndreassonHandler * >(argp1);
  {
    try {
      result = (si_taxi::BWCallTimeTracker *) &((si_taxi::BWAndreassonHandler const *)arg1)->call_time();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_si_taxi__BWCallTimeTracker, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWAndreassonHandler_od(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWAndreassonHandler *arg1 = (si_taxi::BWAndreassonHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  si_taxi::ODMatrixWrapper *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWAndreassonHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWAndreassonHandler const *","od", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWAndreassonHandler * >(argp1);
  {
    try {
      result = (si_taxi::ODMatrixWrapper *) &((si_taxi::BWAndreassonHandler const *)arg1)->od();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_si_taxi__ODMatrixWrapper, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWAndreassonHandler_immediate_inbound_only_set(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWAndreassonHandler *arg1 = (si_taxi::BWAndreassonHandler *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWAndreassonHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWAndreassonHandler *","immediate_inbound_only", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWAndreassonHandler * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","immediate_inbound_only", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->immediate_inbound_only = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWAndreassonHandler_immediate_inbound_only_get(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWAndreassonHandler *arg1 = (si_taxi::BWAndreassonHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWAndreassonHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWAndreassonHandler *","immediate_inbound_only", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWAndreassonHandler * >(argp1);
  result = (bool) ((arg1)->immediate_inbound_only);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWAndreassonHandler_use_call_times_for_inbound_set(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWAndreassonHandler *arg1 = (si_taxi::BWAndreassonHandler *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWAndreassonHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWAndreassonHandler *","use_call_times_for_inbound", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWAndreassonHandler * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","use_call_times_for_inbound", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->use_call_times_for_inbound = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWAndreassonHandler_use_call_times_for_inbound_get(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWAndreassonHandler *arg1 = (si_taxi::BWAndreassonHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWAndreassonHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWAndreassonHandler *","use_call_times_for_inbound", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWAndreassonHandler * >(argp1);
  result = (bool) ((arg1)->use_call_times_for_inbound);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWAndreassonHandler_use_call_times_for_targets_set(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWAndreassonHandler *arg1 = (si_taxi::BWAndreassonHandler *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWAndreassonHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWAndreassonHandler *","use_call_times_for_targets", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWAndreassonHandler * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","use_call_times_for_targets", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->use_call_times_for_targets = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWAndreassonHandler_use_call_times_for_targets_get(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWAndreassonHandler *arg1 = (si_taxi::BWAndreassonHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWAndreassonHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWAndreassonHandler *","use_call_times_for_targets", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWAndreassonHandler * >(argp1);
  result = (bool) ((arg1)->use_call_times_for_targets);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWAndreassonHandler_send_when_over_set(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWAndreassonHandler *arg1 = (si_taxi::BWAndreassonHandler *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWAndreassonHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWAndreassonHandler *","send_when_over", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWAndreassonHandler * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","send_when_over", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->send_when_over = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWAndreassonHandler_send_when_over_get(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWAndreassonHandler *arg1 = (si_taxi::BWAndreassonHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWAndreassonHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWAndreassonHandler *","send_when_over", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWAndreassonHandler * >(argp1);
  result = (bool) ((arg1)->send_when_over);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWAndreassonHandler_call_only_from_surplus_set(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWAndreassonHandler *arg1 = (si_taxi::BWAndreassonHandler *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWAndreassonHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWAndreassonHandler *","call_only_from_surplus", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWAndreassonHandler * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","call_only_from_surplus", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->call_only_from_surplus = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWAndreassonHandler_call_only_from_surplus_get(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWAndreassonHandler *arg1 = (si_taxi::BWAndreassonHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWAndreassonHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWAndreassonHandler *","call_only_from_surplus", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWAndreassonHandler * >(argp1);
  result = (bool) ((arg1)->call_only_from_surplus);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWAndreassonHandler_surplus_threshold_set(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWAndreassonHandler *arg1 = (si_taxi::BWAndreassonHandler *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWAndreassonHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWAndreassonHandler *","surplus_threshold", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWAndreassonHandler * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","surplus_threshold", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->surplus_threshold = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWAndreassonHandler_surplus_threshold_get(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWAndreassonHandler *arg1 = (si_taxi::BWAndreassonHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWAndreassonHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWAndreassonHandler *","surplus_threshold", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWAndreassonHandler * >(argp1);
  result = (double) ((arg1)->surplus_threshold);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWAndreassonHandler_targets_set(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWAndreassonHandler *arg1 = (si_taxi::BWAndreassonHandler *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = (std::vector< int,std::allocator< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWAndreassonHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWAndreassonHandler *","targets", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWAndreassonHandler * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< int,std::allocator< int > > *","targets", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< std::vector< int,std::allocator< int > > * >(argp2);
  if (arg1) (arg1)->targets = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWAndreassonHandler_targets_get(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWAndreassonHandler *arg1 = (si_taxi::BWAndreassonHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWAndreassonHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWAndreassonHandler *","targets", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWAndreassonHandler * >(argp1);
  result = (std::vector< int,std::allocator< int > > *)& ((arg1)->targets);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWAndreassonHandler_preferred_set(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWAndreassonHandler *arg1 = (si_taxi::BWAndreassonHandler *) 0 ;
  boost::numeric::ublas::matrix< bool > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWAndreassonHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWAndreassonHandler *","preferred", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWAndreassonHandler * >(argp1);
  {
    int i, j, rows, cols;
    VALUE row;
    
    if (!rb_obj_is_kind_of(argv[0], rb_cArray)) {
      SWIG_exception_fail(SWIG_ERROR, "not an array");
    }
    
    rows = RARRAY_LEN(argv[0]);
    if (rows > 0) {
      cols = RARRAY_LEN(rb_ary_entry(argv[0], 0));
    } else {
      cols = 0;
    }
    
    arg2 = boost::numeric::ublas::matrix<bool>(rows, cols);
    for (i = 0; i < rows; ++i) {
      row = rb_ary_entry(argv[0], i);
      if (RARRAY_LEN(row) != cols) {
        SWIG_exception_fail(SWIG_ERROR, "ragged array not allowed");
      }
      for (j = 0; j < cols; ++j) {
        arg2(i, j) = (bool)(rb_ary_entry(row, j));
      }
    }
  }
  if (arg1) (arg1)->preferred = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWAndreassonHandler_preferred_get(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWAndreassonHandler *arg1 = (si_taxi::BWAndreassonHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::numeric::ublas::matrix< bool > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWAndreassonHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWAndreassonHandler *","preferred", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWAndreassonHandler * >(argp1);
  result =  ((arg1)->preferred);
  {
    int i, j, rows, cols;
    VALUE row;
    
    rows = (int) (&result)->size1();
    cols = (int) (&result)->size2();
    vresult = rb_ary_new2(rows);
    for (i = 0; i < rows; ++i) {
      row = rb_ary_new2(cols);
      rb_ary_push(vresult, row);
      for (j = 0; j < cols; ++j) {
        rb_ary_push(row, SWIG_From_bool(result(i, j)));
      }
    }
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWAndreassonHandler_call_queue_set(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWAndreassonHandler *arg1 = (si_taxi::BWAndreassonHandler *) 0 ;
  std::queue< int,std::deque< int,std::allocator< int > > > *arg2 = (std::queue< int,std::deque< int,std::allocator< int > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWAndreassonHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWAndreassonHandler *","call_queue", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWAndreassonHandler * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_std__queueT_int_std__dequeT_int_std__allocatorT_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::queue< int,std::deque< int,std::allocator< int > > > *","call_queue", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< std::queue< int,std::deque< int,std::allocator< int > > > * >(argp2);
  if (arg1) (arg1)->call_queue = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWAndreassonHandler_call_queue_get(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWAndreassonHandler *arg1 = (si_taxi::BWAndreassonHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::queue< int,std::deque< int,std::allocator< int > > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWAndreassonHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWAndreassonHandler *","call_queue", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWAndreassonHandler * >(argp1);
  result = (std::queue< int,std::deque< int,std::allocator< int > > > *)& ((arg1)->call_queue);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__queueT_int_std__dequeT_int_std__allocatorT_int_t_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_si_taxi_BWAndreassonHandler(si_taxi::BWAndreassonHandler *arg1) {
    delete arg1;
}

swig_class SwigClassBWDynamicTransportationProblemHandler;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_BWDynamicTransportationProblemHandler_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_BWDynamicTransportationProblemHandler_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_si_taxi__BWDynamicTransportationProblemHandler);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_BWDynamicTransportationProblemHandler(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSim *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  const char *classname SWIGUNUSED = "SiTaxi::BWDynamicTransportationProblemHandler";
  si_taxi::BWDynamicTransportationProblemHandler *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_si_taxi__BWSim,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSim &","si_taxi::BWDynamicTransportationProblemHandler", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "si_taxi::BWSim &","si_taxi::BWDynamicTransportationProblemHandler", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSim * >(argp1);
  {
    try {
      result = (si_taxi::BWDynamicTransportationProblemHandler *)new si_taxi::BWDynamicTransportationProblemHandler(*arg1);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_si_taxi_BWDynamicTransportationProblemHandler(si_taxi::BWDynamicTransportationProblemHandler *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_BWDynamicTransportationProblemHandler_handle_pax_served(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWDynamicTransportationProblemHandler *arg1 = (si_taxi::BWDynamicTransportationProblemHandler *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWDynamicTransportationProblemHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWDynamicTransportationProblemHandler *","handle_pax_served", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWDynamicTransportationProblemHandler * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","handle_pax_served", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      (arg1)->handle_pax_served(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWDynamicTransportationProblemHandler_handle_idle(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWDynamicTransportationProblemHandler *arg1 = (si_taxi::BWDynamicTransportationProblemHandler *) 0 ;
  si_taxi::BWVehicle *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWDynamicTransportationProblemHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWDynamicTransportationProblemHandler *","handle_idle", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWDynamicTransportationProblemHandler * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_si_taxi__BWVehicle,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "si_taxi::BWVehicle &","handle_idle", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "si_taxi::BWVehicle &","handle_idle", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< si_taxi::BWVehicle * >(argp2);
  {
    try {
      (arg1)->handle_idle(*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWDynamicTransportationProblemHandler_handle_strobe(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWDynamicTransportationProblemHandler *arg1 = (si_taxi::BWDynamicTransportationProblemHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWDynamicTransportationProblemHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWDynamicTransportationProblemHandler *","handle_strobe", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWDynamicTransportationProblemHandler * >(argp1);
  {
    try {
      (arg1)->handle_strobe();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWDynamicTransportationProblemHandler_redistribute(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWDynamicTransportationProblemHandler *arg1 = (si_taxi::BWDynamicTransportationProblemHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWDynamicTransportationProblemHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWDynamicTransportationProblemHandler *","redistribute", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWDynamicTransportationProblemHandler * >(argp1);
  {
    try {
      (arg1)->redistribute();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWDynamicTransportationProblemHandler_num_stations(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWDynamicTransportationProblemHandler *arg1 = (si_taxi::BWDynamicTransportationProblemHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWDynamicTransportationProblemHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWDynamicTransportationProblemHandler const *","num_stations", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWDynamicTransportationProblemHandler * >(argp1);
  {
    try {
      result = (int)((si_taxi::BWDynamicTransportationProblemHandler const *)arg1)->num_stations();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWDynamicTransportationProblemHandler_num_nodes(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWDynamicTransportationProblemHandler *arg1 = (si_taxi::BWDynamicTransportationProblemHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWDynamicTransportationProblemHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWDynamicTransportationProblemHandler const *","num_nodes", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWDynamicTransportationProblemHandler * >(argp1);
  {
    try {
      result = (int)((si_taxi::BWDynamicTransportationProblemHandler const *)arg1)->num_nodes();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWDynamicTransportationProblemHandler_num_arcs(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWDynamicTransportationProblemHandler *arg1 = (si_taxi::BWDynamicTransportationProblemHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWDynamicTransportationProblemHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWDynamicTransportationProblemHandler const *","num_arcs", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWDynamicTransportationProblemHandler * >(argp1);
  {
    try {
      result = (int)((si_taxi::BWDynamicTransportationProblemHandler const *)arg1)->num_arcs();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWDynamicTransportationProblemHandler_source_node(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWDynamicTransportationProblemHandler *arg1 = (si_taxi::BWDynamicTransportationProblemHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWDynamicTransportationProblemHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWDynamicTransportationProblemHandler const *","source_node", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWDynamicTransportationProblemHandler * >(argp1);
  {
    try {
      result = (int)((si_taxi::BWDynamicTransportationProblemHandler const *)arg1)->source_node();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWDynamicTransportationProblemHandler_sink_node(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWDynamicTransportationProblemHandler *arg1 = (si_taxi::BWDynamicTransportationProblemHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWDynamicTransportationProblemHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWDynamicTransportationProblemHandler const *","sink_node", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWDynamicTransportationProblemHandler * >(argp1);
  {
    try {
      result = (int)((si_taxi::BWDynamicTransportationProblemHandler const *)arg1)->sink_node();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWDynamicTransportationProblemHandler_dump_problem(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWDynamicTransportationProblemHandler *arg1 = (si_taxi::BWDynamicTransportationProblemHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWDynamicTransportationProblemHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWDynamicTransportationProblemHandler *","dump_problem", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWDynamicTransportationProblemHandler * >(argp1);
  {
    try {
      result = (arg1)->dump_problem();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new std::string(static_cast< const std::string& >(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWDynamicTransportationProblemHandler_targets_set(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWDynamicTransportationProblemHandler *arg1 = (si_taxi::BWDynamicTransportationProblemHandler *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = (std::vector< int,std::allocator< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWDynamicTransportationProblemHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWDynamicTransportationProblemHandler *","targets", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWDynamicTransportationProblemHandler * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< int,std::allocator< int > > *","targets", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< std::vector< int,std::allocator< int > > * >(argp2);
  if (arg1) (arg1)->targets = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWDynamicTransportationProblemHandler_targets_get(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWDynamicTransportationProblemHandler *arg1 = (si_taxi::BWDynamicTransportationProblemHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWDynamicTransportationProblemHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWDynamicTransportationProblemHandler *","targets", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWDynamicTransportationProblemHandler * >(argp1);
  result = (std::vector< int,std::allocator< int > > *)& ((arg1)->targets);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


swig_class SwigClassBWSamplingVotingHandler;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_BWSamplingVotingHandler_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_BWSamplingVotingHandler_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_si_taxi__BWSamplingVotingHandler);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_BWSamplingVotingHandler(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSim *arg1 = 0 ;
  si_taxi::BWPaxStream *arg2 = (si_taxi::BWPaxStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  const char *classname SWIGUNUSED = "SiTaxi::BWSamplingVotingHandler";
  si_taxi::BWSamplingVotingHandler *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_si_taxi__BWSim,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSim &","si_taxi::BWSamplingVotingHandler", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "si_taxi::BWSim &","si_taxi::BWSamplingVotingHandler", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSim * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_si_taxi__BWPaxStream, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "si_taxi::BWPaxStream *","si_taxi::BWSamplingVotingHandler", 2, argv[1] )); 
  }
  arg2 = reinterpret_cast< si_taxi::BWPaxStream * >(argp2);
  {
    try {
      result = (si_taxi::BWSamplingVotingHandler *)new si_taxi::BWSamplingVotingHandler(*arg1,arg2);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSamplingVotingHandler_handle_pax_served(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSamplingVotingHandler *arg1 = (si_taxi::BWSamplingVotingHandler *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSamplingVotingHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSamplingVotingHandler *","handle_pax_served", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSamplingVotingHandler * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","handle_pax_served", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      (arg1)->handle_pax_served(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSamplingVotingHandler_handle_idle(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSamplingVotingHandler *arg1 = (si_taxi::BWSamplingVotingHandler *) 0 ;
  si_taxi::BWVehicle *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSamplingVotingHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSamplingVotingHandler *","handle_idle", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSamplingVotingHandler * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_si_taxi__BWVehicle,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "si_taxi::BWVehicle &","handle_idle", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "si_taxi::BWVehicle &","handle_idle", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< si_taxi::BWVehicle * >(argp2);
  {
    try {
      (arg1)->handle_idle(*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSamplingVotingHandler_handle_strobe(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSamplingVotingHandler *arg1 = (si_taxi::BWSamplingVotingHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSamplingVotingHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSamplingVotingHandler *","handle_strobe", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSamplingVotingHandler * >(argp1);
  {
    try {
      (arg1)->handle_strobe();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSamplingVotingHandler_clone_sim_vehs(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSamplingVotingHandler *arg1 = (si_taxi::BWSamplingVotingHandler *) 0 ;
  std::vector< si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSamplingVotingHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSamplingVotingHandler const *","clone_sim_vehs", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSamplingVotingHandler * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > > &","clone_sim_vehs", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > > &","clone_sim_vehs", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > > * >(argp2);
  {
    try {
      ((si_taxi::BWSamplingVotingHandler const *)arg1)->clone_sim_vehs(*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSamplingVotingHandler_sample(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSamplingVotingHandler *arg1 = (si_taxi::BWSamplingVotingHandler *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  si_taxi::ODHistogram *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSamplingVotingHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSamplingVotingHandler *","sample", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSamplingVotingHandler * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< int,std::allocator< int > > const &","sample", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< int,std::allocator< int > > const &","sample", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_si_taxi__ODHistogram,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "si_taxi::ODHistogram &","sample", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "si_taxi::ODHistogram &","sample", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< si_taxi::ODHistogram * >(argp3);
  {
    try {
      (arg1)->sample((std::vector< int,std::allocator< int > > const &)*arg2,*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSamplingVotingHandler_best_destin(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSamplingVotingHandler *arg1 = (si_taxi::BWSamplingVotingHandler *) 0 ;
  size_t arg2 ;
  si_taxi::ODHistogram *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  size_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSamplingVotingHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSamplingVotingHandler *","best_destin", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSamplingVotingHandler * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","best_destin", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_si_taxi__ODHistogram,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "si_taxi::ODHistogram const &","best_destin", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "si_taxi::ODHistogram const &","best_destin", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< si_taxi::ODHistogram * >(argp3);
  {
    try {
      result = (arg1)->best_destin(arg2,(si_taxi::ODHistogram const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSamplingVotingHandler_move_to_best_destin_for_each_station(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSamplingVotingHandler *arg1 = (si_taxi::BWSamplingVotingHandler *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  si_taxi::ODHistogram *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSamplingVotingHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSamplingVotingHandler *","move_to_best_destin_for_each_station", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSamplingVotingHandler * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< int,std::allocator< int > > const &","move_to_best_destin_for_each_station", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< int,std::allocator< int > > const &","move_to_best_destin_for_each_station", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_si_taxi__ODHistogram,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "si_taxi::ODHistogram const &","move_to_best_destin_for_each_station", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "si_taxi::ODHistogram const &","move_to_best_destin_for_each_station", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< si_taxi::ODHistogram * >(argp3);
  {
    try {
      (arg1)->move_to_best_destin_for_each_station((std::vector< int,std::allocator< int > > const &)*arg2,(si_taxi::ODHistogram const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSamplingVotingHandler_pax_stream_set(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSamplingVotingHandler *arg1 = (si_taxi::BWSamplingVotingHandler *) 0 ;
  si_taxi::BWPaxStream *arg2 = (si_taxi::BWPaxStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSamplingVotingHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSamplingVotingHandler *","pax_stream", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSamplingVotingHandler * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_si_taxi__BWPaxStream, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "si_taxi::BWPaxStream *","pax_stream", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< si_taxi::BWPaxStream * >(argp2);
  if (arg1) (arg1)->pax_stream = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSamplingVotingHandler_pax_stream_get(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSamplingVotingHandler *arg1 = (si_taxi::BWSamplingVotingHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  si_taxi::BWPaxStream *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSamplingVotingHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSamplingVotingHandler *","pax_stream", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSamplingVotingHandler * >(argp1);
  result = (si_taxi::BWPaxStream *) ((arg1)->pax_stream);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_si_taxi__BWPaxStream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSamplingVotingHandler_num_sequences_set(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSamplingVotingHandler *arg1 = (si_taxi::BWSamplingVotingHandler *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSamplingVotingHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSamplingVotingHandler *","num_sequences", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSamplingVotingHandler * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","num_sequences", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  if (arg1) (arg1)->num_sequences = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSamplingVotingHandler_num_sequences_get(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSamplingVotingHandler *arg1 = (si_taxi::BWSamplingVotingHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSamplingVotingHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSamplingVotingHandler *","num_sequences", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSamplingVotingHandler * >(argp1);
  result =  ((arg1)->num_sequences);
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSamplingVotingHandler_num_pax_set(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSamplingVotingHandler *arg1 = (si_taxi::BWSamplingVotingHandler *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSamplingVotingHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSamplingVotingHandler *","num_pax", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSamplingVotingHandler * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","num_pax", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  if (arg1) (arg1)->num_pax = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSamplingVotingHandler_num_pax_get(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSamplingVotingHandler *arg1 = (si_taxi::BWSamplingVotingHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSamplingVotingHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSamplingVotingHandler *","num_pax", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSamplingVotingHandler * >(argp1);
  result =  ((arg1)->num_pax);
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_si_taxi_BWSamplingVotingHandler(si_taxi::BWSamplingVotingHandler *arg1) {
    delete arg1;
}

swig_class SwigClassBWSurplusDeficitHandler;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_BWSurplusDeficitHandler_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_BWSurplusDeficitHandler_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_si_taxi__BWSurplusDeficitHandler);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_BWSurplusDeficitHandler(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSim *arg1 = 0 ;
  si_taxi::BWCallTimeTracker *arg2 = 0 ;
  boost::numeric::ublas::matrix< double > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  const char *classname SWIGUNUSED = "SiTaxi::BWSurplusDeficitHandler";
  si_taxi::BWSurplusDeficitHandler *result = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_si_taxi__BWSim,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSim &","si_taxi::BWSurplusDeficitHandler", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "si_taxi::BWSim &","si_taxi::BWSurplusDeficitHandler", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSim * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_si_taxi__BWCallTimeTracker,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "si_taxi::BWCallTimeTracker &","si_taxi::BWSurplusDeficitHandler", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "si_taxi::BWCallTimeTracker &","si_taxi::BWSurplusDeficitHandler", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< si_taxi::BWCallTimeTracker * >(argp2);
  {
    int i, j, rows, cols;
    VALUE row;
    
    if (!rb_obj_is_kind_of(argv[2], rb_cArray)) {
      SWIG_exception_fail(SWIG_ERROR, "not an array");
    }
    
    rows = RARRAY_LEN(argv[2]);
    if (rows > 0) {
      cols = RARRAY_LEN(rb_ary_entry(argv[2], 0));
    } else {
      cols = 0;
    }
    
    arg3 = boost::numeric::ublas::matrix<double>(rows, cols);
    for (i = 0; i < rows; ++i) {
      row = rb_ary_entry(argv[2], i);
      if (RARRAY_LEN(row) != cols) {
        SWIG_exception_fail(SWIG_ERROR, "ragged array not allowed");
      }
      for (j = 0; j < cols; ++j) {
        arg3(i, j) = NUM2DBL(rb_ary_entry(row, j));
      }
    }
  }
  {
    try {
      result = (si_taxi::BWSurplusDeficitHandler *)new si_taxi::BWSurplusDeficitHandler(*arg1,*arg2,arg3);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSurplusDeficitHandler_init(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSurplusDeficitHandler *arg1 = (si_taxi::BWSurplusDeficitHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSurplusDeficitHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSurplusDeficitHandler *","init", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSurplusDeficitHandler * >(argp1);
  {
    try {
      (arg1)->init();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSurplusDeficitHandler_handle_pax_served(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSurplusDeficitHandler *arg1 = (si_taxi::BWSurplusDeficitHandler *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSurplusDeficitHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSurplusDeficitHandler *","handle_pax_served", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSurplusDeficitHandler * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","handle_pax_served", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      (arg1)->handle_pax_served(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSurplusDeficitHandler_handle_idle(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSurplusDeficitHandler *arg1 = (si_taxi::BWSurplusDeficitHandler *) 0 ;
  si_taxi::BWVehicle *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSurplusDeficitHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSurplusDeficitHandler *","handle_idle", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSurplusDeficitHandler * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_si_taxi__BWVehicle,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "si_taxi::BWVehicle &","handle_idle", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "si_taxi::BWVehicle &","handle_idle", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< si_taxi::BWVehicle * >(argp2);
  {
    try {
      (arg1)->handle_idle(*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSurplusDeficitHandler_surplus_at(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSurplusDeficitHandler *arg1 = (si_taxi::BWSurplusDeficitHandler *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSurplusDeficitHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSurplusDeficitHandler const *","surplus_at", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSurplusDeficitHandler * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","surplus_at", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      result = (double)((si_taxi::BWSurplusDeficitHandler const *)arg1)->surplus_at(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSurplusDeficitHandler_send_idle_veh_to_nearest_deficit(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSurplusDeficitHandler *arg1 = (si_taxi::BWSurplusDeficitHandler *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSurplusDeficitHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSurplusDeficitHandler *","send_idle_veh_to_nearest_deficit", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSurplusDeficitHandler * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","send_idle_veh_to_nearest_deficit", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      (arg1)->send_idle_veh_to_nearest_deficit(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSurplusDeficitHandler_call_time(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSurplusDeficitHandler *arg1 = (si_taxi::BWSurplusDeficitHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  si_taxi::BWCallTimeTracker *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSurplusDeficitHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSurplusDeficitHandler const *","call_time", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSurplusDeficitHandler * >(argp1);
  {
    try {
      result = (si_taxi::BWCallTimeTracker *) &((si_taxi::BWSurplusDeficitHandler const *)arg1)->call_time();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_si_taxi__BWCallTimeTracker, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWSurplusDeficitHandler_od(int argc, VALUE *argv, VALUE self) {
  si_taxi::BWSurplusDeficitHandler *arg1 = (si_taxi::BWSurplusDeficitHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  si_taxi::ODMatrixWrapper *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__BWSurplusDeficitHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::BWSurplusDeficitHandler const *","od", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::BWSurplusDeficitHandler * >(argp1);
  {
    try {
      result = (si_taxi::ODMatrixWrapper *) &((si_taxi::BWSurplusDeficitHandler const *)arg1)->od();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_si_taxi__ODMatrixWrapper, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_si_taxi_BWSurplusDeficitHandler(si_taxi::BWSurplusDeficitHandler *arg1) {
    delete arg1;
}

swig_class SwigClassBWPaxVector;


/*
  Document-method: SiTaxi::BWPaxVector.dup

  call-seq:
    dup -> BWPaxVector

Create a duplicate of the class and unfreeze it if needed.
*/
SWIGINTERN VALUE
_wrap_BWPaxVector_dup(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWPax > *arg1 = (std::vector< si_taxi::BWPax > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax > *","dup", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWPax > * >(argp1);
  {
    try {
      result = (std::vector< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *)std_vector_Sl_si_taxi_BWPax_Sg__dup(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxVector.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_BWPaxVector_inspect(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWPax > *arg1 = (std::vector< si_taxi::BWPax > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax > *","inspect", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWPax > * >(argp1);
  {
    try {
      result = (VALUE)std_vector_Sl_si_taxi_BWPax_Sg__inspect(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxVector.to_a

  call-seq:
    to_a -> VALUE

Convert BWPaxVector to an Array.
*/
SWIGINTERN VALUE
_wrap_BWPaxVector_to_a(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWPax > *arg1 = (std::vector< si_taxi::BWPax > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax > *","to_a", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWPax > * >(argp1);
  {
    try {
      result = (VALUE)std_vector_Sl_si_taxi_BWPax_Sg__to_a(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxVector.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_BWPaxVector_to_s(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWPax > *arg1 = (std::vector< si_taxi::BWPax > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax > *","to_s", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWPax > * >(argp1);
  {
    try {
      result = (VALUE)std_vector_Sl_si_taxi_BWPax_Sg__to_s(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxVector.slice

  call-seq:
    slice(i, j) -> VALUE

Return a slice (portion of) the BWPaxVector.
*/
SWIGINTERN VALUE
_wrap_BWPaxVector_slice(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWPax > *arg1 = (std::vector< si_taxi::BWPax > *) 0 ;
  std::vector< si_taxi::BWPax >::difference_type arg2 ;
  std::vector< si_taxi::BWPax >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax > *","slice", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWPax > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax >::difference_type","slice", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< si_taxi::BWPax >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax >::difference_type","slice", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< si_taxi::BWPax >::difference_type >(val3);
  {
    try {
      result = (VALUE)std_vector_Sl_si_taxi_BWPax_Sg__slice(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxVector.each

  call-seq:
    each -> BWPaxVector

Iterate thru each element in the BWPaxVector.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_BWPaxVector_each(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWPax > *arg1 = (std::vector< si_taxi::BWPax > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax > *","each", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWPax > * >(argp1);
  {
    try {
      result = (std::vector< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *)std_vector_Sl_si_taxi_BWPax_Sg__each(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxVector.select

  call-seq:
    select -> BWPaxVector

Iterate thru each element in the BWPaxVector and select those that match a condition.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_BWPaxVector_select(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWPax > *arg1 = (std::vector< si_taxi::BWPax > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax > *","select", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWPax > * >(argp1);
  {
    try {
      result = (std::vector< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *)std_vector_Sl_si_taxi_BWPax_Sg__select(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxVector.reject!

  call-seq:
    reject! -> BWPaxVector

Iterate thru each element in the BWPaxVector and reject those that fail a condition.  A block must be provided.  BWPaxVector is modified in place.
*/
SWIGINTERN VALUE
_wrap_BWPaxVector_rejectN___(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWPax > *arg1 = (std::vector< si_taxi::BWPax > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax > *","reject_bang", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWPax > * >(argp1);
  {
    try {
      result = (std::vector< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *)std_vector_Sl_si_taxi_BWPax_Sg__reject_bang(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxVector.delete_at

  call-seq:
    delete_at(i) -> VALUE

Delete an element at a certain index.
*/
SWIGINTERN VALUE
_wrap_BWPaxVector_delete_at(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWPax > *arg1 = (std::vector< si_taxi::BWPax > *) 0 ;
  std::vector< si_taxi::BWPax >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax > *","delete_at", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWPax > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax >::difference_type","delete_at", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< si_taxi::BWPax >::difference_type >(val2);
  {
    try {
      result = (VALUE)std_vector_Sl_si_taxi_BWPax_Sg__delete_at(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWPaxVector___delete2__(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWPax > *arg1 = (std::vector< si_taxi::BWPax > *) 0 ;
  std::vector< si_taxi::BWPax >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax > *","__delete2__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWPax > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_si_taxi__BWPax,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax >::value_type const &","__delete2__", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< si_taxi::BWPax >::value_type const &","__delete2__", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< si_taxi::BWPax >::value_type * >(argp2);
  {
    try {
      result = (VALUE)std_vector_Sl_si_taxi_BWPax_Sg____delete2__(arg1,(si_taxi::BWPax const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxVector.pop

  call-seq:
    pop -> VALUE

Remove and return element at the end of the BWPaxVector.
*/
SWIGINTERN VALUE
_wrap_BWPaxVector_pop(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWPax > *arg1 = (std::vector< si_taxi::BWPax > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax > *","pop", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWPax > * >(argp1);
  {
    try {
      result = (VALUE)std_vector_Sl_si_taxi_BWPax_Sg__pop(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxVector.push

  call-seq:
    push(e) -> value_type

Add an element at the end of the BWPaxVector.
*/
SWIGINTERN VALUE
_wrap_BWPaxVector_push(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWPax > *arg1 = (std::vector< si_taxi::BWPax > *) 0 ;
  std::vector< si_taxi::BWPax >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< si_taxi::BWPax >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax > *","push", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWPax > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_si_taxi__BWPax,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax >::value_type const &","push", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< si_taxi::BWPax >::value_type const &","push", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< si_taxi::BWPax >::value_type * >(argp2);
  {
    try {
      result = std_vector_Sl_si_taxi_BWPax_Sg__push(arg1,(si_taxi::BWPax const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new std::vector< si_taxi::BWPax >::value_type(static_cast< const std::vector< si_taxi::BWPax >::value_type& >(result))), SWIGTYPE_p_si_taxi__BWPax, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxVector.reject

  call-seq:
    reject -> BWPaxVector

Iterate thru each element in the BWPaxVector and reject those that fail a condition returning a new BWPaxVector.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_BWPaxVector_reject(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWPax > *arg1 = (std::vector< si_taxi::BWPax > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax > *","reject", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWPax > * >(argp1);
  {
    try {
      result = (std::vector< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *)std_vector_Sl_si_taxi_BWPax_Sg__reject(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxVector.at

  call-seq:
    at(i) -> VALUE

Return element at a certain index.
*/
SWIGINTERN VALUE
_wrap_BWPaxVector_at(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWPax > *arg1 = (std::vector< si_taxi::BWPax > *) 0 ;
  std::vector< si_taxi::BWPax >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax > const *","at", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWPax > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax >::difference_type","at", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< si_taxi::BWPax >::difference_type >(val2);
  {
    try {
      result = (VALUE)std_vector_Sl_si_taxi_BWPax_Sg__at((std::vector< si_taxi::BWPax > const *)arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxVector.[]

  call-seq:
    [](i, j) -> VALUE
    [](i) -> VALUE
    [](i) -> VALUE

Element accessor/slicing.
*/
SWIGINTERN VALUE
_wrap_BWPaxVector___getitem____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWPax > *arg1 = (std::vector< si_taxi::BWPax > *) 0 ;
  std::vector< si_taxi::BWPax >::difference_type arg2 ;
  std::vector< si_taxi::BWPax >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWPax > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax >::difference_type","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< si_taxi::BWPax >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax >::difference_type","__getitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< si_taxi::BWPax >::difference_type >(val3);
  {
    try {
      result = (VALUE)std_vector_Sl_si_taxi_BWPax_Sg____getitem____SWIG_0((std::vector< si_taxi::BWPax > const *)arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWPaxVector___getitem____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWPax > *arg1 = (std::vector< si_taxi::BWPax > *) 0 ;
  std::vector< si_taxi::BWPax >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWPax > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax >::difference_type","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< si_taxi::BWPax >::difference_type >(val2);
  {
    try {
      result = (VALUE)std_vector_Sl_si_taxi_BWPax_Sg____getitem____SWIG_1((std::vector< si_taxi::BWPax > const *)arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWPaxVector___getitem____SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWPax > *arg1 = (std::vector< si_taxi::BWPax > *) 0 ;
  VALUE arg2 = (VALUE) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWPax > * >(argp1);
  arg2 = argv[0];
  {
    try {
      result = (VALUE)std_vector_Sl_si_taxi_BWPax_Sg____getitem____SWIG_2((std::vector< si_taxi::BWPax > const *)arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_BWPaxVector___getitem__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BWPaxVector___getitem____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_BWPaxVector___getitem____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BWPaxVector___getitem____SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "__getitem__", 
    "    VALUE __getitem__(std::vector< si_taxi::BWPax >::difference_type i, std::vector< si_taxi::BWPax >::difference_type j)\n"
    "    VALUE __getitem__(std::vector< si_taxi::BWPax >::difference_type i)\n"
    "    VALUE __getitem__(VALUE i)\n");
  
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxVector.[]=

  call-seq:
    []=(i, x) -> VALUE
    []=(i, j, v) -> VALUE

Element setter/slicing.
*/
SWIGINTERN VALUE
_wrap_BWPaxVector___setitem____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWPax > *arg1 = (std::vector< si_taxi::BWPax > *) 0 ;
  std::vector< si_taxi::BWPax >::difference_type arg2 ;
  std::vector< si_taxi::BWPax >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax > *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWPax > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax >::difference_type","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< si_taxi::BWPax >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_si_taxi__BWPax,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax >::value_type const &","__setitem__", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< si_taxi::BWPax >::value_type const &","__setitem__", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< si_taxi::BWPax >::value_type * >(argp3);
  {
    try {
      result = (VALUE)std_vector_Sl_si_taxi_BWPax_Sg____setitem____SWIG_0(arg1,arg2,(si_taxi::BWPax const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWPaxVector___setitem____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWPax > *arg1 = (std::vector< si_taxi::BWPax > *) 0 ;
  std::vector< si_taxi::BWPax >::difference_type arg2 ;
  std::vector< si_taxi::BWPax >::difference_type arg3 ;
  std::vector< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax > *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWPax > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax >::difference_type","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< si_taxi::BWPax >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax >::difference_type","__setitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< si_taxi::BWPax >::difference_type >(val3);
  {
    std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *ptr = (std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *)0;
    res4 = swig::asptr(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > const &","__setitem__", 4, argv[2] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > const &","__setitem__", 4, argv[2])); 
    }
    arg4 = ptr;
  }
  {
    try {
      try {
        result = (VALUE)std_vector_Sl_si_taxi_BWPax_Sg____setitem____SWIG_1(arg1,arg2,arg3,(std::vector< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > const &)*arg4);
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return vresult;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
}


SWIGINTERN VALUE _wrap_BWPaxVector___setitem__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_si_taxi__BWPax, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BWPaxVector___setitem____SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_BWPaxVector___setitem____SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "__setitem__", 
    "    VALUE __setitem__(std::vector< si_taxi::BWPax >::difference_type i, std::vector< si_taxi::BWPax >::value_type const &x)\n"
    "    VALUE __setitem__(std::vector< si_taxi::BWPax >::difference_type i, std::vector< si_taxi::BWPax >::difference_type j, std::vector< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > const &v)\n");
  
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxVector.shift

  call-seq:
    shift -> VALUE

Remove and return element at the beginning of the BWPaxVector.
*/
SWIGINTERN VALUE
_wrap_BWPaxVector_shift(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWPax > *arg1 = (std::vector< si_taxi::BWPax > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax > *","shift", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWPax > * >(argp1);
  {
    try {
      result = (VALUE)std_vector_Sl_si_taxi_BWPax_Sg__shift(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxVector.insert

  call-seq:
    insert(pos, argc, ?) -> BWPaxVector
    insert(pos, x) -> iterator
    insert(pos, n, x)

Insert one or more new elements in the BWPaxVector.
*/
SWIGINTERN VALUE
_wrap_BWPaxVector_insert__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWPax > *arg1 = (std::vector< si_taxi::BWPax > *) 0 ;
  std::vector< si_taxi::BWPax >::difference_type arg2 ;
  int arg3 ;
  VALUE *arg4 = (VALUE *) 0 ;
  void *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if (argc < 2) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWPax > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax >::difference_type","insert", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< si_taxi::BWPax >::difference_type >(val2);
  {
    arg3 = argc - 1;
    arg4 = argv + 1;
  }
  {
    try {
      result = (std::vector< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *)std_vector_Sl_si_taxi_BWPax_Sg__insert__SWIG_0(arg1,arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxVector.unshift

  call-seq:
    unshift(argc, ?) -> BWPaxVector

Add one or more elements at the beginning of the BWPaxVector.
*/
SWIGINTERN VALUE
_wrap_BWPaxVector_unshift(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWPax > *arg1 = (std::vector< si_taxi::BWPax > *) 0 ;
  int arg2 ;
  VALUE *arg3 = (VALUE *) 0 ;
  void *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if (argc < 1) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax > *","unshift", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWPax > * >(argp1);
  {
    arg2 = argc;
    arg3 = argv;
  }
  {
    try {
      result = (std::vector< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *)std_vector_Sl_si_taxi_BWPax_Sg__unshift(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_BWPaxVector__SWIG_0(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "SiTaxi::BWPaxVector";
  std::vector< si_taxi::BWPax > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (std::vector< si_taxi::BWPax > *)new std::vector< si_taxi::BWPax >();
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_BWPaxVector__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWPax > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  const char *classname SWIGUNUSED = "SiTaxi::BWPaxVector";
  std::vector< si_taxi::BWPax > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *ptr = (std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *)0;
    res1 = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax > const &","std::vector<(si_taxi::BWPax)>", 1, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< si_taxi::BWPax > const &","std::vector<(si_taxi::BWPax)>", 1, argv[0])); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< si_taxi::BWPax > *)new std::vector< si_taxi::BWPax >((std::vector< si_taxi::BWPax > const &)*arg1);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return self;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxVector.empty?

  call-seq:
    empty? -> bool

Check if the BWPaxVector is empty or not.
*/
SWIGINTERN VALUE
_wrap_BWPaxVector_emptyq___(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWPax > *arg1 = (std::vector< si_taxi::BWPax > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax > const *","empty", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWPax > * >(argp1);
  {
    try {
      result = (bool)((std::vector< si_taxi::BWPax > const *)arg1)->empty();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxVector.size

  call-seq:
    size -> size_type

Size or Length of the BWPaxVector.
*/
SWIGINTERN VALUE
_wrap_BWPaxVector_size(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWPax > *arg1 = (std::vector< si_taxi::BWPax > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::BWPax >::size_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax > const *","size", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWPax > * >(argp1);
  {
    try {
      result = ((std::vector< si_taxi::BWPax > const *)arg1)->size();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxVector.clear

  call-seq:
    clear

Clear BWPaxVector contents.
*/
SWIGINTERN VALUE
_wrap_BWPaxVector_clear(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWPax > *arg1 = (std::vector< si_taxi::BWPax > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax > *","clear", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWPax > * >(argp1);
  {
    try {
      (arg1)->clear();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWPaxVector_swap(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWPax > *arg1 = (std::vector< si_taxi::BWPax > *) 0 ;
  std::vector< si_taxi::BWPax > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax > *","swap", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWPax > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax > &","swap", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< si_taxi::BWPax > &","swap", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< si_taxi::BWPax > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWPaxVector_get_allocator(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWPax > *arg1 = (std::vector< si_taxi::BWPax > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::allocator< si_taxi::BWPax > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax > const *","get_allocator", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWPax > * >(argp1);
  {
    try {
      result = ((std::vector< si_taxi::BWPax > const *)arg1)->get_allocator();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new std::vector< si_taxi::BWPax >::allocator_type(static_cast< const std::vector< si_taxi::BWPax >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_si_taxi__BWPax_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxVector.begin

  call-seq:
    begin -> iterator

Return an iterator to the beginning of the BWPaxVector.
*/
SWIGINTERN VALUE
_wrap_BWPaxVector_begin(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWPax > *arg1 = (std::vector< si_taxi::BWPax > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::BWPax >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax > *","begin", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWPax > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< si_taxi::BWPax >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxVector.end

  call-seq:
    end -> iterator

Return an iterator to past the end of the BWPaxVector.
*/
SWIGINTERN VALUE
_wrap_BWPaxVector_end(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWPax > *arg1 = (std::vector< si_taxi::BWPax > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::BWPax >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax > *","end", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWPax > * >(argp1);
  {
    try {
      result = (arg1)->end();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< si_taxi::BWPax >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxVector.rbegin

  call-seq:
    rbegin -> reverse_iterator

Return a reverse iterator to the beginning (the end) of the BWPaxVector.
*/
SWIGINTERN VALUE
_wrap_BWPaxVector_rbegin(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWPax > *arg1 = (std::vector< si_taxi::BWPax > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::BWPax >::reverse_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax > *","rbegin", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWPax > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< si_taxi::BWPax >::reverse_iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxVector.rend

  call-seq:
    rend -> reverse_iterator

Return a reverse iterator to past the end (past the beginning) of the BWPaxVector.
*/
SWIGINTERN VALUE
_wrap_BWPaxVector_rend(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWPax > *arg1 = (std::vector< si_taxi::BWPax > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::BWPax >::reverse_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax > *","rend", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWPax > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< si_taxi::BWPax >::reverse_iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_BWPaxVector__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWPax >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  const char *classname SWIGUNUSED = "SiTaxi::BWPaxVector";
  std::vector< si_taxi::BWPax > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax >::size_type","std::vector<(si_taxi::BWPax)>", 1, argv[0] ));
  } 
  arg1 = static_cast< std::vector< si_taxi::BWPax >::size_type >(val1);
  {
    try {
      result = (std::vector< si_taxi::BWPax > *)new std::vector< si_taxi::BWPax >(arg1);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxVector.resize

  call-seq:
    resize(new_size)
    resize(new_size, x)

Resize the size of the BWPaxVector.
*/
SWIGINTERN VALUE
_wrap_BWPaxVector_resize__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWPax > *arg1 = (std::vector< si_taxi::BWPax > *) 0 ;
  std::vector< si_taxi::BWPax >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWPax > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax >::size_type","resize", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< si_taxi::BWPax >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxVector.erase

  call-seq:
    erase(pos) -> iterator
    erase(first, last) -> iterator

Delete a portion of the BWPaxVector.
*/
SWIGINTERN VALUE
_wrap_BWPaxVector_erase__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWPax > *arg1 = (std::vector< si_taxi::BWPax > *) 0 ;
  std::vector< si_taxi::BWPax >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  std::vector< si_taxi::BWPax >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax > *","erase", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWPax > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax >::iterator","erase", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< si_taxi::BWPax >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< si_taxi::BWPax >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax >::iterator","erase", 2, argv[0] ));
    }
  }
  {
    try {
      result = (arg1)->erase(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< si_taxi::BWPax >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWPaxVector_erase__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWPax > *arg1 = (std::vector< si_taxi::BWPax > *) 0 ;
  std::vector< si_taxi::BWPax >::iterator arg2 ;
  std::vector< si_taxi::BWPax >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  swig::Iterator *iter3 = 0 ;
  int res3 ;
  std::vector< si_taxi::BWPax >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax > *","erase", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWPax > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax >::iterator","erase", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< si_taxi::BWPax >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< si_taxi::BWPax >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax >::iterator","erase", 2, argv[0] ));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter3), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax >::iterator","erase", 3, argv[1] ));
  } else {
    swig::Iterator_T<std::vector< si_taxi::BWPax >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< si_taxi::BWPax >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax >::iterator","erase", 3, argv[1] ));
    }
  }
  {
    try {
      result = (arg1)->erase(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< si_taxi::BWPax >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_BWPaxVector_erase(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< si_taxi::BWPax >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_BWPaxVector_erase__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< si_taxi::BWPax >::iterator > *>(iter) != 0));
      if (_v) {
        swig::ConstIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), 
          swig::Iterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< si_taxi::BWPax >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_BWPaxVector_erase__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "BWPaxVector.erase", 
    "    std::vector< si_taxi::BWPax >::iterator BWPaxVector.erase(std::vector< si_taxi::BWPax >::iterator pos)\n"
    "    std::vector< si_taxi::BWPax >::iterator BWPaxVector.erase(std::vector< si_taxi::BWPax >::iterator first, std::vector< si_taxi::BWPax >::iterator last)\n");
  
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_BWPaxVector_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_BWPaxVector_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_BWPaxVector__SWIG_3(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWPax >::size_type arg1 ;
  std::vector< si_taxi::BWPax >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  const char *classname SWIGUNUSED = "SiTaxi::BWPaxVector";
  std::vector< si_taxi::BWPax > *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax >::size_type","std::vector<(si_taxi::BWPax)>", 1, argv[0] ));
  } 
  arg1 = static_cast< std::vector< si_taxi::BWPax >::size_type >(val1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_si_taxi__BWPax,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax >::value_type const &","std::vector<(si_taxi::BWPax)>", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< si_taxi::BWPax >::value_type const &","std::vector<(si_taxi::BWPax)>", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< std::vector< si_taxi::BWPax >::value_type * >(argp2);
  {
    try {
      result = (std::vector< si_taxi::BWPax > *)new std::vector< si_taxi::BWPax >(arg1,(std::vector< si_taxi::BWPax >::value_type const &)*arg2);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_BWPaxVector(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_BWPaxVector__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_BWPaxVector__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_BWPaxVector__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_si_taxi__BWPax, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_BWPaxVector__SWIG_3(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "BWPaxVector.new", 
    "    BWPaxVector.new()\n"
    "    BWPaxVector.new(std::vector< si_taxi::BWPax > const &)\n"
    "    BWPaxVector.new(std::vector< si_taxi::BWPax >::size_type size)\n"
    "    BWPaxVector.new(std::vector< si_taxi::BWPax >::size_type size, std::vector< si_taxi::BWPax >::value_type const &value)\n");
  
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxVector.front

  call-seq:
    front -> value_type

Return the first element in BWPaxVector.
*/
SWIGINTERN VALUE
_wrap_BWPaxVector_front(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWPax > *arg1 = (std::vector< si_taxi::BWPax > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::BWPax >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax > const *","front", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWPax > * >(argp1);
  {
    try {
      result = (std::vector< si_taxi::BWPax >::value_type *) &((std::vector< si_taxi::BWPax > const *)arg1)->front();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_si_taxi__BWPax, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxVector.back

  call-seq:
    back -> value_type

Return the last element in BWPaxVector.
*/
SWIGINTERN VALUE
_wrap_BWPaxVector_back(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWPax > *arg1 = (std::vector< si_taxi::BWPax > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::BWPax >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax > const *","back", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWPax > * >(argp1);
  {
    try {
      result = (std::vector< si_taxi::BWPax >::value_type *) &((std::vector< si_taxi::BWPax > const *)arg1)->back();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_si_taxi__BWPax, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxVector.assign

  call-seq:
    assign(n, x)

Assign a new BWPaxVector or portion of it.
*/
SWIGINTERN VALUE
_wrap_BWPaxVector_assign(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWPax > *arg1 = (std::vector< si_taxi::BWPax > *) 0 ;
  std::vector< si_taxi::BWPax >::size_type arg2 ;
  std::vector< si_taxi::BWPax >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax > *","assign", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWPax > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax >::size_type","assign", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< si_taxi::BWPax >::size_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_si_taxi__BWPax,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax >::value_type const &","assign", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< si_taxi::BWPax >::value_type const &","assign", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< si_taxi::BWPax >::value_type * >(argp3);
  {
    try {
      (arg1)->assign(arg2,(std::vector< si_taxi::BWPax >::value_type const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxVector.resize

  call-seq:
    resize(new_size)
    resize(new_size, x)

Resize the size of the BWPaxVector.
*/
SWIGINTERN VALUE
_wrap_BWPaxVector_resize__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWPax > *arg1 = (std::vector< si_taxi::BWPax > *) 0 ;
  std::vector< si_taxi::BWPax >::size_type arg2 ;
  std::vector< si_taxi::BWPax >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWPax > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax >::size_type","resize", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< si_taxi::BWPax >::size_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_si_taxi__BWPax,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax >::value_type const &","resize", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< si_taxi::BWPax >::value_type const &","resize", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< si_taxi::BWPax >::value_type * >(argp3);
  {
    try {
      (arg1)->resize(arg2,(std::vector< si_taxi::BWPax >::value_type const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_BWPaxVector_resize(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BWPaxVector_resize__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_si_taxi__BWPax, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BWPaxVector_resize__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "BWPaxVector.resize", 
    "    void BWPaxVector.resize(std::vector< si_taxi::BWPax >::size_type new_size)\n"
    "    void BWPaxVector.resize(std::vector< si_taxi::BWPax >::size_type new_size, std::vector< si_taxi::BWPax >::value_type const &x)\n");
  
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxVector.insert

  call-seq:
    insert(pos, argc, ?) -> BWPaxVector
    insert(pos, x) -> iterator
    insert(pos, n, x)

Insert one or more new elements in the BWPaxVector.
*/
SWIGINTERN VALUE
_wrap_BWPaxVector_insert__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWPax > *arg1 = (std::vector< si_taxi::BWPax > *) 0 ;
  std::vector< si_taxi::BWPax >::iterator arg2 ;
  std::vector< si_taxi::BWPax >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< si_taxi::BWPax >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWPax > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax >::iterator","insert", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< si_taxi::BWPax >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< si_taxi::BWPax >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax >::iterator","insert", 2, argv[0] ));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_si_taxi__BWPax,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax >::value_type const &","insert", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< si_taxi::BWPax >::value_type const &","insert", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< si_taxi::BWPax >::value_type * >(argp3);
  {
    try {
      result = (arg1)->insert(arg2,(std::vector< si_taxi::BWPax >::value_type const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< si_taxi::BWPax >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWPaxVector_insert__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWPax > *arg1 = (std::vector< si_taxi::BWPax > *) 0 ;
  std::vector< si_taxi::BWPax >::iterator arg2 ;
  std::vector< si_taxi::BWPax >::size_type arg3 ;
  std::vector< si_taxi::BWPax >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWPax > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax >::iterator","insert", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< si_taxi::BWPax >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< si_taxi::BWPax >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax >::iterator","insert", 2, argv[0] ));
    }
  }
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax >::size_type","insert", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< si_taxi::BWPax >::size_type >(val3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_si_taxi__BWPax,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax >::value_type const &","insert", 4, argv[2] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< si_taxi::BWPax >::value_type const &","insert", 4, argv[2])); 
  }
  arg4 = reinterpret_cast< std::vector< si_taxi::BWPax >::value_type * >(argp4);
  {
    try {
      (arg1)->insert(arg2,arg3,(std::vector< si_taxi::BWPax >::value_type const &)*arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_BWPaxVector_insert(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< si_taxi::BWPax >::iterator > *>(iter) != 0));
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_si_taxi__BWPax, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BWPaxVector_insert__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_BWPaxVector_insert__SWIG_0(nargs, args, self);
          }
          return _wrap_BWPaxVector_insert__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< si_taxi::BWPax >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_si_taxi__BWPax, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_BWPaxVector_insert__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "insert", 
    "    void insert(std::vector< si_taxi::BWPax >::difference_type pos, int argc, VALUE *argv, ...)\n"
    "    void insert(std::vector< si_taxi::BWPax >::iterator pos, std::vector< si_taxi::BWPax >::value_type const &x)\n"
    "    void insert(std::vector< si_taxi::BWPax >::iterator pos, std::vector< si_taxi::BWPax >::size_type n, std::vector< si_taxi::BWPax >::value_type const &x)\n");
  
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxVector.reserve

  call-seq:
    reserve(n)

Reserve memory in the BWPaxVector for a number of elements.
*/
SWIGINTERN VALUE
_wrap_BWPaxVector_reserve(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWPax > *arg1 = (std::vector< si_taxi::BWPax > *) 0 ;
  std::vector< si_taxi::BWPax >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax > *","reserve", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWPax > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax >::size_type","reserve", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< si_taxi::BWPax >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxVector.capacity

  call-seq:
    capacity -> size_type

Reserved capacity of the BWPaxVector.
*/
SWIGINTERN VALUE
_wrap_BWPaxVector_capacity(int argc, VALUE *argv, VALUE self) {
  std::vector< si_taxi::BWPax > *arg1 = (std::vector< si_taxi::BWPax > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< si_taxi::BWPax >::size_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax > const *","capacity", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< si_taxi::BWPax > * >(argp1);
  {
    try {
      result = ((std::vector< si_taxi::BWPax > const *)arg1)->capacity();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_std_vector_Sl_si_taxi_BWPax_Sg_(std::vector< si_taxi::BWPax > *arg1) {
    delete arg1;
}

swig_class SwigClassBWPaxDeque;


/*
  Document-method: SiTaxi::BWPaxDeque.dup

  call-seq:
    dup -> BWPaxDeque

Create a duplicate of the class and unfreeze it if needed.
*/
SWIGINTERN VALUE
_wrap_BWPaxDeque_dup(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWPax > *arg1 = (std::deque< si_taxi::BWPax > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax > *","dup", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWPax > * >(argp1);
  {
    try {
      result = (std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *)std_deque_Sl_si_taxi_BWPax_Sg__dup(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDeque.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_BWPaxDeque_inspect(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWPax > *arg1 = (std::deque< si_taxi::BWPax > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax > *","inspect", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWPax > * >(argp1);
  {
    try {
      result = (VALUE)std_deque_Sl_si_taxi_BWPax_Sg__inspect(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDeque.to_a

  call-seq:
    to_a -> VALUE

Convert BWPaxDeque to an Array.
*/
SWIGINTERN VALUE
_wrap_BWPaxDeque_to_a(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWPax > *arg1 = (std::deque< si_taxi::BWPax > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax > *","to_a", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWPax > * >(argp1);
  {
    try {
      result = (VALUE)std_deque_Sl_si_taxi_BWPax_Sg__to_a(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDeque.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_BWPaxDeque_to_s(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWPax > *arg1 = (std::deque< si_taxi::BWPax > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax > *","to_s", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWPax > * >(argp1);
  {
    try {
      result = (VALUE)std_deque_Sl_si_taxi_BWPax_Sg__to_s(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDeque.slice

  call-seq:
    slice(i, j) -> VALUE

Return a slice (portion of) the BWPaxDeque.
*/
SWIGINTERN VALUE
_wrap_BWPaxDeque_slice(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWPax > *arg1 = (std::deque< si_taxi::BWPax > *) 0 ;
  std::deque< si_taxi::BWPax >::difference_type arg2 ;
  std::deque< si_taxi::BWPax >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax > *","slice", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWPax > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax >::difference_type","slice", 2, argv[0] ));
  } 
  arg2 = static_cast< std::deque< si_taxi::BWPax >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax >::difference_type","slice", 3, argv[1] ));
  } 
  arg3 = static_cast< std::deque< si_taxi::BWPax >::difference_type >(val3);
  {
    try {
      result = (VALUE)std_deque_Sl_si_taxi_BWPax_Sg__slice(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDeque.each

  call-seq:
    each -> BWPaxDeque

Iterate thru each element in the BWPaxDeque.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_BWPaxDeque_each(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWPax > *arg1 = (std::deque< si_taxi::BWPax > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax > *","each", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWPax > * >(argp1);
  {
    try {
      result = (std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *)std_deque_Sl_si_taxi_BWPax_Sg__each(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDeque.select

  call-seq:
    select -> BWPaxDeque

Iterate thru each element in the BWPaxDeque and select those that match a condition.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_BWPaxDeque_select(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWPax > *arg1 = (std::deque< si_taxi::BWPax > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax > *","select", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWPax > * >(argp1);
  {
    try {
      result = (std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *)std_deque_Sl_si_taxi_BWPax_Sg__select(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDeque.reject_bang

  call-seq:
    reject_bang -> BWPaxDeque

Iterate thru each element in the BWPaxDeque and reject those that fail a condition.  A block must be provided.  BWPaxDeque is modified in place.
*/
SWIGINTERN VALUE
_wrap_BWPaxDeque_reject_bang(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWPax > *arg1 = (std::deque< si_taxi::BWPax > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax > *","reject_bang", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWPax > * >(argp1);
  {
    try {
      result = (std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *)std_deque_Sl_si_taxi_BWPax_Sg__reject_bang(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDeque.delete_at

  call-seq:
    delete_at(i) -> VALUE

Delete an element at a certain index.
*/
SWIGINTERN VALUE
_wrap_BWPaxDeque_delete_at(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWPax > *arg1 = (std::deque< si_taxi::BWPax > *) 0 ;
  std::deque< si_taxi::BWPax >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax > *","delete_at", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWPax > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax >::difference_type","delete_at", 2, argv[0] ));
  } 
  arg2 = static_cast< std::deque< si_taxi::BWPax >::difference_type >(val2);
  {
    try {
      result = (VALUE)std_deque_Sl_si_taxi_BWPax_Sg__delete_at(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWPaxDeque___delete2__(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWPax > *arg1 = (std::deque< si_taxi::BWPax > *) 0 ;
  std::deque< si_taxi::BWPax >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax > *","__delete2__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWPax > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_si_taxi__BWPax,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax >::value_type const &","__delete2__", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::deque< si_taxi::BWPax >::value_type const &","__delete2__", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::deque< si_taxi::BWPax >::value_type * >(argp2);
  {
    try {
      result = (VALUE)std_deque_Sl_si_taxi_BWPax_Sg____delete2__(arg1,(si_taxi::BWPax const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDeque.pop

  call-seq:
    pop -> VALUE

Remove and return element at the end of the BWPaxDeque.
*/
SWIGINTERN VALUE
_wrap_BWPaxDeque_pop(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWPax > *arg1 = (std::deque< si_taxi::BWPax > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax > *","pop", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWPax > * >(argp1);
  {
    try {
      result = (VALUE)std_deque_Sl_si_taxi_BWPax_Sg__pop(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDeque.push

  call-seq:
    push(e) -> value_type

Add an element at the end of the BWPaxDeque.
*/
SWIGINTERN VALUE
_wrap_BWPaxDeque_push(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWPax > *arg1 = (std::deque< si_taxi::BWPax > *) 0 ;
  std::deque< si_taxi::BWPax >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::deque< si_taxi::BWPax >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax > *","push", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWPax > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_si_taxi__BWPax,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax >::value_type const &","push", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::deque< si_taxi::BWPax >::value_type const &","push", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::deque< si_taxi::BWPax >::value_type * >(argp2);
  {
    try {
      result = std_deque_Sl_si_taxi_BWPax_Sg__push(arg1,(si_taxi::BWPax const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new std::deque< si_taxi::BWPax >::value_type(static_cast< const std::deque< si_taxi::BWPax >::value_type& >(result))), SWIGTYPE_p_si_taxi__BWPax, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDeque.reject

  call-seq:
    reject -> BWPaxDeque

Iterate thru each element in the BWPaxDeque and reject those that fail a condition returning a new BWPaxDeque.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_BWPaxDeque_reject(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWPax > *arg1 = (std::deque< si_taxi::BWPax > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax > *","reject", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWPax > * >(argp1);
  {
    try {
      result = (std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *)std_deque_Sl_si_taxi_BWPax_Sg__reject(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDeque.at

  call-seq:
    at(i) -> VALUE

Return element at a certain index.
*/
SWIGINTERN VALUE
_wrap_BWPaxDeque_at(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWPax > *arg1 = (std::deque< si_taxi::BWPax > *) 0 ;
  std::deque< si_taxi::BWPax >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax > const *","at", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWPax > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax >::difference_type","at", 2, argv[0] ));
  } 
  arg2 = static_cast< std::deque< si_taxi::BWPax >::difference_type >(val2);
  {
    try {
      result = (VALUE)std_deque_Sl_si_taxi_BWPax_Sg__at((std::deque< si_taxi::BWPax > const *)arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDeque.[]

  call-seq:
    [](i, j) -> VALUE
    [](i) -> VALUE
    [](i) -> VALUE

Element accessor/slicing.
*/
SWIGINTERN VALUE
_wrap_BWPaxDeque___getitem____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWPax > *arg1 = (std::deque< si_taxi::BWPax > *) 0 ;
  std::deque< si_taxi::BWPax >::difference_type arg2 ;
  std::deque< si_taxi::BWPax >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWPax > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax >::difference_type","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::deque< si_taxi::BWPax >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax >::difference_type","__getitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< std::deque< si_taxi::BWPax >::difference_type >(val3);
  {
    try {
      result = (VALUE)std_deque_Sl_si_taxi_BWPax_Sg____getitem____SWIG_0((std::deque< si_taxi::BWPax > const *)arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWPaxDeque___getitem____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWPax > *arg1 = (std::deque< si_taxi::BWPax > *) 0 ;
  std::deque< si_taxi::BWPax >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWPax > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax >::difference_type","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::deque< si_taxi::BWPax >::difference_type >(val2);
  {
    try {
      result = (VALUE)std_deque_Sl_si_taxi_BWPax_Sg____getitem____SWIG_1((std::deque< si_taxi::BWPax > const *)arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWPaxDeque___getitem____SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWPax > *arg1 = (std::deque< si_taxi::BWPax > *) 0 ;
  VALUE arg2 = (VALUE) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWPax > * >(argp1);
  arg2 = argv[0];
  {
    try {
      result = (VALUE)std_deque_Sl_si_taxi_BWPax_Sg____getitem____SWIG_2((std::deque< si_taxi::BWPax > const *)arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_BWPaxDeque___getitem__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BWPaxDeque___getitem____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_BWPaxDeque___getitem____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BWPaxDeque___getitem____SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "__getitem__", 
    "    VALUE __getitem__(std::deque< si_taxi::BWPax >::difference_type i, std::deque< si_taxi::BWPax >::difference_type j)\n"
    "    VALUE __getitem__(std::deque< si_taxi::BWPax >::difference_type i)\n"
    "    VALUE __getitem__(VALUE i)\n");
  
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDeque.[]=

  call-seq:
    []=(i, x) -> VALUE
    []=(i, j, v) -> VALUE

Element setter/slicing.
*/
SWIGINTERN VALUE
_wrap_BWPaxDeque___setitem____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWPax > *arg1 = (std::deque< si_taxi::BWPax > *) 0 ;
  std::deque< si_taxi::BWPax >::difference_type arg2 ;
  std::deque< si_taxi::BWPax >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax > *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWPax > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax >::difference_type","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::deque< si_taxi::BWPax >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_si_taxi__BWPax,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax >::value_type const &","__setitem__", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::deque< si_taxi::BWPax >::value_type const &","__setitem__", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::deque< si_taxi::BWPax >::value_type * >(argp3);
  {
    try {
      result = (VALUE)std_deque_Sl_si_taxi_BWPax_Sg____setitem____SWIG_0(arg1,arg2,(si_taxi::BWPax const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWPaxDeque___setitem____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWPax > *arg1 = (std::deque< si_taxi::BWPax > *) 0 ;
  std::deque< si_taxi::BWPax >::difference_type arg2 ;
  std::deque< si_taxi::BWPax >::difference_type arg3 ;
  std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax > *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWPax > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax >::difference_type","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::deque< si_taxi::BWPax >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax >::difference_type","__setitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< std::deque< si_taxi::BWPax >::difference_type >(val3);
  {
    std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *ptr = (std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *)0;
    res4 = swig::asptr(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > const &","__setitem__", 4, argv[2] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > const &","__setitem__", 4, argv[2])); 
    }
    arg4 = ptr;
  }
  {
    try {
      try {
        result = (VALUE)std_deque_Sl_si_taxi_BWPax_Sg____setitem____SWIG_1(arg1,arg2,arg3,(std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > const &)*arg4);
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return vresult;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
}


SWIGINTERN VALUE _wrap_BWPaxDeque___setitem__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_si_taxi__BWPax, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BWPaxDeque___setitem____SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_BWPaxDeque___setitem____SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "__setitem__", 
    "    VALUE __setitem__(std::deque< si_taxi::BWPax >::difference_type i, std::deque< si_taxi::BWPax >::value_type const &x)\n"
    "    VALUE __setitem__(std::deque< si_taxi::BWPax >::difference_type i, std::deque< si_taxi::BWPax >::difference_type j, std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > const &v)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_BWPaxDeque__SWIG_0(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "SiTaxi::BWPaxDeque";
  std::deque< si_taxi::BWPax > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (std::deque< si_taxi::BWPax > *)new std::deque< si_taxi::BWPax >();
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_BWPaxDeque__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWPax > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  const char *classname SWIGUNUSED = "SiTaxi::BWPaxDeque";
  std::deque< si_taxi::BWPax > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *ptr = (std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *)0;
    res1 = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax > const &","std::deque<(si_taxi::BWPax)>", 1, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::deque< si_taxi::BWPax > const &","std::deque<(si_taxi::BWPax)>", 1, argv[0])); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::deque< si_taxi::BWPax > *)new std::deque< si_taxi::BWPax >((std::deque< si_taxi::BWPax > const &)*arg1);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return self;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDeque.empty

  call-seq:
    empty -> bool

Check if the BWPaxDeque is empty or not.
*/
SWIGINTERN VALUE
_wrap_BWPaxDeque_empty(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWPax > *arg1 = (std::deque< si_taxi::BWPax > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax > const *","empty", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWPax > * >(argp1);
  {
    try {
      result = (bool)((std::deque< si_taxi::BWPax > const *)arg1)->empty();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDeque.size

  call-seq:
    size -> size_type

Size or Length of the BWPaxDeque.
*/
SWIGINTERN VALUE
_wrap_BWPaxDeque_size(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWPax > *arg1 = (std::deque< si_taxi::BWPax > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::deque< si_taxi::BWPax >::size_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax > const *","size", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWPax > * >(argp1);
  {
    try {
      result = ((std::deque< si_taxi::BWPax > const *)arg1)->size();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDeque.clear

  call-seq:
    clear

Clear BWPaxDeque contents.
*/
SWIGINTERN VALUE
_wrap_BWPaxDeque_clear(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWPax > *arg1 = (std::deque< si_taxi::BWPax > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax > *","clear", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWPax > * >(argp1);
  {
    try {
      (arg1)->clear();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWPaxDeque_swap(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWPax > *arg1 = (std::deque< si_taxi::BWPax > *) 0 ;
  std::deque< si_taxi::BWPax > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax > *","swap", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWPax > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax > &","swap", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::deque< si_taxi::BWPax > &","swap", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::deque< si_taxi::BWPax > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWPaxDeque_get_allocator(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWPax > *arg1 = (std::deque< si_taxi::BWPax > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::allocator< si_taxi::BWPax > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax > const *","get_allocator", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWPax > * >(argp1);
  {
    try {
      result = ((std::deque< si_taxi::BWPax > const *)arg1)->get_allocator();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new std::deque< si_taxi::BWPax >::allocator_type(static_cast< const std::deque< si_taxi::BWPax >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_si_taxi__BWPax_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDeque.begin

  call-seq:
    begin -> iterator

Return an iterator to the beginning of the BWPaxDeque.
*/
SWIGINTERN VALUE
_wrap_BWPaxDeque_begin(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWPax > *arg1 = (std::deque< si_taxi::BWPax > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::deque< si_taxi::BWPax >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax > *","begin", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWPax > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::deque< si_taxi::BWPax >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDeque.end

  call-seq:
    end -> iterator

Return an iterator to past the end of the BWPaxDeque.
*/
SWIGINTERN VALUE
_wrap_BWPaxDeque_end(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWPax > *arg1 = (std::deque< si_taxi::BWPax > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::deque< si_taxi::BWPax >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax > *","end", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWPax > * >(argp1);
  {
    try {
      result = (arg1)->end();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::deque< si_taxi::BWPax >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDeque.rbegin

  call-seq:
    rbegin -> reverse_iterator

Return a reverse iterator to the beginning (the end) of the BWPaxDeque.
*/
SWIGINTERN VALUE
_wrap_BWPaxDeque_rbegin(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWPax > *arg1 = (std::deque< si_taxi::BWPax > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::deque< si_taxi::BWPax >::reverse_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax > *","rbegin", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWPax > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::deque< si_taxi::BWPax >::reverse_iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDeque.rend

  call-seq:
    rend -> reverse_iterator

Return a reverse iterator to past the end (past the beginning) of the BWPaxDeque.
*/
SWIGINTERN VALUE
_wrap_BWPaxDeque_rend(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWPax > *arg1 = (std::deque< si_taxi::BWPax > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::deque< si_taxi::BWPax >::reverse_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax > *","rend", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWPax > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::deque< si_taxi::BWPax >::reverse_iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_BWPaxDeque__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWPax >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  const char *classname SWIGUNUSED = "SiTaxi::BWPaxDeque";
  std::deque< si_taxi::BWPax > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax >::size_type","std::deque<(si_taxi::BWPax)>", 1, argv[0] ));
  } 
  arg1 = static_cast< std::deque< si_taxi::BWPax >::size_type >(val1);
  {
    try {
      result = (std::deque< si_taxi::BWPax > *)new std::deque< si_taxi::BWPax >(arg1);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDeque.resize

  call-seq:
    resize(new_size)
    resize(new_size, x)

Resize the size of the BWPaxDeque.
*/
SWIGINTERN VALUE
_wrap_BWPaxDeque_resize__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWPax > *arg1 = (std::deque< si_taxi::BWPax > *) 0 ;
  std::deque< si_taxi::BWPax >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWPax > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax >::size_type","resize", 2, argv[0] ));
  } 
  arg2 = static_cast< std::deque< si_taxi::BWPax >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDeque.erase

  call-seq:
    erase(pos) -> iterator
    erase(first, last) -> iterator

Delete a portion of the BWPaxDeque.
*/
SWIGINTERN VALUE
_wrap_BWPaxDeque_erase__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWPax > *arg1 = (std::deque< si_taxi::BWPax > *) 0 ;
  std::deque< si_taxi::BWPax >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  std::deque< si_taxi::BWPax >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax > *","erase", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWPax > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax >::iterator","erase", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::deque< si_taxi::BWPax >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::deque< si_taxi::BWPax >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax >::iterator","erase", 2, argv[0] ));
    }
  }
  {
    try {
      result = (arg1)->erase(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::deque< si_taxi::BWPax >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWPaxDeque_erase__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWPax > *arg1 = (std::deque< si_taxi::BWPax > *) 0 ;
  std::deque< si_taxi::BWPax >::iterator arg2 ;
  std::deque< si_taxi::BWPax >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  swig::Iterator *iter3 = 0 ;
  int res3 ;
  std::deque< si_taxi::BWPax >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax > *","erase", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWPax > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax >::iterator","erase", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::deque< si_taxi::BWPax >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::deque< si_taxi::BWPax >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax >::iterator","erase", 2, argv[0] ));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter3), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax >::iterator","erase", 3, argv[1] ));
  } else {
    swig::Iterator_T<std::deque< si_taxi::BWPax >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::deque< si_taxi::BWPax >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax >::iterator","erase", 3, argv[1] ));
    }
  }
  {
    try {
      result = (arg1)->erase(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::deque< si_taxi::BWPax >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_BWPaxDeque_erase(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::deque< si_taxi::BWPax >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_BWPaxDeque_erase__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::deque< si_taxi::BWPax >::iterator > *>(iter) != 0));
      if (_v) {
        swig::ConstIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), 
          swig::Iterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::deque< si_taxi::BWPax >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_BWPaxDeque_erase__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "BWPaxDeque.erase", 
    "    std::deque< si_taxi::BWPax >::iterator BWPaxDeque.erase(std::deque< si_taxi::BWPax >::iterator pos)\n"
    "    std::deque< si_taxi::BWPax >::iterator BWPaxDeque.erase(std::deque< si_taxi::BWPax >::iterator first, std::deque< si_taxi::BWPax >::iterator last)\n");
  
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_BWPaxDeque_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_BWPaxDeque_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_BWPaxDeque__SWIG_3(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWPax >::size_type arg1 ;
  std::deque< si_taxi::BWPax >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  const char *classname SWIGUNUSED = "SiTaxi::BWPaxDeque";
  std::deque< si_taxi::BWPax > *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax >::size_type","std::deque<(si_taxi::BWPax)>", 1, argv[0] ));
  } 
  arg1 = static_cast< std::deque< si_taxi::BWPax >::size_type >(val1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_si_taxi__BWPax,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax >::value_type const &","std::deque<(si_taxi::BWPax)>", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::deque< si_taxi::BWPax >::value_type const &","std::deque<(si_taxi::BWPax)>", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< std::deque< si_taxi::BWPax >::value_type * >(argp2);
  {
    try {
      result = (std::deque< si_taxi::BWPax > *)new std::deque< si_taxi::BWPax >(arg1,(std::deque< si_taxi::BWPax >::value_type const &)*arg2);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_BWPaxDeque(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_BWPaxDeque__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_BWPaxDeque__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_BWPaxDeque__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_si_taxi__BWPax, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_BWPaxDeque__SWIG_3(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "BWPaxDeque.new", 
    "    BWPaxDeque.new()\n"
    "    BWPaxDeque.new(std::deque< si_taxi::BWPax > const &)\n"
    "    BWPaxDeque.new(std::deque< si_taxi::BWPax >::size_type size)\n"
    "    BWPaxDeque.new(std::deque< si_taxi::BWPax >::size_type size, std::deque< si_taxi::BWPax >::value_type const &value)\n");
  
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDeque.front

  call-seq:
    front -> value_type

Return the first element in BWPaxDeque.
*/
SWIGINTERN VALUE
_wrap_BWPaxDeque_front(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWPax > *arg1 = (std::deque< si_taxi::BWPax > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::deque< si_taxi::BWPax >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax > const *","front", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWPax > * >(argp1);
  {
    try {
      result = (std::deque< si_taxi::BWPax >::value_type *) &((std::deque< si_taxi::BWPax > const *)arg1)->front();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_si_taxi__BWPax, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDeque.back

  call-seq:
    back -> value_type

Return the last element in BWPaxDeque.
*/
SWIGINTERN VALUE
_wrap_BWPaxDeque_back(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWPax > *arg1 = (std::deque< si_taxi::BWPax > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::deque< si_taxi::BWPax >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax > const *","back", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWPax > * >(argp1);
  {
    try {
      result = (std::deque< si_taxi::BWPax >::value_type *) &((std::deque< si_taxi::BWPax > const *)arg1)->back();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_si_taxi__BWPax, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDeque.assign

  call-seq:
    assign(n, x)

Assign a new BWPaxDeque or portion of it.
*/
SWIGINTERN VALUE
_wrap_BWPaxDeque_assign(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWPax > *arg1 = (std::deque< si_taxi::BWPax > *) 0 ;
  std::deque< si_taxi::BWPax >::size_type arg2 ;
  std::deque< si_taxi::BWPax >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax > *","assign", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWPax > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax >::size_type","assign", 2, argv[0] ));
  } 
  arg2 = static_cast< std::deque< si_taxi::BWPax >::size_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_si_taxi__BWPax,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax >::value_type const &","assign", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::deque< si_taxi::BWPax >::value_type const &","assign", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::deque< si_taxi::BWPax >::value_type * >(argp3);
  {
    try {
      (arg1)->assign(arg2,(std::deque< si_taxi::BWPax >::value_type const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDeque.resize

  call-seq:
    resize(new_size)
    resize(new_size, x)

Resize the size of the BWPaxDeque.
*/
SWIGINTERN VALUE
_wrap_BWPaxDeque_resize__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWPax > *arg1 = (std::deque< si_taxi::BWPax > *) 0 ;
  std::deque< si_taxi::BWPax >::size_type arg2 ;
  std::deque< si_taxi::BWPax >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWPax > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax >::size_type","resize", 2, argv[0] ));
  } 
  arg2 = static_cast< std::deque< si_taxi::BWPax >::size_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_si_taxi__BWPax,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax >::value_type const &","resize", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::deque< si_taxi::BWPax >::value_type const &","resize", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::deque< si_taxi::BWPax >::value_type * >(argp3);
  {
    try {
      (arg1)->resize(arg2,(std::deque< si_taxi::BWPax >::value_type const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_BWPaxDeque_resize(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BWPaxDeque_resize__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_si_taxi__BWPax, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BWPaxDeque_resize__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "BWPaxDeque.resize", 
    "    void BWPaxDeque.resize(std::deque< si_taxi::BWPax >::size_type new_size)\n"
    "    void BWPaxDeque.resize(std::deque< si_taxi::BWPax >::size_type new_size, std::deque< si_taxi::BWPax >::value_type const &x)\n");
  
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDeque.insert

  call-seq:
    insert(pos, x) -> iterator
    insert(pos, n, x)

Insert one or more new elements in the BWPaxDeque.
*/
SWIGINTERN VALUE
_wrap_BWPaxDeque_insert__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWPax > *arg1 = (std::deque< si_taxi::BWPax > *) 0 ;
  std::deque< si_taxi::BWPax >::iterator arg2 ;
  std::deque< si_taxi::BWPax >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  std::deque< si_taxi::BWPax >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWPax > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax >::iterator","insert", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::deque< si_taxi::BWPax >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::deque< si_taxi::BWPax >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax >::iterator","insert", 2, argv[0] ));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_si_taxi__BWPax,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax >::value_type const &","insert", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::deque< si_taxi::BWPax >::value_type const &","insert", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::deque< si_taxi::BWPax >::value_type * >(argp3);
  {
    try {
      result = (arg1)->insert(arg2,(std::deque< si_taxi::BWPax >::value_type const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::deque< si_taxi::BWPax >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWPaxDeque_insert__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWPax > *arg1 = (std::deque< si_taxi::BWPax > *) 0 ;
  std::deque< si_taxi::BWPax >::iterator arg2 ;
  std::deque< si_taxi::BWPax >::size_type arg3 ;
  std::deque< si_taxi::BWPax >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWPax > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax >::iterator","insert", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::deque< si_taxi::BWPax >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::deque< si_taxi::BWPax >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax >::iterator","insert", 2, argv[0] ));
    }
  }
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax >::size_type","insert", 3, argv[1] ));
  } 
  arg3 = static_cast< std::deque< si_taxi::BWPax >::size_type >(val3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_si_taxi__BWPax,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax >::value_type const &","insert", 4, argv[2] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::deque< si_taxi::BWPax >::value_type const &","insert", 4, argv[2])); 
  }
  arg4 = reinterpret_cast< std::deque< si_taxi::BWPax >::value_type * >(argp4);
  {
    try {
      (arg1)->insert(arg2,arg3,(std::deque< si_taxi::BWPax >::value_type const &)*arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_BWPaxDeque_insert(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::deque< si_taxi::BWPax >::iterator > *>(iter) != 0));
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_si_taxi__BWPax, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BWPaxDeque_insert__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::deque< si_taxi::BWPax >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_si_taxi__BWPax, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_BWPaxDeque_insert__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "BWPaxDeque.insert", 
    "    void BWPaxDeque.insert(std::deque< si_taxi::BWPax >::iterator pos, std::deque< si_taxi::BWPax >::value_type const &x)\n"
    "    void BWPaxDeque.insert(std::deque< si_taxi::BWPax >::iterator pos, std::deque< si_taxi::BWPax >::size_type n, std::deque< si_taxi::BWPax >::value_type const &x)\n");
  
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDeque.pop_front

  call-seq:
    pop_front

Remove and return element at the beginning of the BWPaxDeque.
*/
SWIGINTERN VALUE
_wrap_BWPaxDeque_pop_front(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWPax > *arg1 = (std::deque< si_taxi::BWPax > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax > *","pop_front", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWPax > * >(argp1);
  {
    try {
      (arg1)->pop_front();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDeque.push_front

  call-seq:
    push_front(x)

Add an element at the beginning of the BWPaxDeque.
*/
SWIGINTERN VALUE
_wrap_BWPaxDeque_push_front(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWPax > *arg1 = (std::deque< si_taxi::BWPax > *) 0 ;
  std::deque< si_taxi::BWPax >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax > *","push_front", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWPax > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_si_taxi__BWPax,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWPax >::value_type const &","push_front", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::deque< si_taxi::BWPax >::value_type const &","push_front", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::deque< si_taxi::BWPax >::value_type * >(argp2);
  {
    try {
      (arg1)->push_front((std::deque< si_taxi::BWPax >::value_type const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN void
free_std_deque_Sl_si_taxi_BWPax_Sg_(std::deque< si_taxi::BWPax > *arg1) {
    delete arg1;
}

swig_class SwigClassBWTimeDeque;


/*
  Document-method: SiTaxi::BWTimeDeque.dup

  call-seq:
    dup -> BWTimeDeque

Create a duplicate of the class and unfreeze it if needed.
*/
SWIGINTERN VALUE
_wrap_BWTimeDeque_dup(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWTime > *arg1 = (std::deque< si_taxi::BWTime > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::deque< long,std::allocator< long > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWTime > *","dup", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWTime > * >(argp1);
  {
    try {
      result = (std::deque< long,std::allocator< long > > *)std_deque_Sl_si_taxi_BWTime_Sg__dup(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__dequeT_long_std__allocatorT_long_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDeque.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_BWTimeDeque_inspect(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWTime > *arg1 = (std::deque< si_taxi::BWTime > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWTime > *","inspect", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWTime > * >(argp1);
  {
    try {
      result = (VALUE)std_deque_Sl_si_taxi_BWTime_Sg__inspect(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDeque.to_a

  call-seq:
    to_a -> VALUE

Convert BWTimeDeque to an Array.
*/
SWIGINTERN VALUE
_wrap_BWTimeDeque_to_a(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWTime > *arg1 = (std::deque< si_taxi::BWTime > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWTime > *","to_a", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWTime > * >(argp1);
  {
    try {
      result = (VALUE)std_deque_Sl_si_taxi_BWTime_Sg__to_a(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDeque.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_BWTimeDeque_to_s(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWTime > *arg1 = (std::deque< si_taxi::BWTime > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWTime > *","to_s", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWTime > * >(argp1);
  {
    try {
      result = (VALUE)std_deque_Sl_si_taxi_BWTime_Sg__to_s(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDeque.slice

  call-seq:
    slice(i, j) -> VALUE

Return a slice (portion of) the BWTimeDeque.
*/
SWIGINTERN VALUE
_wrap_BWTimeDeque_slice(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWTime > *arg1 = (std::deque< si_taxi::BWTime > *) 0 ;
  std::deque< long >::difference_type arg2 ;
  std::deque< long >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWTime > *","slice", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWTime > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::deque< long >::difference_type","slice", 2, argv[0] ));
  } 
  arg2 = static_cast< std::deque< long >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::deque< long >::difference_type","slice", 3, argv[1] ));
  } 
  arg3 = static_cast< std::deque< long >::difference_type >(val3);
  {
    try {
      result = (VALUE)std_deque_Sl_si_taxi_BWTime_Sg__slice(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDeque.each

  call-seq:
    each -> BWTimeDeque

Iterate thru each element in the BWTimeDeque.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_BWTimeDeque_each(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWTime > *arg1 = (std::deque< si_taxi::BWTime > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::deque< long,std::allocator< long > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWTime > *","each", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWTime > * >(argp1);
  {
    try {
      result = (std::deque< long,std::allocator< long > > *)std_deque_Sl_si_taxi_BWTime_Sg__each(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__dequeT_long_std__allocatorT_long_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDeque.select

  call-seq:
    select -> BWTimeDeque

Iterate thru each element in the BWTimeDeque and select those that match a condition.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_BWTimeDeque_select(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWTime > *arg1 = (std::deque< si_taxi::BWTime > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::deque< long,std::allocator< long > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWTime > *","select", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWTime > * >(argp1);
  {
    try {
      result = (std::deque< long,std::allocator< long > > *)std_deque_Sl_si_taxi_BWTime_Sg__select(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__dequeT_long_std__allocatorT_long_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDeque.reject_bang

  call-seq:
    reject_bang -> BWTimeDeque

Iterate thru each element in the BWTimeDeque and reject those that fail a condition.  A block must be provided.  BWTimeDeque is modified in place.
*/
SWIGINTERN VALUE
_wrap_BWTimeDeque_reject_bang(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWTime > *arg1 = (std::deque< si_taxi::BWTime > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::deque< long,std::allocator< long > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWTime > *","reject_bang", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWTime > * >(argp1);
  {
    try {
      result = (std::deque< long,std::allocator< long > > *)std_deque_Sl_si_taxi_BWTime_Sg__reject_bang(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__dequeT_long_std__allocatorT_long_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDeque.delete_at

  call-seq:
    delete_at(i) -> VALUE

Delete an element at a certain index.
*/
SWIGINTERN VALUE
_wrap_BWTimeDeque_delete_at(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWTime > *arg1 = (std::deque< si_taxi::BWTime > *) 0 ;
  std::deque< long >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWTime > *","delete_at", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWTime > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::deque< long >::difference_type","delete_at", 2, argv[0] ));
  } 
  arg2 = static_cast< std::deque< long >::difference_type >(val2);
  {
    try {
      result = (VALUE)std_deque_Sl_si_taxi_BWTime_Sg__delete_at(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWTimeDeque___delete2__(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWTime > *arg1 = (std::deque< si_taxi::BWTime > *) 0 ;
  std::deque< long >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::deque< long >::value_type temp2 ;
  long val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWTime > *","__delete2__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWTime > * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::deque< long >::value_type","__delete2__", 2, argv[0] ));
  } 
  temp2 = static_cast< std::deque< long >::value_type >(val2);
  arg2 = &temp2;
  {
    try {
      result = (VALUE)std_deque_Sl_si_taxi_BWTime_Sg____delete2__(arg1,(long const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDeque.pop

  call-seq:
    pop -> VALUE

Remove and return element at the end of the BWTimeDeque.
*/
SWIGINTERN VALUE
_wrap_BWTimeDeque_pop(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWTime > *arg1 = (std::deque< si_taxi::BWTime > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWTime > *","pop", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWTime > * >(argp1);
  {
    try {
      result = (VALUE)std_deque_Sl_si_taxi_BWTime_Sg__pop(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDeque.push

  call-seq:
    push(e) -> std::deque<(long)>::value_type

Add an element at the end of the BWTimeDeque.
*/
SWIGINTERN VALUE
_wrap_BWTimeDeque_push(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWTime > *arg1 = (std::deque< si_taxi::BWTime > *) 0 ;
  std::deque< long >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::deque< long >::value_type temp2 ;
  long val2 ;
  int ecode2 = 0 ;
  std::deque< long >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWTime > *","push", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWTime > * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::deque< long >::value_type","push", 2, argv[0] ));
  } 
  temp2 = static_cast< std::deque< long >::value_type >(val2);
  arg2 = &temp2;
  {
    try {
      result = (std::deque< long >::value_type)std_deque_Sl_si_taxi_BWTime_Sg__push(arg1,(long const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDeque.reject

  call-seq:
    reject -> BWTimeDeque

Iterate thru each element in the BWTimeDeque and reject those that fail a condition returning a new BWTimeDeque.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_BWTimeDeque_reject(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWTime > *arg1 = (std::deque< si_taxi::BWTime > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::deque< long,std::allocator< long > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWTime > *","reject", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWTime > * >(argp1);
  {
    try {
      result = (std::deque< long,std::allocator< long > > *)std_deque_Sl_si_taxi_BWTime_Sg__reject(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__dequeT_long_std__allocatorT_long_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDeque.at

  call-seq:
    at(i) -> VALUE

Return element at a certain index.
*/
SWIGINTERN VALUE
_wrap_BWTimeDeque_at(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWTime > *arg1 = (std::deque< si_taxi::BWTime > *) 0 ;
  std::deque< long >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWTime > const *","at", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWTime > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::deque< long >::difference_type","at", 2, argv[0] ));
  } 
  arg2 = static_cast< std::deque< long >::difference_type >(val2);
  {
    try {
      result = (VALUE)std_deque_Sl_si_taxi_BWTime_Sg__at((std::deque< long > const *)arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDeque.[]

  call-seq:
    [](i, j) -> VALUE
    [](i) -> VALUE
    [](i) -> VALUE

Element accessor/slicing.
*/
SWIGINTERN VALUE
_wrap_BWTimeDeque___getitem____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWTime > *arg1 = (std::deque< si_taxi::BWTime > *) 0 ;
  std::deque< long >::difference_type arg2 ;
  std::deque< long >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWTime > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWTime > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::deque< long >::difference_type","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::deque< long >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::deque< long >::difference_type","__getitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< std::deque< long >::difference_type >(val3);
  {
    try {
      result = (VALUE)std_deque_Sl_si_taxi_BWTime_Sg____getitem____SWIG_0((std::deque< long > const *)arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWTimeDeque___getitem____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWTime > *arg1 = (std::deque< si_taxi::BWTime > *) 0 ;
  std::deque< long >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWTime > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWTime > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::deque< long >::difference_type","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::deque< long >::difference_type >(val2);
  {
    try {
      result = (VALUE)std_deque_Sl_si_taxi_BWTime_Sg____getitem____SWIG_1((std::deque< long > const *)arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWTimeDeque___getitem____SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWTime > *arg1 = (std::deque< si_taxi::BWTime > *) 0 ;
  VALUE arg2 = (VALUE) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWTime > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWTime > * >(argp1);
  arg2 = argv[0];
  {
    try {
      result = (VALUE)std_deque_Sl_si_taxi_BWTime_Sg____getitem____SWIG_2((std::deque< long > const *)arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_BWTimeDeque___getitem__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::deque<long,std::allocator< long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BWTimeDeque___getitem____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::deque<long,std::allocator< long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_BWTimeDeque___getitem____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::deque<long,std::allocator< long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BWTimeDeque___getitem____SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "__getitem__", 
    "    VALUE __getitem__(std::deque< long >::difference_type i, std::deque< long >::difference_type j)\n"
    "    VALUE __getitem__(std::deque< long >::difference_type i)\n"
    "    VALUE __getitem__(VALUE i)\n");
  
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDeque.[]=

  call-seq:
    []=(i, x) -> VALUE
    []=(i, j, v) -> VALUE

Element setter/slicing.
*/
SWIGINTERN VALUE
_wrap_BWTimeDeque___setitem____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWTime > *arg1 = (std::deque< si_taxi::BWTime > *) 0 ;
  std::deque< long >::difference_type arg2 ;
  std::deque< long >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::deque< long >::value_type temp3 ;
  long val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWTime > *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWTime > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::deque< long >::difference_type","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::deque< long >::difference_type >(val2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::deque< long >::value_type","__setitem__", 3, argv[1] ));
  } 
  temp3 = static_cast< std::deque< long >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      result = (VALUE)std_deque_Sl_si_taxi_BWTime_Sg____setitem____SWIG_0(arg1,arg2,(long const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWTimeDeque___setitem____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWTime > *arg1 = (std::deque< si_taxi::BWTime > *) 0 ;
  std::deque< long >::difference_type arg2 ;
  std::deque< long >::difference_type arg3 ;
  std::deque< long,std::allocator< long > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWTime > *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWTime > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::deque< long >::difference_type","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::deque< long >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::deque< long >::difference_type","__setitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< std::deque< long >::difference_type >(val3);
  {
    std::deque<long,std::allocator< long > > *ptr = (std::deque<long,std::allocator< long > > *)0;
    res4 = swig::asptr(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "std::deque< long,std::allocator< long > > const &","__setitem__", 4, argv[2] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::deque< long,std::allocator< long > > const &","__setitem__", 4, argv[2])); 
    }
    arg4 = ptr;
  }
  {
    try {
      try {
        result = (VALUE)std_deque_Sl_si_taxi_BWTime_Sg____setitem____SWIG_1(arg1,arg2,arg3,(std::deque< long,std::allocator< long > > const &)*arg4);
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return vresult;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
}


SWIGINTERN VALUE _wrap_BWTimeDeque___setitem__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::deque<long,std::allocator< long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BWTimeDeque___setitem____SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::deque<long,std::allocator< long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::deque<long,std::allocator< long > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_BWTimeDeque___setitem____SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "__setitem__", 
    "    VALUE __setitem__(std::deque< long >::difference_type i, std::deque< long >::value_type const &x)\n"
    "    VALUE __setitem__(std::deque< long >::difference_type i, std::deque< long >::difference_type j, std::deque< long,std::allocator< long > > const &v)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_BWTimeDeque__SWIG_0(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "SiTaxi::BWTimeDeque";
  std::deque< si_taxi::BWTime > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (std::deque< si_taxi::BWTime > *)new std::deque< si_taxi::BWTime >();
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_BWTimeDeque__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWTime > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  const char *classname SWIGUNUSED = "SiTaxi::BWTimeDeque";
  std::deque< si_taxi::BWTime > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    std::deque<long,std::allocator< long > > *ptr = (std::deque<long,std::allocator< long > > *)0;
    res1 = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWTime > const &","std::deque<(si_taxi::BWTime)>", 1, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::deque< si_taxi::BWTime > const &","std::deque<(si_taxi::BWTime)>", 1, argv[0])); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::deque< si_taxi::BWTime > *)new std::deque< si_taxi::BWTime >((std::deque< si_taxi::BWTime > const &)*arg1);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return self;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDeque.empty

  call-seq:
    empty -> bool

Check if the BWTimeDeque is empty or not.
*/
SWIGINTERN VALUE
_wrap_BWTimeDeque_empty(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWTime > *arg1 = (std::deque< si_taxi::BWTime > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWTime > const *","empty", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWTime > * >(argp1);
  {
    try {
      result = (bool)((std::deque< si_taxi::BWTime > const *)arg1)->empty();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDeque.size

  call-seq:
    size -> std::deque<(long)>::size_type

Size or Length of the BWTimeDeque.
*/
SWIGINTERN VALUE
_wrap_BWTimeDeque_size(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWTime > *arg1 = (std::deque< si_taxi::BWTime > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::deque< long >::size_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWTime > const *","size", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWTime > * >(argp1);
  {
    try {
      result = ((std::deque< si_taxi::BWTime > const *)arg1)->size();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDeque.clear

  call-seq:
    clear

Clear BWTimeDeque contents.
*/
SWIGINTERN VALUE
_wrap_BWTimeDeque_clear(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWTime > *arg1 = (std::deque< si_taxi::BWTime > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWTime > *","clear", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWTime > * >(argp1);
  {
    try {
      (arg1)->clear();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWTimeDeque_swap(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWTime > *arg1 = (std::deque< si_taxi::BWTime > *) 0 ;
  std::deque< si_taxi::BWTime > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWTime > *","swap", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWTime > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__dequeT_long_std__allocatorT_long_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWTime > &","swap", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::deque< si_taxi::BWTime > &","swap", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::deque< si_taxi::BWTime > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWTimeDeque_get_allocator(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWTime > *arg1 = (std::deque< si_taxi::BWTime > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::allocator< long > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWTime > const *","get_allocator", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWTime > * >(argp1);
  {
    try {
      result = ((std::deque< si_taxi::BWTime > const *)arg1)->get_allocator();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new std::deque< long >::allocator_type(static_cast< const std::deque< long >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_long_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDeque.begin

  call-seq:
    begin -> std::deque<(long)>::iterator

Return an iterator to the beginning of the BWTimeDeque.
*/
SWIGINTERN VALUE
_wrap_BWTimeDeque_begin(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWTime > *arg1 = (std::deque< si_taxi::BWTime > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::deque< long >::iterator > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWTime > *","begin", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWTime > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::deque< long >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDeque.end

  call-seq:
    end -> std::deque<(long)>::iterator

Return an iterator to past the end of the BWTimeDeque.
*/
SWIGINTERN VALUE
_wrap_BWTimeDeque_end(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWTime > *arg1 = (std::deque< si_taxi::BWTime > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::deque< long >::iterator > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWTime > *","end", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWTime > * >(argp1);
  {
    try {
      result = (arg1)->end();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::deque< long >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDeque.rbegin

  call-seq:
    rbegin -> std::deque<(long)>::reverse_iterator

Return a reverse iterator to the beginning (the end) of the BWTimeDeque.
*/
SWIGINTERN VALUE
_wrap_BWTimeDeque_rbegin(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWTime > *arg1 = (std::deque< si_taxi::BWTime > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::deque< long >::reverse_iterator > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWTime > *","rbegin", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWTime > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::deque< long >::reverse_iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDeque.rend

  call-seq:
    rend -> std::deque<(long)>::reverse_iterator

Return a reverse iterator to past the end (past the beginning) of the BWTimeDeque.
*/
SWIGINTERN VALUE
_wrap_BWTimeDeque_rend(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWTime > *arg1 = (std::deque< si_taxi::BWTime > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::deque< long >::reverse_iterator > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWTime > *","rend", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWTime > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::deque< long >::reverse_iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_BWTimeDeque__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::deque< long >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  const char *classname SWIGUNUSED = "SiTaxi::BWTimeDeque";
  std::deque< si_taxi::BWTime > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "std::deque< long >::size_type","std::deque<(si_taxi::BWTime)>", 1, argv[0] ));
  } 
  arg1 = static_cast< std::deque< long >::size_type >(val1);
  {
    try {
      result = (std::deque< si_taxi::BWTime > *)new std::deque< si_taxi::BWTime >(arg1);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDeque.resize

  call-seq:
    resize(new_size)
    resize(new_size, x)

Resize the size of the BWTimeDeque.
*/
SWIGINTERN VALUE
_wrap_BWTimeDeque_resize__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWTime > *arg1 = (std::deque< si_taxi::BWTime > *) 0 ;
  std::deque< long >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWTime > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWTime > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::deque< long >::size_type","resize", 2, argv[0] ));
  } 
  arg2 = static_cast< std::deque< long >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDeque.erase

  call-seq:
    erase(pos) -> std::deque<(long)>::iterator
    erase(first, last) -> std::deque<(long)>::iterator

Delete a portion of the BWTimeDeque.
*/
SWIGINTERN VALUE
_wrap_BWTimeDeque_erase__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWTime > *arg1 = (std::deque< si_taxi::BWTime > *) 0 ;
  SwigValueWrapper< std::deque< long >::iterator > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  SwigValueWrapper< std::deque< long >::iterator > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWTime > *","erase", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWTime > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::deque< long >::iterator","erase", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::deque< long >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::deque< long >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::deque< long >::iterator","erase", 2, argv[0] ));
    }
  }
  {
    try {
      result = (arg1)->erase(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::deque< long >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWTimeDeque_erase__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWTime > *arg1 = (std::deque< si_taxi::BWTime > *) 0 ;
  SwigValueWrapper< std::deque< long >::iterator > arg2 ;
  SwigValueWrapper< std::deque< long >::iterator > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  swig::Iterator *iter3 = 0 ;
  int res3 ;
  SwigValueWrapper< std::deque< long >::iterator > result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWTime > *","erase", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWTime > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::deque< long >::iterator","erase", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::deque< long >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::deque< long >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::deque< long >::iterator","erase", 2, argv[0] ));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter3), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::deque< long >::iterator","erase", 3, argv[1] ));
  } else {
    swig::Iterator_T<std::deque< long >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::deque< long >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::deque< long >::iterator","erase", 3, argv[1] ));
    }
  }
  {
    try {
      result = (arg1)->erase(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::deque< long >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_BWTimeDeque_erase(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::deque<long,std::allocator< long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::deque< long >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_BWTimeDeque_erase__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::deque<long,std::allocator< long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::deque< long >::iterator > *>(iter) != 0));
      if (_v) {
        swig::ConstIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), 
          swig::Iterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::deque< long >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_BWTimeDeque_erase__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "BWTimeDeque.erase", 
    "    std::deque< long >::iterator BWTimeDeque.erase(std::deque< long >::iterator pos)\n"
    "    std::deque< long >::iterator BWTimeDeque.erase(std::deque< long >::iterator first, std::deque< long >::iterator last)\n");
  
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_BWTimeDeque_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_BWTimeDeque_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_std__dequeT_long_std__allocatorT_long_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_BWTimeDeque__SWIG_3(int argc, VALUE *argv, VALUE self) {
  std::deque< long >::size_type arg1 ;
  std::deque< long >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::deque< long >::value_type temp2 ;
  long val2 ;
  int ecode2 = 0 ;
  const char *classname SWIGUNUSED = "SiTaxi::BWTimeDeque";
  std::deque< si_taxi::BWTime > *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "std::deque< long >::size_type","std::deque<(si_taxi::BWTime)>", 1, argv[0] ));
  } 
  arg1 = static_cast< std::deque< long >::size_type >(val1);
  ecode2 = SWIG_AsVal_long(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::deque< long >::value_type","std::deque<(si_taxi::BWTime)>", 2, argv[1] ));
  } 
  temp2 = static_cast< std::deque< long >::value_type >(val2);
  arg2 = &temp2;
  {
    try {
      result = (std::deque< si_taxi::BWTime > *)new std::deque< si_taxi::BWTime >(arg1,(std::deque< long >::value_type const &)*arg2);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_BWTimeDeque(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_BWTimeDeque__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_BWTimeDeque__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::deque<long,std::allocator< long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_BWTimeDeque__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_BWTimeDeque__SWIG_3(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "BWTimeDeque.new", 
    "    BWTimeDeque.new()\n"
    "    BWTimeDeque.new(std::deque< si_taxi::BWTime > const &)\n"
    "    BWTimeDeque.new(std::deque< long >::size_type size)\n"
    "    BWTimeDeque.new(std::deque< long >::size_type size, std::deque< long >::value_type const &value)\n");
  
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDeque.front

  call-seq:
    front -> std::deque<(long)>::value_type

Return the first element in BWTimeDeque.
*/
SWIGINTERN VALUE
_wrap_BWTimeDeque_front(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWTime > *arg1 = (std::deque< si_taxi::BWTime > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::deque< long >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWTime > const *","front", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWTime > * >(argp1);
  {
    try {
      result = (std::deque< long >::value_type *) &((std::deque< si_taxi::BWTime > const *)arg1)->front();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_long(static_cast< long >(*result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDeque.back

  call-seq:
    back -> std::deque<(long)>::value_type

Return the last element in BWTimeDeque.
*/
SWIGINTERN VALUE
_wrap_BWTimeDeque_back(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWTime > *arg1 = (std::deque< si_taxi::BWTime > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::deque< long >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWTime > const *","back", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWTime > * >(argp1);
  {
    try {
      result = (std::deque< long >::value_type *) &((std::deque< si_taxi::BWTime > const *)arg1)->back();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_long(static_cast< long >(*result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDeque.assign

  call-seq:
    assign(n, x)

Assign a new BWTimeDeque or portion of it.
*/
SWIGINTERN VALUE
_wrap_BWTimeDeque_assign(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWTime > *arg1 = (std::deque< si_taxi::BWTime > *) 0 ;
  std::deque< long >::size_type arg2 ;
  std::deque< long >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::deque< long >::value_type temp3 ;
  long val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWTime > *","assign", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWTime > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::deque< long >::size_type","assign", 2, argv[0] ));
  } 
  arg2 = static_cast< std::deque< long >::size_type >(val2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::deque< long >::value_type","assign", 3, argv[1] ));
  } 
  temp3 = static_cast< std::deque< long >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      (arg1)->assign(arg2,(std::deque< long >::value_type const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDeque.resize

  call-seq:
    resize(new_size)
    resize(new_size, x)

Resize the size of the BWTimeDeque.
*/
SWIGINTERN VALUE
_wrap_BWTimeDeque_resize__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWTime > *arg1 = (std::deque< si_taxi::BWTime > *) 0 ;
  std::deque< long >::size_type arg2 ;
  std::deque< long >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::deque< long >::value_type temp3 ;
  long val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWTime > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWTime > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::deque< long >::size_type","resize", 2, argv[0] ));
  } 
  arg2 = static_cast< std::deque< long >::size_type >(val2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::deque< long >::value_type","resize", 3, argv[1] ));
  } 
  temp3 = static_cast< std::deque< long >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      (arg1)->resize(arg2,(std::deque< long >::value_type const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_BWTimeDeque_resize(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::deque<long,std::allocator< long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BWTimeDeque_resize__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::deque<long,std::allocator< long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BWTimeDeque_resize__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "BWTimeDeque.resize", 
    "    void BWTimeDeque.resize(std::deque< long >::size_type new_size)\n"
    "    void BWTimeDeque.resize(std::deque< long >::size_type new_size, std::deque< long >::value_type const &x)\n");
  
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDeque.insert

  call-seq:
    insert(pos, x) -> std::deque<(long)>::iterator
    insert(pos, n, x)

Insert one or more new elements in the BWTimeDeque.
*/
SWIGINTERN VALUE
_wrap_BWTimeDeque_insert__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWTime > *arg1 = (std::deque< si_taxi::BWTime > *) 0 ;
  SwigValueWrapper< std::deque< long >::iterator > arg2 ;
  std::deque< long >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  std::deque< long >::value_type temp3 ;
  long val3 ;
  int ecode3 = 0 ;
  SwigValueWrapper< std::deque< long >::iterator > result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWTime > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWTime > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::deque< long >::iterator","insert", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::deque< long >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::deque< long >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::deque< long >::iterator","insert", 2, argv[0] ));
    }
  }
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::deque< long >::value_type","insert", 3, argv[1] ));
  } 
  temp3 = static_cast< std::deque< long >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      result = (arg1)->insert(arg2,(std::deque< long >::value_type const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::deque< long >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWTimeDeque_insert__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWTime > *arg1 = (std::deque< si_taxi::BWTime > *) 0 ;
  SwigValueWrapper< std::deque< long >::iterator > arg2 ;
  std::deque< long >::size_type arg3 ;
  std::deque< long >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::deque< long >::value_type temp4 ;
  long val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWTime > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWTime > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::deque< long >::iterator","insert", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::deque< long >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::deque< long >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::deque< long >::iterator","insert", 2, argv[0] ));
    }
  }
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::deque< long >::size_type","insert", 3, argv[1] ));
  } 
  arg3 = static_cast< std::deque< long >::size_type >(val3);
  ecode4 = SWIG_AsVal_long(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "std::deque< long >::value_type","insert", 4, argv[2] ));
  } 
  temp4 = static_cast< std::deque< long >::value_type >(val4);
  arg4 = &temp4;
  {
    try {
      (arg1)->insert(arg2,arg3,(std::deque< long >::value_type const &)*arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_BWTimeDeque_insert(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::deque<long,std::allocator< long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::deque< long >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BWTimeDeque_insert__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::deque<long,std::allocator< long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::deque< long >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_BWTimeDeque_insert__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "BWTimeDeque.insert", 
    "    void BWTimeDeque.insert(std::deque< long >::iterator pos, std::deque< long >::value_type const &x)\n"
    "    void BWTimeDeque.insert(std::deque< long >::iterator pos, std::deque< long >::size_type n, std::deque< long >::value_type const &x)\n");
  
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDeque.pop_front

  call-seq:
    pop_front

Remove and return element at the beginning of the BWTimeDeque.
*/
SWIGINTERN VALUE
_wrap_BWTimeDeque_pop_front(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWTime > *arg1 = (std::deque< si_taxi::BWTime > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWTime > *","pop_front", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWTime > * >(argp1);
  {
    try {
      (arg1)->pop_front();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDeque.push_front

  call-seq:
    push_front(x)

Add an element at the beginning of the BWTimeDeque.
*/
SWIGINTERN VALUE
_wrap_BWTimeDeque_push_front(int argc, VALUE *argv, VALUE self) {
  std::deque< si_taxi::BWTime > *arg1 = (std::deque< si_taxi::BWTime > *) 0 ;
  std::deque< long >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::deque< long >::value_type temp2 ;
  long val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__dequeT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::deque< si_taxi::BWTime > *","push_front", 1, self )); 
  }
  arg1 = reinterpret_cast< std::deque< si_taxi::BWTime > * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::deque< long >::value_type","push_front", 2, argv[0] ));
  } 
  temp2 = static_cast< std::deque< long >::value_type >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->push_front((std::deque< long >::value_type const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN void
free_std_deque_Sl_si_taxi_BWTime_Sg_(std::deque< si_taxi::BWTime > *arg1) {
    delete arg1;
}

swig_class SwigClassBWTimeDequeVector;


/*
  Document-method: SiTaxi::BWTimeDequeVector.dup

  call-seq:
    dup -> BWTimeDequeVector

Create a duplicate of the class and unfreeze it if needed.
*/
SWIGINTERN VALUE
_wrap_BWTimeDequeVector_dup(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWTime > > *arg1 = (std::vector< std::deque< si_taxi::BWTime > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWTime > > *","dup", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWTime > > * >(argp1);
  {
    try {
      result = (std::vector< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > > *)std_vector_Sl_std_deque_Sl_si_taxi_BWTime_Sg__Sg__dup(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDequeVector.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_BWTimeDequeVector_inspect(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWTime > > *arg1 = (std::vector< std::deque< si_taxi::BWTime > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWTime > > *","inspect", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWTime > > * >(argp1);
  {
    try {
      result = (VALUE)std_vector_Sl_std_deque_Sl_si_taxi_BWTime_Sg__Sg__inspect(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDequeVector.to_a

  call-seq:
    to_a -> VALUE

Convert BWTimeDequeVector to an Array.
*/
SWIGINTERN VALUE
_wrap_BWTimeDequeVector_to_a(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWTime > > *arg1 = (std::vector< std::deque< si_taxi::BWTime > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWTime > > *","to_a", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWTime > > * >(argp1);
  {
    try {
      result = (VALUE)std_vector_Sl_std_deque_Sl_si_taxi_BWTime_Sg__Sg__to_a(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDequeVector.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_BWTimeDequeVector_to_s(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWTime > > *arg1 = (std::vector< std::deque< si_taxi::BWTime > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWTime > > *","to_s", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWTime > > * >(argp1);
  {
    try {
      result = (VALUE)std_vector_Sl_std_deque_Sl_si_taxi_BWTime_Sg__Sg__to_s(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDequeVector.slice

  call-seq:
    slice(i, j) -> VALUE

Return a slice (portion of) the BWTimeDequeVector.
*/
SWIGINTERN VALUE
_wrap_BWTimeDequeVector_slice(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWTime > > *arg1 = (std::vector< std::deque< si_taxi::BWTime > > *) 0 ;
  std::vector< std::deque< long > >::difference_type arg2 ;
  std::vector< std::deque< long > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWTime > > *","slice", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWTime > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< std::deque< long > >::difference_type","slice", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< std::deque< long > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< std::deque< long > >::difference_type","slice", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< std::deque< long > >::difference_type >(val3);
  {
    try {
      result = (VALUE)std_vector_Sl_std_deque_Sl_si_taxi_BWTime_Sg__Sg__slice(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDequeVector.each

  call-seq:
    each -> BWTimeDequeVector

Iterate thru each element in the BWTimeDequeVector.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_BWTimeDequeVector_each(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWTime > > *arg1 = (std::vector< std::deque< si_taxi::BWTime > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWTime > > *","each", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWTime > > * >(argp1);
  {
    try {
      result = (std::vector< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > > *)std_vector_Sl_std_deque_Sl_si_taxi_BWTime_Sg__Sg__each(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDequeVector.select

  call-seq:
    select -> BWTimeDequeVector

Iterate thru each element in the BWTimeDequeVector and select those that match a condition.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_BWTimeDequeVector_select(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWTime > > *arg1 = (std::vector< std::deque< si_taxi::BWTime > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWTime > > *","select", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWTime > > * >(argp1);
  {
    try {
      result = (std::vector< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > > *)std_vector_Sl_std_deque_Sl_si_taxi_BWTime_Sg__Sg__select(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDequeVector.reject!

  call-seq:
    reject! -> BWTimeDequeVector

Iterate thru each element in the BWTimeDequeVector and reject those that fail a condition.  A block must be provided.  BWTimeDequeVector is modified in place.
*/
SWIGINTERN VALUE
_wrap_BWTimeDequeVector_rejectN___(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWTime > > *arg1 = (std::vector< std::deque< si_taxi::BWTime > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWTime > > *","reject_bang", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWTime > > * >(argp1);
  {
    try {
      result = (std::vector< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > > *)std_vector_Sl_std_deque_Sl_si_taxi_BWTime_Sg__Sg__reject_bang(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDequeVector.delete_at

  call-seq:
    delete_at(i) -> VALUE

Delete an element at a certain index.
*/
SWIGINTERN VALUE
_wrap_BWTimeDequeVector_delete_at(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWTime > > *arg1 = (std::vector< std::deque< si_taxi::BWTime > > *) 0 ;
  std::vector< std::deque< long > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWTime > > *","delete_at", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWTime > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< std::deque< long > >::difference_type","delete_at", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< std::deque< long > >::difference_type >(val2);
  {
    try {
      result = (VALUE)std_vector_Sl_std_deque_Sl_si_taxi_BWTime_Sg__Sg__delete_at(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWTimeDequeVector___delete2__(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWTime > > *arg1 = (std::vector< std::deque< si_taxi::BWTime > > *) 0 ;
  std::vector< std::deque< long > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWTime > > *","__delete2__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWTime > > * >(argp1);
  {
    std::deque<long,std::allocator< long > > *ptr = (std::deque<long,std::allocator< long > > *)0;
    res2 = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< std::deque< long > >::value_type const &","__delete2__", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< std::deque< long > >::value_type const &","__delete2__", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (VALUE)std_vector_Sl_std_deque_Sl_si_taxi_BWTime_Sg__Sg____delete2__(arg1,(std::deque< long,std::allocator< long > > const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDequeVector.pop

  call-seq:
    pop -> VALUE

Remove and return element at the end of the BWTimeDequeVector.
*/
SWIGINTERN VALUE
_wrap_BWTimeDequeVector_pop(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWTime > > *arg1 = (std::vector< std::deque< si_taxi::BWTime > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWTime > > *","pop", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWTime > > * >(argp1);
  {
    try {
      result = (VALUE)std_vector_Sl_std_deque_Sl_si_taxi_BWTime_Sg__Sg__pop(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDequeVector.push

  call-seq:
    push(e) -> std::vector<(std::deque<(long)>)>::value_type

Add an element at the end of the BWTimeDequeVector.
*/
SWIGINTERN VALUE
_wrap_BWTimeDequeVector_push(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWTime > > *arg1 = (std::vector< std::deque< si_taxi::BWTime > > *) 0 ;
  std::vector< std::deque< long > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::vector< std::deque< long > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWTime > > *","push", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWTime > > * >(argp1);
  {
    std::deque<long,std::allocator< long > > *ptr = (std::deque<long,std::allocator< long > > *)0;
    res2 = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< std::deque< long > >::value_type const &","push", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< std::deque< long > >::value_type const &","push", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = std_vector_Sl_std_deque_Sl_si_taxi_BWTime_Sg__Sg__push(arg1,(std::deque< long,std::allocator< long > > const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = swig::from(static_cast< std::deque<long,std::allocator< long > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDequeVector.reject

  call-seq:
    reject -> BWTimeDequeVector

Iterate thru each element in the BWTimeDequeVector and reject those that fail a condition returning a new BWTimeDequeVector.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_BWTimeDequeVector_reject(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWTime > > *arg1 = (std::vector< std::deque< si_taxi::BWTime > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWTime > > *","reject", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWTime > > * >(argp1);
  {
    try {
      result = (std::vector< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > > *)std_vector_Sl_std_deque_Sl_si_taxi_BWTime_Sg__Sg__reject(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDequeVector.at

  call-seq:
    at(i) -> VALUE

Return element at a certain index.
*/
SWIGINTERN VALUE
_wrap_BWTimeDequeVector_at(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWTime > > *arg1 = (std::vector< std::deque< si_taxi::BWTime > > *) 0 ;
  std::vector< std::deque< long > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWTime > > const *","at", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWTime > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< std::deque< long > >::difference_type","at", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< std::deque< long > >::difference_type >(val2);
  {
    try {
      result = (VALUE)std_vector_Sl_std_deque_Sl_si_taxi_BWTime_Sg__Sg__at((std::vector< std::deque< long > > const *)arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDequeVector.[]

  call-seq:
    [](i, j) -> VALUE
    [](i) -> VALUE
    [](i) -> VALUE

Element accessor/slicing.
*/
SWIGINTERN VALUE
_wrap_BWTimeDequeVector___getitem____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWTime > > *arg1 = (std::vector< std::deque< si_taxi::BWTime > > *) 0 ;
  std::vector< std::deque< long > >::difference_type arg2 ;
  std::vector< std::deque< long > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWTime > > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWTime > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< std::deque< long > >::difference_type","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< std::deque< long > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< std::deque< long > >::difference_type","__getitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< std::deque< long > >::difference_type >(val3);
  {
    try {
      result = (VALUE)std_vector_Sl_std_deque_Sl_si_taxi_BWTime_Sg__Sg____getitem____SWIG_0((std::vector< std::deque< long > > const *)arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWTimeDequeVector___getitem____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWTime > > *arg1 = (std::vector< std::deque< si_taxi::BWTime > > *) 0 ;
  std::vector< std::deque< long > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWTime > > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWTime > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< std::deque< long > >::difference_type","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< std::deque< long > >::difference_type >(val2);
  {
    try {
      result = (VALUE)std_vector_Sl_std_deque_Sl_si_taxi_BWTime_Sg__Sg____getitem____SWIG_1((std::vector< std::deque< long > > const *)arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWTimeDequeVector___getitem____SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWTime > > *arg1 = (std::vector< std::deque< si_taxi::BWTime > > *) 0 ;
  VALUE arg2 = (VALUE) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWTime > > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWTime > > * >(argp1);
  arg2 = argv[0];
  {
    try {
      result = (VALUE)std_vector_Sl_std_deque_Sl_si_taxi_BWTime_Sg__Sg____getitem____SWIG_2((std::vector< std::deque< long > > const *)arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_BWTimeDequeVector___getitem__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BWTimeDequeVector___getitem____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_BWTimeDequeVector___getitem____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BWTimeDequeVector___getitem____SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "__getitem__", 
    "    VALUE __getitem__(std::vector< std::deque< long > >::difference_type i, std::vector< std::deque< long > >::difference_type j)\n"
    "    VALUE __getitem__(std::vector< std::deque< long > >::difference_type i)\n"
    "    VALUE __getitem__(VALUE i)\n");
  
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDequeVector.[]=

  call-seq:
    []=(i, x) -> VALUE
    []=(i, j, v) -> VALUE

Element setter/slicing.
*/
SWIGINTERN VALUE
_wrap_BWTimeDequeVector___setitem____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWTime > > *arg1 = (std::vector< std::deque< si_taxi::BWTime > > *) 0 ;
  std::vector< std::deque< long > >::difference_type arg2 ;
  std::vector< std::deque< long > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWTime > > *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWTime > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< std::deque< long > >::difference_type","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< std::deque< long > >::difference_type >(val2);
  {
    std::deque<long,std::allocator< long > > *ptr = (std::deque<long,std::allocator< long > > *)0;
    res3 = swig::asptr(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< std::deque< long > >::value_type const &","__setitem__", 3, argv[1] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< std::deque< long > >::value_type const &","__setitem__", 3, argv[1])); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (VALUE)std_vector_Sl_std_deque_Sl_si_taxi_BWTime_Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::deque< long,std::allocator< long > > const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return vresult;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWTimeDequeVector___setitem____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWTime > > *arg1 = (std::vector< std::deque< si_taxi::BWTime > > *) 0 ;
  std::vector< std::deque< long > >::difference_type arg2 ;
  std::vector< std::deque< long > >::difference_type arg3 ;
  std::vector< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWTime > > *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWTime > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< std::deque< long > >::difference_type","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< std::deque< long > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< std::deque< long > >::difference_type","__setitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< std::deque< long > >::difference_type >(val3);
  {
    std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > > *ptr = (std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > > *)0;
    res4 = swig::asptr(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > > const &","__setitem__", 4, argv[2] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > > const &","__setitem__", 4, argv[2])); 
    }
    arg4 = ptr;
  }
  {
    try {
      try {
        result = (VALUE)std_vector_Sl_std_deque_Sl_si_taxi_BWTime_Sg__Sg____setitem____SWIG_1(arg1,arg2,arg3,(std::vector< std::deque< long,std::allocator< long > >,std::allocator< std::deque< long,std::allocator< long > > > > const &)*arg4);
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return vresult;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
}


SWIGINTERN VALUE _wrap_BWTimeDequeVector___setitem__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::deque<long,std::allocator< long > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BWTimeDequeVector___setitem____SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_BWTimeDequeVector___setitem____SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "__setitem__", 
    "    VALUE __setitem__(std::vector< std::deque< long > >::difference_type i, std::vector< std::deque< long > >::value_type const &x)\n"
    "    VALUE __setitem__(std::vector< std::deque< long > >::difference_type i, std::vector< std::deque< long > >::difference_type j, std::vector< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > > const &v)\n");
  
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDequeVector.shift

  call-seq:
    shift -> VALUE

Remove and return element at the beginning of the BWTimeDequeVector.
*/
SWIGINTERN VALUE
_wrap_BWTimeDequeVector_shift(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWTime > > *arg1 = (std::vector< std::deque< si_taxi::BWTime > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWTime > > *","shift", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWTime > > * >(argp1);
  {
    try {
      result = (VALUE)std_vector_Sl_std_deque_Sl_si_taxi_BWTime_Sg__Sg__shift(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDequeVector.insert

  call-seq:
    insert(pos, argc, ?) -> BWTimeDequeVector
    insert(pos, x) -> std::vector<(std::deque<(long)>)>::iterator
    insert(pos, n, x)

Insert one or more new elements in the BWTimeDequeVector.
*/
SWIGINTERN VALUE
_wrap_BWTimeDequeVector_insert__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWTime > > *arg1 = (std::vector< std::deque< si_taxi::BWTime > > *) 0 ;
  std::vector< std::deque< long > >::difference_type arg2 ;
  int arg3 ;
  VALUE *arg4 = (VALUE *) 0 ;
  void *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if (argc < 2) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWTime > > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWTime > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< std::deque< long > >::difference_type","insert", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< std::deque< long > >::difference_type >(val2);
  {
    arg3 = argc - 1;
    arg4 = argv + 1;
  }
  {
    try {
      result = (std::vector< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > > *)std_vector_Sl_std_deque_Sl_si_taxi_BWTime_Sg__Sg__insert__SWIG_0(arg1,arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDequeVector.unshift

  call-seq:
    unshift(argc, ?) -> BWTimeDequeVector

Add one or more elements at the beginning of the BWTimeDequeVector.
*/
SWIGINTERN VALUE
_wrap_BWTimeDequeVector_unshift(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWTime > > *arg1 = (std::vector< std::deque< si_taxi::BWTime > > *) 0 ;
  int arg2 ;
  VALUE *arg3 = (VALUE *) 0 ;
  void *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if (argc < 1) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWTime > > *","unshift", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWTime > > * >(argp1);
  {
    arg2 = argc;
    arg3 = argv;
  }
  {
    try {
      result = (std::vector< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > > *)std_vector_Sl_std_deque_Sl_si_taxi_BWTime_Sg__Sg__unshift(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_BWTimeDequeVector__SWIG_0(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "SiTaxi::BWTimeDequeVector";
  std::vector< std::deque< si_taxi::BWTime > > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (std::vector< std::deque< si_taxi::BWTime > > *)new std::vector< std::deque< si_taxi::BWTime > >();
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_BWTimeDequeVector__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  const char *classname SWIGUNUSED = "SiTaxi::BWTimeDequeVector";
  std::vector< std::deque< si_taxi::BWTime > > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > > *ptr = (std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > > *)0;
    res1 = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > const &","std::vector<(std::deque<(si_taxi::BWTime)>)>", 1, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > const &","std::vector<(std::deque<(si_taxi::BWTime)>)>", 1, argv[0])); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< std::deque< si_taxi::BWTime > > *)new std::vector< std::deque< si_taxi::BWTime > >((std::vector< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > const &)*arg1);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return self;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDequeVector.empty?

  call-seq:
    empty? -> bool

Check if the BWTimeDequeVector is empty or not.
*/
SWIGINTERN VALUE
_wrap_BWTimeDequeVector_emptyq___(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWTime > > *arg1 = (std::vector< std::deque< si_taxi::BWTime > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWTime > > const *","empty", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWTime > > * >(argp1);
  {
    try {
      result = (bool)((std::vector< std::deque< si_taxi::BWTime > > const *)arg1)->empty();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDequeVector.size

  call-seq:
    size -> std::vector<(std::deque<(long)>)>::size_type

Size or Length of the BWTimeDequeVector.
*/
SWIGINTERN VALUE
_wrap_BWTimeDequeVector_size(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWTime > > *arg1 = (std::vector< std::deque< si_taxi::BWTime > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::deque< long > >::size_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWTime > > const *","size", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWTime > > * >(argp1);
  {
    try {
      result = ((std::vector< std::deque< si_taxi::BWTime > > const *)arg1)->size();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDequeVector.clear

  call-seq:
    clear

Clear BWTimeDequeVector contents.
*/
SWIGINTERN VALUE
_wrap_BWTimeDequeVector_clear(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWTime > > *arg1 = (std::vector< std::deque< si_taxi::BWTime > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWTime > > *","clear", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWTime > > * >(argp1);
  {
    try {
      (arg1)->clear();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWTimeDequeVector_swap(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWTime > > *arg1 = (std::vector< std::deque< si_taxi::BWTime > > *) 0 ;
  std::vector< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWTime > > *","swap", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWTime > > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > &","swap", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > &","swap", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWTimeDequeVector_get_allocator(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWTime > > *arg1 = (std::vector< std::deque< si_taxi::BWTime > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::allocator< std::deque< long,std::allocator< long > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWTime > > const *","get_allocator", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWTime > > * >(argp1);
  {
    try {
      result = ((std::vector< std::deque< si_taxi::BWTime > > const *)arg1)->get_allocator();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new std::vector< std::deque< long > >::allocator_type(static_cast< const std::vector< std::deque< long > >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDequeVector.begin

  call-seq:
    begin -> std::vector<(std::deque<(long)>)>::iterator

Return an iterator to the beginning of the BWTimeDequeVector.
*/
SWIGINTERN VALUE
_wrap_BWTimeDequeVector_begin(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWTime > > *arg1 = (std::vector< std::deque< si_taxi::BWTime > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< std::deque< long > >::iterator > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWTime > > *","begin", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWTime > > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< std::deque< long > >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDequeVector.end

  call-seq:
    end -> std::vector<(std::deque<(long)>)>::iterator

Return an iterator to past the end of the BWTimeDequeVector.
*/
SWIGINTERN VALUE
_wrap_BWTimeDequeVector_end(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWTime > > *arg1 = (std::vector< std::deque< si_taxi::BWTime > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< std::deque< long > >::iterator > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWTime > > *","end", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWTime > > * >(argp1);
  {
    try {
      result = (arg1)->end();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< std::deque< long > >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDequeVector.rbegin

  call-seq:
    rbegin -> std::vector<(std::deque<(long)>)>::reverse_iterator

Return a reverse iterator to the beginning (the end) of the BWTimeDequeVector.
*/
SWIGINTERN VALUE
_wrap_BWTimeDequeVector_rbegin(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWTime > > *arg1 = (std::vector< std::deque< si_taxi::BWTime > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< std::deque< long > >::reverse_iterator > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWTime > > *","rbegin", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWTime > > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< std::deque< long > >::reverse_iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDequeVector.rend

  call-seq:
    rend -> std::vector<(std::deque<(long)>)>::reverse_iterator

Return a reverse iterator to past the end (past the beginning) of the BWTimeDequeVector.
*/
SWIGINTERN VALUE
_wrap_BWTimeDequeVector_rend(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWTime > > *arg1 = (std::vector< std::deque< si_taxi::BWTime > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< std::deque< long > >::reverse_iterator > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWTime > > *","rend", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWTime > > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< std::deque< long > >::reverse_iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_BWTimeDequeVector__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< long > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  const char *classname SWIGUNUSED = "SiTaxi::BWTimeDequeVector";
  std::vector< std::deque< si_taxi::BWTime > > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "std::vector< std::deque< long > >::size_type","std::vector<(std::deque<(si_taxi::BWTime)>)>", 1, argv[0] ));
  } 
  arg1 = static_cast< std::vector< std::deque< long > >::size_type >(val1);
  {
    try {
      result = (std::vector< std::deque< si_taxi::BWTime > > *)new std::vector< std::deque< si_taxi::BWTime > >(arg1);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDequeVector.resize

  call-seq:
    resize(new_size)
    resize(new_size, x)

Resize the size of the BWTimeDequeVector.
*/
SWIGINTERN VALUE
_wrap_BWTimeDequeVector_resize__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWTime > > *arg1 = (std::vector< std::deque< si_taxi::BWTime > > *) 0 ;
  std::vector< std::deque< long > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWTime > > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWTime > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< std::deque< long > >::size_type","resize", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< std::deque< long > >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDequeVector.erase

  call-seq:
    erase(pos) -> std::vector<(std::deque<(long)>)>::iterator
    erase(first, last) -> std::vector<(std::deque<(long)>)>::iterator

Delete a portion of the BWTimeDequeVector.
*/
SWIGINTERN VALUE
_wrap_BWTimeDequeVector_erase__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWTime > > *arg1 = (std::vector< std::deque< si_taxi::BWTime > > *) 0 ;
  SwigValueWrapper< std::vector< std::deque< long > >::iterator > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  SwigValueWrapper< std::vector< std::deque< long > >::iterator > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWTime > > *","erase", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWTime > > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< std::deque< long > >::iterator","erase", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< std::deque< long > >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< std::deque< long > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< std::deque< long > >::iterator","erase", 2, argv[0] ));
    }
  }
  {
    try {
      result = (arg1)->erase(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< std::deque< long > >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWTimeDequeVector_erase__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWTime > > *arg1 = (std::vector< std::deque< si_taxi::BWTime > > *) 0 ;
  SwigValueWrapper< std::vector< std::deque< long > >::iterator > arg2 ;
  SwigValueWrapper< std::vector< std::deque< long > >::iterator > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  swig::Iterator *iter3 = 0 ;
  int res3 ;
  SwigValueWrapper< std::vector< std::deque< long > >::iterator > result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWTime > > *","erase", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWTime > > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< std::deque< long > >::iterator","erase", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< std::deque< long > >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< std::deque< long > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< std::deque< long > >::iterator","erase", 2, argv[0] ));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter3), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< std::deque< long > >::iterator","erase", 3, argv[1] ));
  } else {
    swig::Iterator_T<std::vector< std::deque< long > >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< std::deque< long > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< std::deque< long > >::iterator","erase", 3, argv[1] ));
    }
  }
  {
    try {
      result = (arg1)->erase(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< std::deque< long > >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_BWTimeDequeVector_erase(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< std::deque< long > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_BWTimeDequeVector_erase__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< std::deque< long > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::ConstIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), 
          swig::Iterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< std::deque< long > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_BWTimeDequeVector_erase__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "BWTimeDequeVector.erase", 
    "    std::vector< std::deque< long > >::iterator BWTimeDequeVector.erase(std::vector< std::deque< long > >::iterator pos)\n"
    "    std::vector< std::deque< long > >::iterator BWTimeDequeVector.erase(std::vector< std::deque< long > >::iterator first, std::vector< std::deque< long > >::iterator last)\n");
  
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_BWTimeDequeVector_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_BWTimeDequeVector_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_BWTimeDequeVector__SWIG_3(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< long > >::size_type arg1 ;
  std::vector< std::deque< long > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  const char *classname SWIGUNUSED = "SiTaxi::BWTimeDequeVector";
  std::vector< std::deque< si_taxi::BWTime > > *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "std::vector< std::deque< long > >::size_type","std::vector<(std::deque<(si_taxi::BWTime)>)>", 1, argv[0] ));
  } 
  arg1 = static_cast< std::vector< std::deque< long > >::size_type >(val1);
  {
    std::deque<long,std::allocator< long > > *ptr = (std::deque<long,std::allocator< long > > *)0;
    res2 = swig::asptr(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< std::deque< long > >::value_type const &","std::vector<(std::deque<(si_taxi::BWTime)>)>", 2, argv[1] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< std::deque< long > >::value_type const &","std::vector<(std::deque<(si_taxi::BWTime)>)>", 2, argv[1])); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (std::vector< std::deque< si_taxi::BWTime > > *)new std::vector< std::deque< si_taxi::BWTime > >(arg1,(std::vector< std::deque< long > >::value_type const &)*arg2);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return self;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_BWTimeDequeVector(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_BWTimeDequeVector__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_BWTimeDequeVector__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_BWTimeDequeVector__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::deque<long,std::allocator< long > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_BWTimeDequeVector__SWIG_3(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "BWTimeDequeVector.new", 
    "    BWTimeDequeVector.new()\n"
    "    BWTimeDequeVector.new(std::vector< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > const &)\n"
    "    BWTimeDequeVector.new(std::vector< std::deque< long > >::size_type size)\n"
    "    BWTimeDequeVector.new(std::vector< std::deque< long > >::size_type size, std::vector< std::deque< long > >::value_type const &value)\n");
  
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDequeVector.front

  call-seq:
    front -> std::vector<(std::deque<(long)>)>::value_type

Return the first element in BWTimeDequeVector.
*/
SWIGINTERN VALUE
_wrap_BWTimeDequeVector_front(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWTime > > *arg1 = (std::vector< std::deque< si_taxi::BWTime > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::deque< long > >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWTime > > const *","front", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWTime > > * >(argp1);
  {
    try {
      result = (std::vector< std::deque< long > >::value_type *) &((std::vector< std::deque< si_taxi::BWTime > > const *)arg1)->front();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = swig::from(static_cast< std::deque<long,std::allocator< long > > >(*result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDequeVector.back

  call-seq:
    back -> std::vector<(std::deque<(long)>)>::value_type

Return the last element in BWTimeDequeVector.
*/
SWIGINTERN VALUE
_wrap_BWTimeDequeVector_back(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWTime > > *arg1 = (std::vector< std::deque< si_taxi::BWTime > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::deque< long > >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWTime > > const *","back", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWTime > > * >(argp1);
  {
    try {
      result = (std::vector< std::deque< long > >::value_type *) &((std::vector< std::deque< si_taxi::BWTime > > const *)arg1)->back();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = swig::from(static_cast< std::deque<long,std::allocator< long > > >(*result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDequeVector.assign

  call-seq:
    assign(n, x)

Assign a new BWTimeDequeVector or portion of it.
*/
SWIGINTERN VALUE
_wrap_BWTimeDequeVector_assign(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWTime > > *arg1 = (std::vector< std::deque< si_taxi::BWTime > > *) 0 ;
  std::vector< std::deque< long > >::size_type arg2 ;
  std::vector< std::deque< long > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWTime > > *","assign", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWTime > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< std::deque< long > >::size_type","assign", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< std::deque< long > >::size_type >(val2);
  {
    std::deque<long,std::allocator< long > > *ptr = (std::deque<long,std::allocator< long > > *)0;
    res3 = swig::asptr(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< std::deque< long > >::value_type const &","assign", 3, argv[1] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< std::deque< long > >::value_type const &","assign", 3, argv[1])); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->assign(arg2,(std::vector< std::deque< long > >::value_type const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDequeVector.resize

  call-seq:
    resize(new_size)
    resize(new_size, x)

Resize the size of the BWTimeDequeVector.
*/
SWIGINTERN VALUE
_wrap_BWTimeDequeVector_resize__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWTime > > *arg1 = (std::vector< std::deque< si_taxi::BWTime > > *) 0 ;
  std::vector< std::deque< long > >::size_type arg2 ;
  std::vector< std::deque< long > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWTime > > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWTime > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< std::deque< long > >::size_type","resize", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< std::deque< long > >::size_type >(val2);
  {
    std::deque<long,std::allocator< long > > *ptr = (std::deque<long,std::allocator< long > > *)0;
    res3 = swig::asptr(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< std::deque< long > >::value_type const &","resize", 3, argv[1] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< std::deque< long > >::value_type const &","resize", 3, argv[1])); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->resize(arg2,(std::vector< std::deque< long > >::value_type const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE _wrap_BWTimeDequeVector_resize(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BWTimeDequeVector_resize__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::deque<long,std::allocator< long > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BWTimeDequeVector_resize__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "BWTimeDequeVector.resize", 
    "    void BWTimeDequeVector.resize(std::vector< std::deque< long > >::size_type new_size)\n"
    "    void BWTimeDequeVector.resize(std::vector< std::deque< long > >::size_type new_size, std::vector< std::deque< long > >::value_type const &x)\n");
  
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDequeVector.insert

  call-seq:
    insert(pos, argc, ?) -> BWTimeDequeVector
    insert(pos, x) -> std::vector<(std::deque<(long)>)>::iterator
    insert(pos, n, x)

Insert one or more new elements in the BWTimeDequeVector.
*/
SWIGINTERN VALUE
_wrap_BWTimeDequeVector_insert__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWTime > > *arg1 = (std::vector< std::deque< si_taxi::BWTime > > *) 0 ;
  SwigValueWrapper< std::vector< std::deque< long > >::iterator > arg2 ;
  std::vector< std::deque< long > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  SwigValueWrapper< std::vector< std::deque< long > >::iterator > result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWTime > > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWTime > > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< std::deque< long > >::iterator","insert", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< std::deque< long > >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< std::deque< long > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< std::deque< long > >::iterator","insert", 2, argv[0] ));
    }
  }
  {
    std::deque<long,std::allocator< long > > *ptr = (std::deque<long,std::allocator< long > > *)0;
    res3 = swig::asptr(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< std::deque< long > >::value_type const &","insert", 3, argv[1] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< std::deque< long > >::value_type const &","insert", 3, argv[1])); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (arg1)->insert(arg2,(std::vector< std::deque< long > >::value_type const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< std::deque< long > >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return vresult;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWTimeDequeVector_insert__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWTime > > *arg1 = (std::vector< std::deque< si_taxi::BWTime > > *) 0 ;
  SwigValueWrapper< std::vector< std::deque< long > >::iterator > arg2 ;
  std::vector< std::deque< long > >::size_type arg3 ;
  std::vector< std::deque< long > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWTime > > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWTime > > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< std::deque< long > >::iterator","insert", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< std::deque< long > >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< std::deque< long > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< std::deque< long > >::iterator","insert", 2, argv[0] ));
    }
  }
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< std::deque< long > >::size_type","insert", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< std::deque< long > >::size_type >(val3);
  {
    std::deque<long,std::allocator< long > > *ptr = (std::deque<long,std::allocator< long > > *)0;
    res4 = swig::asptr(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "std::vector< std::deque< long > >::value_type const &","insert", 4, argv[2] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< std::deque< long > >::value_type const &","insert", 4, argv[2])); 
    }
    arg4 = ptr;
  }
  {
    try {
      (arg1)->insert(arg2,arg3,(std::vector< std::deque< long > >::value_type const &)*arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
}


SWIGINTERN VALUE _wrap_BWTimeDequeVector_insert(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< std::deque< long > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = swig::asptr(argv[2], (std::deque<long,std::allocator< long > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BWTimeDequeVector_insert__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_BWTimeDequeVector_insert__SWIG_0(nargs, args, self);
          }
          return _wrap_BWTimeDequeVector_insert__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< std::deque< long > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::deque<long,std::allocator< long > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_BWTimeDequeVector_insert__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "insert", 
    "    void insert(std::vector< std::deque< long > >::difference_type pos, int argc, VALUE *argv, ...)\n"
    "    void insert(std::vector< std::deque< long > >::iterator pos, std::vector< std::deque< long > >::value_type const &x)\n"
    "    void insert(std::vector< std::deque< long > >::iterator pos, std::vector< std::deque< long > >::size_type n, std::vector< std::deque< long > >::value_type const &x)\n");
  
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDequeVector.reserve

  call-seq:
    reserve(n)

Reserve memory in the BWTimeDequeVector for a number of elements.
*/
SWIGINTERN VALUE
_wrap_BWTimeDequeVector_reserve(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWTime > > *arg1 = (std::vector< std::deque< si_taxi::BWTime > > *) 0 ;
  std::vector< std::deque< long > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWTime > > *","reserve", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWTime > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< std::deque< long > >::size_type","reserve", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< std::deque< long > >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWTimeDequeVector.capacity

  call-seq:
    capacity -> std::vector<(std::deque<(long)>)>::size_type

Reserved capacity of the BWTimeDequeVector.
*/
SWIGINTERN VALUE
_wrap_BWTimeDequeVector_capacity(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWTime > > *arg1 = (std::vector< std::deque< si_taxi::BWTime > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::deque< long > >::size_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWTime > > const *","capacity", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWTime > > * >(argp1);
  {
    try {
      result = ((std::vector< std::deque< si_taxi::BWTime > > const *)arg1)->capacity();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_std_vector_Sl_std_deque_Sl_si_taxi_BWTime_Sg__Sg_(std::vector< std::deque< si_taxi::BWTime > > *arg1) {
    delete arg1;
}

swig_class SwigClassBWPaxDequeVector;


/*
  Document-method: SiTaxi::BWPaxDequeVector.dup

  call-seq:
    dup -> BWPaxDequeVector

Create a duplicate of the class and unfreeze it if needed.
*/
SWIGINTERN VALUE
_wrap_BWPaxDequeVector_dup(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWPax > > *arg1 = (std::vector< std::deque< si_taxi::BWPax > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > > *","dup", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWPax > > * >(argp1);
  {
    try {
      result = (std::vector< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > > *)std_vector_Sl_std_deque_Sl_si_taxi_BWPax_Sg__Sg__dup(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDequeVector.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_BWPaxDequeVector_inspect(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWPax > > *arg1 = (std::vector< std::deque< si_taxi::BWPax > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > > *","inspect", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWPax > > * >(argp1);
  {
    try {
      result = (VALUE)std_vector_Sl_std_deque_Sl_si_taxi_BWPax_Sg__Sg__inspect(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDequeVector.to_a

  call-seq:
    to_a -> VALUE

Convert BWPaxDequeVector to an Array.
*/
SWIGINTERN VALUE
_wrap_BWPaxDequeVector_to_a(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWPax > > *arg1 = (std::vector< std::deque< si_taxi::BWPax > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > > *","to_a", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWPax > > * >(argp1);
  {
    try {
      result = (VALUE)std_vector_Sl_std_deque_Sl_si_taxi_BWPax_Sg__Sg__to_a(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDequeVector.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_BWPaxDequeVector_to_s(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWPax > > *arg1 = (std::vector< std::deque< si_taxi::BWPax > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > > *","to_s", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWPax > > * >(argp1);
  {
    try {
      result = (VALUE)std_vector_Sl_std_deque_Sl_si_taxi_BWPax_Sg__Sg__to_s(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDequeVector.slice

  call-seq:
    slice(i, j) -> VALUE

Return a slice (portion of) the BWPaxDequeVector.
*/
SWIGINTERN VALUE
_wrap_BWPaxDequeVector_slice(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWPax > > *arg1 = (std::vector< std::deque< si_taxi::BWPax > > *) 0 ;
  std::vector< std::deque< si_taxi::BWPax > >::difference_type arg2 ;
  std::vector< std::deque< si_taxi::BWPax > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > > *","slice", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWPax > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > >::difference_type","slice", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< std::deque< si_taxi::BWPax > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > >::difference_type","slice", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< std::deque< si_taxi::BWPax > >::difference_type >(val3);
  {
    try {
      result = (VALUE)std_vector_Sl_std_deque_Sl_si_taxi_BWPax_Sg__Sg__slice(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDequeVector.each

  call-seq:
    each -> BWPaxDequeVector

Iterate thru each element in the BWPaxDequeVector.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_BWPaxDequeVector_each(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWPax > > *arg1 = (std::vector< std::deque< si_taxi::BWPax > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > > *","each", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWPax > > * >(argp1);
  {
    try {
      result = (std::vector< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > > *)std_vector_Sl_std_deque_Sl_si_taxi_BWPax_Sg__Sg__each(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDequeVector.select

  call-seq:
    select -> BWPaxDequeVector

Iterate thru each element in the BWPaxDequeVector and select those that match a condition.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_BWPaxDequeVector_select(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWPax > > *arg1 = (std::vector< std::deque< si_taxi::BWPax > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > > *","select", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWPax > > * >(argp1);
  {
    try {
      result = (std::vector< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > > *)std_vector_Sl_std_deque_Sl_si_taxi_BWPax_Sg__Sg__select(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDequeVector.reject!

  call-seq:
    reject! -> BWPaxDequeVector

Iterate thru each element in the BWPaxDequeVector and reject those that fail a condition.  A block must be provided.  BWPaxDequeVector is modified in place.
*/
SWIGINTERN VALUE
_wrap_BWPaxDequeVector_rejectN___(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWPax > > *arg1 = (std::vector< std::deque< si_taxi::BWPax > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > > *","reject_bang", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWPax > > * >(argp1);
  {
    try {
      result = (std::vector< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > > *)std_vector_Sl_std_deque_Sl_si_taxi_BWPax_Sg__Sg__reject_bang(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDequeVector.delete_at

  call-seq:
    delete_at(i) -> VALUE

Delete an element at a certain index.
*/
SWIGINTERN VALUE
_wrap_BWPaxDequeVector_delete_at(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWPax > > *arg1 = (std::vector< std::deque< si_taxi::BWPax > > *) 0 ;
  std::vector< std::deque< si_taxi::BWPax > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > > *","delete_at", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWPax > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > >::difference_type","delete_at", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< std::deque< si_taxi::BWPax > >::difference_type >(val2);
  {
    try {
      result = (VALUE)std_vector_Sl_std_deque_Sl_si_taxi_BWPax_Sg__Sg__delete_at(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWPaxDequeVector___delete2__(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWPax > > *arg1 = (std::vector< std::deque< si_taxi::BWPax > > *) 0 ;
  std::vector< std::deque< si_taxi::BWPax > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > > *","__delete2__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWPax > > * >(argp1);
  {
    std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *ptr = (std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *)0;
    res2 = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > >::value_type const &","__delete2__", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< std::deque< si_taxi::BWPax > >::value_type const &","__delete2__", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (VALUE)std_vector_Sl_std_deque_Sl_si_taxi_BWPax_Sg__Sg____delete2__(arg1,(std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDequeVector.pop

  call-seq:
    pop -> VALUE

Remove and return element at the end of the BWPaxDequeVector.
*/
SWIGINTERN VALUE
_wrap_BWPaxDequeVector_pop(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWPax > > *arg1 = (std::vector< std::deque< si_taxi::BWPax > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > > *","pop", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWPax > > * >(argp1);
  {
    try {
      result = (VALUE)std_vector_Sl_std_deque_Sl_si_taxi_BWPax_Sg__Sg__pop(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDequeVector.push

  call-seq:
    push(e) -> value_type

Add an element at the end of the BWPaxDequeVector.
*/
SWIGINTERN VALUE
_wrap_BWPaxDequeVector_push(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWPax > > *arg1 = (std::vector< std::deque< si_taxi::BWPax > > *) 0 ;
  std::vector< std::deque< si_taxi::BWPax > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::vector< std::deque< si_taxi::BWPax > >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > > *","push", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWPax > > * >(argp1);
  {
    std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *ptr = (std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *)0;
    res2 = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > >::value_type const &","push", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< std::deque< si_taxi::BWPax > >::value_type const &","push", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = std_vector_Sl_std_deque_Sl_si_taxi_BWPax_Sg__Sg__push(arg1,(std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = swig::from(static_cast< std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDequeVector.reject

  call-seq:
    reject -> BWPaxDequeVector

Iterate thru each element in the BWPaxDequeVector and reject those that fail a condition returning a new BWPaxDequeVector.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_BWPaxDequeVector_reject(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWPax > > *arg1 = (std::vector< std::deque< si_taxi::BWPax > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > > *","reject", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWPax > > * >(argp1);
  {
    try {
      result = (std::vector< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > > *)std_vector_Sl_std_deque_Sl_si_taxi_BWPax_Sg__Sg__reject(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDequeVector.at

  call-seq:
    at(i) -> VALUE

Return element at a certain index.
*/
SWIGINTERN VALUE
_wrap_BWPaxDequeVector_at(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWPax > > *arg1 = (std::vector< std::deque< si_taxi::BWPax > > *) 0 ;
  std::vector< std::deque< si_taxi::BWPax > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > > const *","at", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWPax > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > >::difference_type","at", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< std::deque< si_taxi::BWPax > >::difference_type >(val2);
  {
    try {
      result = (VALUE)std_vector_Sl_std_deque_Sl_si_taxi_BWPax_Sg__Sg__at((std::vector< std::deque< si_taxi::BWPax > > const *)arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDequeVector.[]

  call-seq:
    [](i, j) -> VALUE
    [](i) -> VALUE
    [](i) -> VALUE

Element accessor/slicing.
*/
SWIGINTERN VALUE
_wrap_BWPaxDequeVector___getitem____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWPax > > *arg1 = (std::vector< std::deque< si_taxi::BWPax > > *) 0 ;
  std::vector< std::deque< si_taxi::BWPax > >::difference_type arg2 ;
  std::vector< std::deque< si_taxi::BWPax > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWPax > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > >::difference_type","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< std::deque< si_taxi::BWPax > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > >::difference_type","__getitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< std::deque< si_taxi::BWPax > >::difference_type >(val3);
  {
    try {
      result = (VALUE)std_vector_Sl_std_deque_Sl_si_taxi_BWPax_Sg__Sg____getitem____SWIG_0((std::vector< std::deque< si_taxi::BWPax > > const *)arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWPaxDequeVector___getitem____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWPax > > *arg1 = (std::vector< std::deque< si_taxi::BWPax > > *) 0 ;
  std::vector< std::deque< si_taxi::BWPax > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWPax > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > >::difference_type","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< std::deque< si_taxi::BWPax > >::difference_type >(val2);
  {
    try {
      result = (VALUE)std_vector_Sl_std_deque_Sl_si_taxi_BWPax_Sg__Sg____getitem____SWIG_1((std::vector< std::deque< si_taxi::BWPax > > const *)arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWPaxDequeVector___getitem____SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWPax > > *arg1 = (std::vector< std::deque< si_taxi::BWPax > > *) 0 ;
  VALUE arg2 = (VALUE) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWPax > > * >(argp1);
  arg2 = argv[0];
  {
    try {
      result = (VALUE)std_vector_Sl_std_deque_Sl_si_taxi_BWPax_Sg__Sg____getitem____SWIG_2((std::vector< std::deque< si_taxi::BWPax > > const *)arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_BWPaxDequeVector___getitem__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BWPaxDequeVector___getitem____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_BWPaxDequeVector___getitem____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BWPaxDequeVector___getitem____SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "__getitem__", 
    "    VALUE __getitem__(std::vector< std::deque< si_taxi::BWPax > >::difference_type i, std::vector< std::deque< si_taxi::BWPax > >::difference_type j)\n"
    "    VALUE __getitem__(std::vector< std::deque< si_taxi::BWPax > >::difference_type i)\n"
    "    VALUE __getitem__(VALUE i)\n");
  
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDequeVector.[]=

  call-seq:
    []=(i, x) -> VALUE
    []=(i, j, v) -> VALUE

Element setter/slicing.
*/
SWIGINTERN VALUE
_wrap_BWPaxDequeVector___setitem____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWPax > > *arg1 = (std::vector< std::deque< si_taxi::BWPax > > *) 0 ;
  std::vector< std::deque< si_taxi::BWPax > >::difference_type arg2 ;
  std::vector< std::deque< si_taxi::BWPax > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > > *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWPax > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > >::difference_type","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< std::deque< si_taxi::BWPax > >::difference_type >(val2);
  {
    std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *ptr = (std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *)0;
    res3 = swig::asptr(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > >::value_type const &","__setitem__", 3, argv[1] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< std::deque< si_taxi::BWPax > >::value_type const &","__setitem__", 3, argv[1])); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (VALUE)std_vector_Sl_std_deque_Sl_si_taxi_BWPax_Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return vresult;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWPaxDequeVector___setitem____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWPax > > *arg1 = (std::vector< std::deque< si_taxi::BWPax > > *) 0 ;
  std::vector< std::deque< si_taxi::BWPax > >::difference_type arg2 ;
  std::vector< std::deque< si_taxi::BWPax > >::difference_type arg3 ;
  std::vector< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > > *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWPax > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > >::difference_type","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< std::deque< si_taxi::BWPax > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > >::difference_type","__setitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< std::deque< si_taxi::BWPax > >::difference_type >(val3);
  {
    std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > > *ptr = (std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > > *)0;
    res4 = swig::asptr(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > > const &","__setitem__", 4, argv[2] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > > const &","__setitem__", 4, argv[2])); 
    }
    arg4 = ptr;
  }
  {
    try {
      try {
        result = (VALUE)std_vector_Sl_std_deque_Sl_si_taxi_BWPax_Sg__Sg____setitem____SWIG_1(arg1,arg2,arg3,(std::vector< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > > const &)*arg4);
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return vresult;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
}


SWIGINTERN VALUE _wrap_BWPaxDequeVector___setitem__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BWPaxDequeVector___setitem____SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_BWPaxDequeVector___setitem____SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "__setitem__", 
    "    VALUE __setitem__(std::vector< std::deque< si_taxi::BWPax > >::difference_type i, std::vector< std::deque< si_taxi::BWPax > >::value_type const &x)\n"
    "    VALUE __setitem__(std::vector< std::deque< si_taxi::BWPax > >::difference_type i, std::vector< std::deque< si_taxi::BWPax > >::difference_type j, std::vector< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > > const &v)\n");
  
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDequeVector.shift

  call-seq:
    shift -> VALUE

Remove and return element at the beginning of the BWPaxDequeVector.
*/
SWIGINTERN VALUE
_wrap_BWPaxDequeVector_shift(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWPax > > *arg1 = (std::vector< std::deque< si_taxi::BWPax > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > > *","shift", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWPax > > * >(argp1);
  {
    try {
      result = (VALUE)std_vector_Sl_std_deque_Sl_si_taxi_BWPax_Sg__Sg__shift(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDequeVector.insert

  call-seq:
    insert(pos, argc, ?) -> BWPaxDequeVector
    insert(pos, x) -> iterator
    insert(pos, n, x)

Insert one or more new elements in the BWPaxDequeVector.
*/
SWIGINTERN VALUE
_wrap_BWPaxDequeVector_insert__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWPax > > *arg1 = (std::vector< std::deque< si_taxi::BWPax > > *) 0 ;
  std::vector< std::deque< si_taxi::BWPax > >::difference_type arg2 ;
  int arg3 ;
  VALUE *arg4 = (VALUE *) 0 ;
  void *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if (argc < 2) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWPax > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > >::difference_type","insert", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< std::deque< si_taxi::BWPax > >::difference_type >(val2);
  {
    arg3 = argc - 1;
    arg4 = argv + 1;
  }
  {
    try {
      result = (std::vector< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > > *)std_vector_Sl_std_deque_Sl_si_taxi_BWPax_Sg__Sg__insert__SWIG_0(arg1,arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDequeVector.unshift

  call-seq:
    unshift(argc, ?) -> BWPaxDequeVector

Add one or more elements at the beginning of the BWPaxDequeVector.
*/
SWIGINTERN VALUE
_wrap_BWPaxDequeVector_unshift(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWPax > > *arg1 = (std::vector< std::deque< si_taxi::BWPax > > *) 0 ;
  int arg2 ;
  VALUE *arg3 = (VALUE *) 0 ;
  void *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if (argc < 1) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > > *","unshift", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWPax > > * >(argp1);
  {
    arg2 = argc;
    arg3 = argv;
  }
  {
    try {
      result = (std::vector< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > > *)std_vector_Sl_std_deque_Sl_si_taxi_BWPax_Sg__Sg__unshift(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_BWPaxDequeVector__SWIG_0(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "SiTaxi::BWPaxDequeVector";
  std::vector< std::deque< si_taxi::BWPax > > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (std::vector< std::deque< si_taxi::BWPax > > *)new std::vector< std::deque< si_taxi::BWPax > >();
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_BWPaxDequeVector__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  const char *classname SWIGUNUSED = "SiTaxi::BWPaxDequeVector";
  std::vector< std::deque< si_taxi::BWPax > > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > > *ptr = (std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > > *)0;
    res1 = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > const &","std::vector<(std::deque<(si_taxi::BWPax)>)>", 1, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > const &","std::vector<(std::deque<(si_taxi::BWPax)>)>", 1, argv[0])); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< std::deque< si_taxi::BWPax > > *)new std::vector< std::deque< si_taxi::BWPax > >((std::vector< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > const &)*arg1);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return self;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDequeVector.empty?

  call-seq:
    empty? -> bool

Check if the BWPaxDequeVector is empty or not.
*/
SWIGINTERN VALUE
_wrap_BWPaxDequeVector_emptyq___(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWPax > > *arg1 = (std::vector< std::deque< si_taxi::BWPax > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > > const *","empty", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWPax > > * >(argp1);
  {
    try {
      result = (bool)((std::vector< std::deque< si_taxi::BWPax > > const *)arg1)->empty();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDequeVector.size

  call-seq:
    size -> size_type

Size or Length of the BWPaxDequeVector.
*/
SWIGINTERN VALUE
_wrap_BWPaxDequeVector_size(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWPax > > *arg1 = (std::vector< std::deque< si_taxi::BWPax > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::deque< si_taxi::BWPax > >::size_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > > const *","size", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWPax > > * >(argp1);
  {
    try {
      result = ((std::vector< std::deque< si_taxi::BWPax > > const *)arg1)->size();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDequeVector.clear

  call-seq:
    clear

Clear BWPaxDequeVector contents.
*/
SWIGINTERN VALUE
_wrap_BWPaxDequeVector_clear(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWPax > > *arg1 = (std::vector< std::deque< si_taxi::BWPax > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > > *","clear", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWPax > > * >(argp1);
  {
    try {
      (arg1)->clear();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWPaxDequeVector_swap(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWPax > > *arg1 = (std::vector< std::deque< si_taxi::BWPax > > *) 0 ;
  std::vector< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > > *","swap", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWPax > > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > &","swap", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > &","swap", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWPaxDequeVector_get_allocator(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWPax > > *arg1 = (std::vector< std::deque< si_taxi::BWPax > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > > const *","get_allocator", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWPax > > * >(argp1);
  {
    try {
      result = ((std::vector< std::deque< si_taxi::BWPax > > const *)arg1)->get_allocator();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new std::vector< std::deque< si_taxi::BWPax > >::allocator_type(static_cast< const std::vector< std::deque< si_taxi::BWPax > >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDequeVector.begin

  call-seq:
    begin -> iterator

Return an iterator to the beginning of the BWPaxDequeVector.
*/
SWIGINTERN VALUE
_wrap_BWPaxDequeVector_begin(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWPax > > *arg1 = (std::vector< std::deque< si_taxi::BWPax > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::deque< si_taxi::BWPax > >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > > *","begin", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWPax > > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< std::deque< si_taxi::BWPax > >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDequeVector.end

  call-seq:
    end -> iterator

Return an iterator to past the end of the BWPaxDequeVector.
*/
SWIGINTERN VALUE
_wrap_BWPaxDequeVector_end(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWPax > > *arg1 = (std::vector< std::deque< si_taxi::BWPax > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::deque< si_taxi::BWPax > >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > > *","end", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWPax > > * >(argp1);
  {
    try {
      result = (arg1)->end();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< std::deque< si_taxi::BWPax > >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDequeVector.rbegin

  call-seq:
    rbegin -> reverse_iterator

Return a reverse iterator to the beginning (the end) of the BWPaxDequeVector.
*/
SWIGINTERN VALUE
_wrap_BWPaxDequeVector_rbegin(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWPax > > *arg1 = (std::vector< std::deque< si_taxi::BWPax > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::deque< si_taxi::BWPax > >::reverse_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > > *","rbegin", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWPax > > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< std::deque< si_taxi::BWPax > >::reverse_iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDequeVector.rend

  call-seq:
    rend -> reverse_iterator

Return a reverse iterator to past the end (past the beginning) of the BWPaxDequeVector.
*/
SWIGINTERN VALUE
_wrap_BWPaxDequeVector_rend(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWPax > > *arg1 = (std::vector< std::deque< si_taxi::BWPax > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::deque< si_taxi::BWPax > >::reverse_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > > *","rend", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWPax > > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< std::deque< si_taxi::BWPax > >::reverse_iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_BWPaxDequeVector__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWPax > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  const char *classname SWIGUNUSED = "SiTaxi::BWPaxDequeVector";
  std::vector< std::deque< si_taxi::BWPax > > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > >::size_type","std::vector<(std::deque<(si_taxi::BWPax)>)>", 1, argv[0] ));
  } 
  arg1 = static_cast< std::vector< std::deque< si_taxi::BWPax > >::size_type >(val1);
  {
    try {
      result = (std::vector< std::deque< si_taxi::BWPax > > *)new std::vector< std::deque< si_taxi::BWPax > >(arg1);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDequeVector.resize

  call-seq:
    resize(new_size)
    resize(new_size, x)

Resize the size of the BWPaxDequeVector.
*/
SWIGINTERN VALUE
_wrap_BWPaxDequeVector_resize__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWPax > > *arg1 = (std::vector< std::deque< si_taxi::BWPax > > *) 0 ;
  std::vector< std::deque< si_taxi::BWPax > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWPax > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > >::size_type","resize", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< std::deque< si_taxi::BWPax > >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDequeVector.erase

  call-seq:
    erase(pos) -> iterator
    erase(first, last) -> iterator

Delete a portion of the BWPaxDequeVector.
*/
SWIGINTERN VALUE
_wrap_BWPaxDequeVector_erase__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWPax > > *arg1 = (std::vector< std::deque< si_taxi::BWPax > > *) 0 ;
  std::vector< std::deque< si_taxi::BWPax > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  std::vector< std::deque< si_taxi::BWPax > >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > > *","erase", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWPax > > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > >::iterator","erase", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< std::deque< si_taxi::BWPax > >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< std::deque< si_taxi::BWPax > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > >::iterator","erase", 2, argv[0] ));
    }
  }
  {
    try {
      result = (arg1)->erase(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< std::deque< si_taxi::BWPax > >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWPaxDequeVector_erase__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWPax > > *arg1 = (std::vector< std::deque< si_taxi::BWPax > > *) 0 ;
  std::vector< std::deque< si_taxi::BWPax > >::iterator arg2 ;
  std::vector< std::deque< si_taxi::BWPax > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  swig::Iterator *iter3 = 0 ;
  int res3 ;
  std::vector< std::deque< si_taxi::BWPax > >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > > *","erase", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWPax > > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > >::iterator","erase", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< std::deque< si_taxi::BWPax > >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< std::deque< si_taxi::BWPax > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > >::iterator","erase", 2, argv[0] ));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter3), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > >::iterator","erase", 3, argv[1] ));
  } else {
    swig::Iterator_T<std::vector< std::deque< si_taxi::BWPax > >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< std::deque< si_taxi::BWPax > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > >::iterator","erase", 3, argv[1] ));
    }
  }
  {
    try {
      result = (arg1)->erase(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< std::deque< si_taxi::BWPax > >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_BWPaxDequeVector_erase(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< std::deque< si_taxi::BWPax > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_BWPaxDequeVector_erase__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< std::deque< si_taxi::BWPax > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::ConstIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), 
          swig::Iterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< std::deque< si_taxi::BWPax > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_BWPaxDequeVector_erase__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "BWPaxDequeVector.erase", 
    "    std::vector< std::deque< si_taxi::BWPax > >::iterator BWPaxDequeVector.erase(std::vector< std::deque< si_taxi::BWPax > >::iterator pos)\n"
    "    std::vector< std::deque< si_taxi::BWPax > >::iterator BWPaxDequeVector.erase(std::vector< std::deque< si_taxi::BWPax > >::iterator first, std::vector< std::deque< si_taxi::BWPax > >::iterator last)\n");
  
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_BWPaxDequeVector_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_BWPaxDequeVector_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_BWPaxDequeVector__SWIG_3(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWPax > >::size_type arg1 ;
  std::vector< std::deque< si_taxi::BWPax > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  const char *classname SWIGUNUSED = "SiTaxi::BWPaxDequeVector";
  std::vector< std::deque< si_taxi::BWPax > > *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > >::size_type","std::vector<(std::deque<(si_taxi::BWPax)>)>", 1, argv[0] ));
  } 
  arg1 = static_cast< std::vector< std::deque< si_taxi::BWPax > >::size_type >(val1);
  {
    std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *ptr = (std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *)0;
    res2 = swig::asptr(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > >::value_type const &","std::vector<(std::deque<(si_taxi::BWPax)>)>", 2, argv[1] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< std::deque< si_taxi::BWPax > >::value_type const &","std::vector<(std::deque<(si_taxi::BWPax)>)>", 2, argv[1])); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (std::vector< std::deque< si_taxi::BWPax > > *)new std::vector< std::deque< si_taxi::BWPax > >(arg1,(std::vector< std::deque< si_taxi::BWPax > >::value_type const &)*arg2);
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return self;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_BWPaxDequeVector(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_BWPaxDequeVector__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_BWPaxDequeVector__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_BWPaxDequeVector__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_BWPaxDequeVector__SWIG_3(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "BWPaxDequeVector.new", 
    "    BWPaxDequeVector.new()\n"
    "    BWPaxDequeVector.new(std::vector< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > const &)\n"
    "    BWPaxDequeVector.new(std::vector< std::deque< si_taxi::BWPax > >::size_type size)\n"
    "    BWPaxDequeVector.new(std::vector< std::deque< si_taxi::BWPax > >::size_type size, std::vector< std::deque< si_taxi::BWPax > >::value_type const &value)\n");
  
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDequeVector.front

  call-seq:
    front -> value_type

Return the first element in BWPaxDequeVector.
*/
SWIGINTERN VALUE
_wrap_BWPaxDequeVector_front(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWPax > > *arg1 = (std::vector< std::deque< si_taxi::BWPax > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::deque< si_taxi::BWPax > >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > > const *","front", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWPax > > * >(argp1);
  {
    try {
      result = (std::vector< std::deque< si_taxi::BWPax > >::value_type *) &((std::vector< std::deque< si_taxi::BWPax > > const *)arg1)->front();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = swig::from(static_cast< std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > > >(*result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDequeVector.back

  call-seq:
    back -> value_type

Return the last element in BWPaxDequeVector.
*/
SWIGINTERN VALUE
_wrap_BWPaxDequeVector_back(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWPax > > *arg1 = (std::vector< std::deque< si_taxi::BWPax > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::deque< si_taxi::BWPax > >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > > const *","back", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWPax > > * >(argp1);
  {
    try {
      result = (std::vector< std::deque< si_taxi::BWPax > >::value_type *) &((std::vector< std::deque< si_taxi::BWPax > > const *)arg1)->back();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = swig::from(static_cast< std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > > >(*result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDequeVector.assign

  call-seq:
    assign(n, x)

Assign a new BWPaxDequeVector or portion of it.
*/
SWIGINTERN VALUE
_wrap_BWPaxDequeVector_assign(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWPax > > *arg1 = (std::vector< std::deque< si_taxi::BWPax > > *) 0 ;
  std::vector< std::deque< si_taxi::BWPax > >::size_type arg2 ;
  std::vector< std::deque< si_taxi::BWPax > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > > *","assign", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWPax > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > >::size_type","assign", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< std::deque< si_taxi::BWPax > >::size_type >(val2);
  {
    std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *ptr = (std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *)0;
    res3 = swig::asptr(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > >::value_type const &","assign", 3, argv[1] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< std::deque< si_taxi::BWPax > >::value_type const &","assign", 3, argv[1])); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->assign(arg2,(std::vector< std::deque< si_taxi::BWPax > >::value_type const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDequeVector.resize

  call-seq:
    resize(new_size)
    resize(new_size, x)

Resize the size of the BWPaxDequeVector.
*/
SWIGINTERN VALUE
_wrap_BWPaxDequeVector_resize__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWPax > > *arg1 = (std::vector< std::deque< si_taxi::BWPax > > *) 0 ;
  std::vector< std::deque< si_taxi::BWPax > >::size_type arg2 ;
  std::vector< std::deque< si_taxi::BWPax > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWPax > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > >::size_type","resize", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< std::deque< si_taxi::BWPax > >::size_type >(val2);
  {
    std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *ptr = (std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *)0;
    res3 = swig::asptr(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > >::value_type const &","resize", 3, argv[1] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< std::deque< si_taxi::BWPax > >::value_type const &","resize", 3, argv[1])); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->resize(arg2,(std::vector< std::deque< si_taxi::BWPax > >::value_type const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE _wrap_BWPaxDequeVector_resize(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BWPaxDequeVector_resize__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BWPaxDequeVector_resize__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "BWPaxDequeVector.resize", 
    "    void BWPaxDequeVector.resize(std::vector< std::deque< si_taxi::BWPax > >::size_type new_size)\n"
    "    void BWPaxDequeVector.resize(std::vector< std::deque< si_taxi::BWPax > >::size_type new_size, std::vector< std::deque< si_taxi::BWPax > >::value_type const &x)\n");
  
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDequeVector.insert

  call-seq:
    insert(pos, argc, ?) -> BWPaxDequeVector
    insert(pos, x) -> iterator
    insert(pos, n, x)

Insert one or more new elements in the BWPaxDequeVector.
*/
SWIGINTERN VALUE
_wrap_BWPaxDequeVector_insert__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWPax > > *arg1 = (std::vector< std::deque< si_taxi::BWPax > > *) 0 ;
  std::vector< std::deque< si_taxi::BWPax > >::iterator arg2 ;
  std::vector< std::deque< si_taxi::BWPax > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  std::vector< std::deque< si_taxi::BWPax > >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWPax > > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > >::iterator","insert", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< std::deque< si_taxi::BWPax > >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< std::deque< si_taxi::BWPax > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > >::iterator","insert", 2, argv[0] ));
    }
  }
  {
    std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *ptr = (std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *)0;
    res3 = swig::asptr(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > >::value_type const &","insert", 3, argv[1] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< std::deque< si_taxi::BWPax > >::value_type const &","insert", 3, argv[1])); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (arg1)->insert(arg2,(std::vector< std::deque< si_taxi::BWPax > >::value_type const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< std::deque< si_taxi::BWPax > >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return vresult;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BWPaxDequeVector_insert__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWPax > > *arg1 = (std::vector< std::deque< si_taxi::BWPax > > *) 0 ;
  std::vector< std::deque< si_taxi::BWPax > >::iterator arg2 ;
  std::vector< std::deque< si_taxi::BWPax > >::size_type arg3 ;
  std::vector< std::deque< si_taxi::BWPax > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWPax > > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > >::iterator","insert", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< std::deque< si_taxi::BWPax > >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< std::deque< si_taxi::BWPax > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > >::iterator","insert", 2, argv[0] ));
    }
  }
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > >::size_type","insert", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< std::deque< si_taxi::BWPax > >::size_type >(val3);
  {
    std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *ptr = (std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *)0;
    res4 = swig::asptr(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > >::value_type const &","insert", 4, argv[2] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< std::deque< si_taxi::BWPax > >::value_type const &","insert", 4, argv[2])); 
    }
    arg4 = ptr;
  }
  {
    try {
      (arg1)->insert(arg2,arg3,(std::vector< std::deque< si_taxi::BWPax > >::value_type const &)*arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
}


SWIGINTERN VALUE _wrap_BWPaxDequeVector_insert(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< std::deque< si_taxi::BWPax > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = swig::asptr(argv[2], (std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BWPaxDequeVector_insert__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_BWPaxDequeVector_insert__SWIG_0(nargs, args, self);
          }
          return _wrap_BWPaxDequeVector_insert__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< std::deque< si_taxi::BWPax > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::deque<si_taxi::BWPax,std::allocator< si_taxi::BWPax > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_BWPaxDequeVector_insert__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "insert", 
    "    void insert(std::vector< std::deque< si_taxi::BWPax > >::difference_type pos, int argc, VALUE *argv, ...)\n"
    "    void insert(std::vector< std::deque< si_taxi::BWPax > >::iterator pos, std::vector< std::deque< si_taxi::BWPax > >::value_type const &x)\n"
    "    void insert(std::vector< std::deque< si_taxi::BWPax > >::iterator pos, std::vector< std::deque< si_taxi::BWPax > >::size_type n, std::vector< std::deque< si_taxi::BWPax > >::value_type const &x)\n");
  
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDequeVector.reserve

  call-seq:
    reserve(n)

Reserve memory in the BWPaxDequeVector for a number of elements.
*/
SWIGINTERN VALUE
_wrap_BWPaxDequeVector_reserve(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWPax > > *arg1 = (std::vector< std::deque< si_taxi::BWPax > > *) 0 ;
  std::vector< std::deque< si_taxi::BWPax > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > > *","reserve", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWPax > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > >::size_type","reserve", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< std::deque< si_taxi::BWPax > >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: SiTaxi::BWPaxDequeVector.capacity

  call-seq:
    capacity -> size_type

Reserved capacity of the BWPaxDequeVector.
*/
SWIGINTERN VALUE
_wrap_BWPaxDequeVector_capacity(int argc, VALUE *argv, VALUE self) {
  std::vector< std::deque< si_taxi::BWPax > > *arg1 = (std::vector< std::deque< si_taxi::BWPax > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::deque< si_taxi::BWPax > >::size_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax > > const *","capacity", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< std::deque< si_taxi::BWPax > > * >(argp1);
  {
    try {
      result = ((std::vector< std::deque< si_taxi::BWPax > > const *)arg1)->capacity();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_std_vector_Sl_std_deque_Sl_si_taxi_BWPax_Sg__Sg_(std::vector< std::deque< si_taxi::BWPax > > *arg1) {
    delete arg1;
}

swig_class SwigClassMDPState;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_MDPState_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_MDPState_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_si_taxi__MDPState);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_MDPState(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "SiTaxi::MDPState";
  si_taxi::MDPState *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (si_taxi::MDPState *)new si_taxi::MDPState();
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_si_taxi_MDPState(si_taxi::MDPState *arg1) {
    delete arg1;
}

swig_class SwigClassMDPSim;

SWIGINTERN VALUE
_wrap_MDPSim_now_set(int argc, VALUE *argv, VALUE self) {
  si_taxi::MDPSim *arg1 = (si_taxi::MDPSim *) 0 ;
  si_taxi::BWTime arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__MDPSim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::MDPSim *","now", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::MDPSim * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "si_taxi::BWTime","now", 2, argv[0] ));
  } 
  arg2 = static_cast< si_taxi::BWTime >(val2);
  if (arg1) (arg1)->now = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MDPSim_now_get(int argc, VALUE *argv, VALUE self) {
  si_taxi::MDPSim *arg1 = (si_taxi::MDPSim *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  si_taxi::BWTime result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__MDPSim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::MDPSim *","now", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::MDPSim * >(argp1);
  result = (si_taxi::BWTime) ((arg1)->now);
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MDPSim_trip_time_set(int argc, VALUE *argv, VALUE self) {
  si_taxi::MDPSim *arg1 = (si_taxi::MDPSim *) 0 ;
  boost::numeric::ublas::matrix< int > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__MDPSim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::MDPSim *","trip_time", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::MDPSim * >(argp1);
  {
    int i, j, rows, cols;
    VALUE row;
    
    if (!rb_obj_is_kind_of(argv[0], rb_cArray)) {
      SWIG_exception_fail(SWIG_ERROR, "not an array");
    }
    
    rows = RARRAY_LEN(argv[0]);
    if (rows > 0) {
      cols = RARRAY_LEN(rb_ary_entry(argv[0], 0));
    } else {
      cols = 0;
    }
    
    arg2 = boost::numeric::ublas::matrix<int>(rows, cols);
    for (i = 0; i < rows; ++i) {
      row = rb_ary_entry(argv[0], i);
      if (RARRAY_LEN(row) != cols) {
        SWIG_exception_fail(SWIG_ERROR, "ragged array not allowed");
      }
      for (j = 0; j < cols; ++j) {
        arg2(i, j) = NUM2INT(rb_ary_entry(row, j));
      }
    }
  }
  if (arg1) (arg1)->trip_time = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MDPSim_trip_time_get(int argc, VALUE *argv, VALUE self) {
  si_taxi::MDPSim *arg1 = (si_taxi::MDPSim *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::numeric::ublas::matrix< int > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__MDPSim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::MDPSim *","trip_time", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::MDPSim * >(argp1);
  result =  ((arg1)->trip_time);
  {
    int i, j, rows, cols;
    VALUE row;
    
    rows = (int) (&result)->size1();
    cols = (int) (&result)->size2();
    vresult = rb_ary_new2(rows);
    for (i = 0; i < rows; ++i) {
      row = rb_ary_new2(cols);
      rb_ary_push(vresult, row);
      for (j = 0; j < cols; ++j) {
        rb_ary_push(row, INT2NUM(result(i, j)));
      }
    }
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MDPSim_queue_set(int argc, VALUE *argv, VALUE self) {
  si_taxi::MDPSim *arg1 = (si_taxi::MDPSim *) 0 ;
  std::vector< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > > *arg2 = (std::vector< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__MDPSim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::MDPSim *","queue", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::MDPSim * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > > *","queue", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< std::vector< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > > * >(argp2);
  if (arg1) (arg1)->queue = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MDPSim_queue_get(int argc, VALUE *argv, VALUE self) {
  si_taxi::MDPSim *arg1 = (si_taxi::MDPSim *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__MDPSim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::MDPSim *","queue", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::MDPSim * >(argp1);
  result = (std::vector< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > > *)& ((arg1)->queue);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MDPSim_inbound_set(int argc, VALUE *argv, VALUE self) {
  si_taxi::MDPSim *arg1 = (si_taxi::MDPSim *) 0 ;
  std::vector< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > > *arg2 = (std::vector< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__MDPSim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::MDPSim *","inbound", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::MDPSim * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > > *","inbound", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< std::vector< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > > * >(argp2);
  if (arg1) (arg1)->inbound = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MDPSim_inbound_get(int argc, VALUE *argv, VALUE self) {
  si_taxi::MDPSim *arg1 = (si_taxi::MDPSim *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__MDPSim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::MDPSim *","inbound", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::MDPSim * >(argp1);
  result = (std::vector< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > > *)& ((arg1)->inbound);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MDPSim_available_set(int argc, VALUE *argv, VALUE self) {
  si_taxi::MDPSim *arg1 = (si_taxi::MDPSim *) 0 ;
  si_taxi::MDPSim::int_vector_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__MDPSim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::MDPSim *","available", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::MDPSim * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_boost__numeric__ublas__vectorT_int_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "si_taxi::MDPSim::int_vector_t","available", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "si_taxi::MDPSim::int_vector_t","available", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< si_taxi::MDPSim::int_vector_t * >(argp2));
    }
  }
  if (arg1) (arg1)->available = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MDPSim_available_get(int argc, VALUE *argv, VALUE self) {
  si_taxi::MDPSim *arg1 = (si_taxi::MDPSim *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  si_taxi::MDPSim::int_vector_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__MDPSim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::MDPSim *","available", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::MDPSim * >(argp1);
  result =  ((arg1)->available);
  vresult = SWIG_NewPointerObj((new si_taxi::MDPSim::int_vector_t(static_cast< const si_taxi::MDPSim::int_vector_t& >(result))), SWIGTYPE_p_boost__numeric__ublas__vectorT_int_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MDPSim_idle_set(int argc, VALUE *argv, VALUE self) {
  si_taxi::MDPSim *arg1 = (si_taxi::MDPSim *) 0 ;
  si_taxi::MDPSim::int_vector_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__MDPSim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::MDPSim *","idle", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::MDPSim * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_boost__numeric__ublas__vectorT_int_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "si_taxi::MDPSim::int_vector_t","idle", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "si_taxi::MDPSim::int_vector_t","idle", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< si_taxi::MDPSim::int_vector_t * >(argp2));
    }
  }
  if (arg1) (arg1)->idle = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MDPSim_idle_get(int argc, VALUE *argv, VALUE self) {
  si_taxi::MDPSim *arg1 = (si_taxi::MDPSim *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  si_taxi::MDPSim::int_vector_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__MDPSim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::MDPSim *","idle", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::MDPSim * >(argp1);
  result =  ((arg1)->idle);
  vresult = SWIG_NewPointerObj((new si_taxi::MDPSim::int_vector_t(static_cast< const si_taxi::MDPSim::int_vector_t& >(result))), SWIGTYPE_p_boost__numeric__ublas__vectorT_int_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MDPSim_ones_set(int argc, VALUE *argv, VALUE self) {
  si_taxi::MDPSim *arg1 = (si_taxi::MDPSim *) 0 ;
  boost::numeric::ublas::scalar_vector< int > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__MDPSim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::MDPSim *","ones", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::MDPSim * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_boost__numeric__ublas__scalar_vectorT_int_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "boost::numeric::ublas::scalar_vector< int >","ones", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "boost::numeric::ublas::scalar_vector< int >","ones", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< boost::numeric::ublas::scalar_vector< int > * >(argp2));
    }
  }
  if (arg1) (arg1)->ones = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MDPSim_ones_get(int argc, VALUE *argv, VALUE self) {
  si_taxi::MDPSim *arg1 = (si_taxi::MDPSim *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::numeric::ublas::scalar_vector< int > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__MDPSim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::MDPSim *","ones", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::MDPSim * >(argp1);
  result =  ((arg1)->ones);
  vresult = SWIG_NewPointerObj((new boost::numeric::ublas::scalar_vector< int >(static_cast< const boost::numeric::ublas::scalar_vector< int >& >(result))), SWIGTYPE_p_boost__numeric__ublas__scalar_vectorT_int_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_MDPSim_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_MDPSim_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_si_taxi__MDPSim);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_MDPSim(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "SiTaxi::MDPSim";
  si_taxi::MDPSim *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (si_taxi::MDPSim *)new si_taxi::MDPSim();
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MDPSim_num_stations(int argc, VALUE *argv, VALUE self) {
  si_taxi::MDPSim *arg1 = (si_taxi::MDPSim *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__MDPSim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::MDPSim const *","num_stations", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::MDPSim * >(argp1);
  {
    try {
      result = ((si_taxi::MDPSim const *)arg1)->num_stations();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MDPSim_num_vehicles(int argc, VALUE *argv, VALUE self) {
  si_taxi::MDPSim *arg1 = (si_taxi::MDPSim *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__MDPSim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::MDPSim const *","num_vehicles", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::MDPSim * >(argp1);
  {
    try {
      result = ((si_taxi::MDPSim const *)arg1)->num_vehicles();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MDPSim_add_vehicles_in_turn__SWIG_0(int argc, VALUE *argv, VALUE self) {
  si_taxi::MDPSim *arg1 = (si_taxi::MDPSim *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__MDPSim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::MDPSim *","add_vehicles_in_turn", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::MDPSim * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","add_vehicles_in_turn", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "size_t","add_vehicles_in_turn", 3, argv[1] ));
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      (arg1)->add_vehicles_in_turn(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MDPSim_add_vehicles_in_turn__SWIG_1(int argc, VALUE *argv, VALUE self) {
  si_taxi::MDPSim *arg1 = (si_taxi::MDPSim *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__MDPSim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::MDPSim *","add_vehicles_in_turn", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::MDPSim * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","add_vehicles_in_turn", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      (arg1)->add_vehicles_in_turn(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MDPSim_add_vehicles_in_turn(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_si_taxi__MDPSim, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MDPSim_add_vehicles_in_turn__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_si_taxi__MDPSim, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MDPSim_add_vehicles_in_turn__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "MDPSim.add_vehicles_in_turn", 
    "    void MDPSim.add_vehicles_in_turn(size_t num_veh, size_t station)\n"
    "    void MDPSim.add_vehicles_in_turn(size_t num_veh)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MDPSim_init(int argc, VALUE *argv, VALUE self) {
  si_taxi::MDPSim *arg1 = (si_taxi::MDPSim *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__MDPSim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::MDPSim *","init", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::MDPSim * >(argp1);
  {
    try {
      (arg1)->init();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MDPSim_tick(int argc, VALUE *argv, VALUE self) {
  si_taxi::MDPSim *arg1 = (si_taxi::MDPSim *) 0 ;
  si_taxi::int_od_t *arg2 = 0 ;
  std::vector< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__MDPSim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::MDPSim *","tick", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::MDPSim * >(argp1);
  {
    int i, j, rows, cols;
    VALUE row;
    
    if (!rb_obj_is_kind_of(argv[0], rb_cArray)) {
      SWIG_exception_fail(SWIG_ERROR, "not an array");
    }
    
    rows = RARRAY_LEN(argv[0]);
    if (rows > 0) {
      cols = RARRAY_LEN(rb_ary_entry(argv[0], 0));
    } else {
      cols = 0;
    }
    
    arg2 = new boost::numeric::ublas::matrix<int>(rows, cols);
    for (i = 0; i < rows; ++i) {
      row = rb_ary_entry(argv[0], i);
      if (RARRAY_LEN(row) != cols) {
        SWIG_exception_fail(SWIG_ERROR, "ragged array not allowed");
      }
      for (j = 0; j < cols; ++j) {
        (*arg2)(i, j) = NUM2INT(rb_ary_entry(row, j));
      }
    }
  }
  {
    std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *ptr = (std::vector<si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *)0;
    res3 = swig::asptr(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > const &","tick", 3, argv[1] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > const &","tick", 3, argv[1])); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->tick((si_taxi::int_od_t const &)*arg2,(std::vector< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    delete arg2;
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
fail:
  {
    delete arg2;
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MDPSim_count_idle_by(int argc, VALUE *argv, VALUE self) {
  si_taxi::MDPSim *arg1 = (si_taxi::MDPSim *) 0 ;
  si_taxi::BWTime arg2 ;
  si_taxi::MDPSim::int_vector_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__MDPSim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::MDPSim const *","count_idle_by", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::MDPSim * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "si_taxi::BWTime","count_idle_by", 2, argv[0] ));
  } 
  arg2 = static_cast< si_taxi::BWTime >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_boost__numeric__ublas__vectorT_int_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "si_taxi::MDPSim::int_vector_t &","count_idle_by", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "si_taxi::MDPSim::int_vector_t &","count_idle_by", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< si_taxi::MDPSim::int_vector_t * >(argp3);
  {
    try {
      ((si_taxi::MDPSim const *)arg1)->count_idle_by(arg2,*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MDPSim_move__SWIG_0(int argc, VALUE *argv, VALUE self) {
  si_taxi::MDPSim *arg1 = (si_taxi::MDPSim *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__MDPSim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::MDPSim *","move", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::MDPSim * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","move", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "size_t","move", 3, argv[1] ));
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_size_t(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "size_t","move", 4, argv[2] ));
  } 
  arg4 = static_cast< size_t >(val4);
  {
    try {
      (arg1)->move(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MDPSim_move__SWIG_1(int argc, VALUE *argv, VALUE self) {
  si_taxi::MDPSim *arg1 = (si_taxi::MDPSim *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_si_taxi__MDPSim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "si_taxi::MDPSim *","move", 1, self )); 
  }
  arg1 = reinterpret_cast< si_taxi::MDPSim * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","move", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "size_t","move", 3, argv[1] ));
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      (arg1)->move(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MDPSim_move(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_si_taxi__MDPSim, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MDPSim_move__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_si_taxi__MDPSim, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MDPSim_move__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "MDPSim.move", 
    "    void MDPSim.move(size_t origin, size_t destin, size_t count)\n"
    "    void MDPSim.move(size_t origin, size_t destin)\n");
  
  return Qnil;
}


SWIGINTERN void
free_si_taxi_MDPSim(si_taxi::MDPSim *arg1) {
    delete arg1;
}


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_swig__IteratorTo_p_swig__ConstIterator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((swig::ConstIterator *)  ((swig::Iterator *) x));
}
static void *_p_si_taxi__BWSimStatsPaxRecordTo_p_si_taxi__BWPax(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((si_taxi::BWPax *)  ((si_taxi::BWSimStatsPaxRecord *) x));
}
static void *_p_si_taxi__ErrorTo_p_si_taxi__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((si_taxi::Exception *)  ((si_taxi::Error *) x));
}
static void *_p_si_taxi__ExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *)  ((si_taxi::Exception *) x));
}
static void *_p_si_taxi__ErrorTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (si_taxi::Exception *) ((si_taxi::Error *) x));
}
static void *_p_si_taxi__BWAndreassonHandlerTo_p_si_taxi__BWProactiveHandler(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((si_taxi::BWProactiveHandler *)  ((si_taxi::BWAndreassonHandler *) x));
}
static void *_p_si_taxi__BWDynamicTransportationProblemHandlerTo_p_si_taxi__BWProactiveHandler(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((si_taxi::BWProactiveHandler *)  ((si_taxi::BWDynamicTransportationProblemHandler *) x));
}
static void *_p_si_taxi__BWSamplingVotingHandlerTo_p_si_taxi__BWProactiveHandler(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((si_taxi::BWProactiveHandler *)  ((si_taxi::BWSamplingVotingHandler *) x));
}
static void *_p_si_taxi__BWSurplusDeficitHandlerTo_p_si_taxi__BWProactiveHandler(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((si_taxi::BWProactiveHandler *)  ((si_taxi::BWSurplusDeficitHandler *) x));
}
static void *_p_si_taxi__BWH1HandlerTo_p_si_taxi__BWHxHandler(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((si_taxi::BWHxHandler *)  ((si_taxi::BWH1Handler *) x));
}
static void *_p_si_taxi__BWH2HandlerTo_p_si_taxi__BWHxHandler(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((si_taxi::BWHxHandler *)  ((si_taxi::BWH2Handler *) x));
}
static void *_p_si_taxi__BWHxHandlerTo_p_si_taxi__BWNNHandler(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((si_taxi::BWNNHandler *)  ((si_taxi::BWHxHandler *) x));
}
static void *_p_si_taxi__BWH1HandlerTo_p_si_taxi__BWNNHandler(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((si_taxi::BWNNHandler *) (si_taxi::BWHxHandler *) ((si_taxi::BWH1Handler *) x));
}
static void *_p_si_taxi__BWH2HandlerTo_p_si_taxi__BWNNHandler(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((si_taxi::BWNNHandler *) (si_taxi::BWHxHandler *) ((si_taxi::BWH2Handler *) x));
}
static void *_p_si_taxi__BWNNHandlerWithCallTimeUpdatesTo_p_si_taxi__BWNNHandler(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((si_taxi::BWNNHandler *)  ((si_taxi::BWNNHandlerWithCallTimeUpdates *) x));
}
static void *_p_si_taxi__BWNNHandlerTo_p_si_taxi__BWReactiveHandler(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((si_taxi::BWReactiveHandler *)  ((si_taxi::BWNNHandler *) x));
}
static void *_p_si_taxi__BWHxHandlerTo_p_si_taxi__BWReactiveHandler(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((si_taxi::BWReactiveHandler *) (si_taxi::BWNNHandler *) ((si_taxi::BWHxHandler *) x));
}
static void *_p_si_taxi__BWH1HandlerTo_p_si_taxi__BWReactiveHandler(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((si_taxi::BWReactiveHandler *) (si_taxi::BWNNHandler *)(si_taxi::BWHxHandler *) ((si_taxi::BWH1Handler *) x));
}
static void *_p_si_taxi__BWH2HandlerTo_p_si_taxi__BWReactiveHandler(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((si_taxi::BWReactiveHandler *) (si_taxi::BWNNHandler *)(si_taxi::BWHxHandler *) ((si_taxi::BWH2Handler *) x));
}
static void *_p_si_taxi__BWETNNHandlerTo_p_si_taxi__BWReactiveHandler(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((si_taxi::BWReactiveHandler *)  ((si_taxi::BWETNNHandler *) x));
}
static void *_p_si_taxi__BWSNNHandlerTo_p_si_taxi__BWReactiveHandler(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((si_taxi::BWReactiveHandler *)  ((si_taxi::BWSNNHandler *) x));
}
static void *_p_si_taxi__BWNNHandlerWithCallTimeUpdatesTo_p_si_taxi__BWReactiveHandler(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((si_taxi::BWReactiveHandler *) (si_taxi::BWNNHandler *) ((si_taxi::BWNNHandlerWithCallTimeUpdates *) x));
}
static void *_p_si_taxi__BWSimStatsDetailedTo_p_si_taxi__BWSimStats(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((si_taxi::BWSimStats *)  ((si_taxi::BWSimStatsDetailed *) x));
}
static void *_p_si_taxi__BWSimStatsPaxRecorderTo_p_si_taxi__BWSimStats(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((si_taxi::BWSimStats *)  ((si_taxi::BWSimStatsPaxRecorder *) x));
}
static void *_p_si_taxi__BWSimStatsMeanPaxWaitTo_p_si_taxi__BWSimStats(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((si_taxi::BWSimStats *)  ((si_taxi::BWSimStatsMeanPaxWait *) x));
}
static void *_p_si_taxi__BWPoissonPaxStreamTo_p_si_taxi__BWPaxStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((si_taxi::BWPaxStream *)  ((si_taxi::BWPoissonPaxStream *) x));
}
static void *_p_si_taxi__BWTestPaxStreamTo_p_si_taxi__BWPaxStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((si_taxi::BWPaxStream *)  ((si_taxi::BWTestPaxStream *) x));
}
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__mt19937 = {"_p_boost__mt19937", "boost::mt19937 *|si_taxi::RNG *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__numeric__ublas__matrixT_bool_t = {"_p_boost__numeric__ublas__matrixT_bool_t", "boost::numeric::ublas::matrix< bool > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__numeric__ublas__matrixT_double_t = {"_p_boost__numeric__ublas__matrixT_double_t", "boost::numeric::ublas::matrix< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__numeric__ublas__matrixT_int_t = {"_p_boost__numeric__ublas__matrixT_int_t", "si_taxi::int_od_t *|boost::numeric::ublas::matrix< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__numeric__ublas__matrixT_size_t_t = {"_p_boost__numeric__ublas__matrixT_size_t_t", "boost::numeric::ublas::matrix< size_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__numeric__ublas__scalar_vectorT_int_t = {"_p_boost__numeric__ublas__scalar_vectorT_int_t", "boost::numeric::ublas::scalar_vector< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__numeric__ublas__vectorT_int_t = {"_p_boost__numeric__ublas__vectorT_int_t", "si_taxi::MDPSim::int_vector_t *|boost::numeric::ublas::vector< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_container_type = {"_p_container_type", "container_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int_vector_t = {"_p_int_vector_t", "int_vector_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long = {"_p_long", "long *|si_taxi::BWTime *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_void = {"_p_p_void", "void **|VALUE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_si_taxi__BWAndreassonHandler = {"_p_si_taxi__BWAndreassonHandler", "si_taxi::BWAndreassonHandler *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_si_taxi__BWCallTimeTracker = {"_p_si_taxi__BWCallTimeTracker", "si_taxi::BWCallTimeTracker *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_si_taxi__BWDynamicTransportationProblemHandler = {"_p_si_taxi__BWDynamicTransportationProblemHandler", "si_taxi::BWDynamicTransportationProblemHandler *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_si_taxi__BWETNNHandler = {"_p_si_taxi__BWETNNHandler", "si_taxi::BWETNNHandler *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_si_taxi__BWH1Handler = {"_p_si_taxi__BWH1Handler", "si_taxi::BWH1Handler *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_si_taxi__BWH2Handler = {"_p_si_taxi__BWH2Handler", "si_taxi::BWH2Handler *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_si_taxi__BWHxHandler = {"_p_si_taxi__BWHxHandler", "si_taxi::BWHxHandler *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_si_taxi__BWNNHandler = {"_p_si_taxi__BWNNHandler", "si_taxi::BWNNHandler *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_si_taxi__BWNNHandlerWithCallTimeUpdates = {"_p_si_taxi__BWNNHandlerWithCallTimeUpdates", "si_taxi::BWNNHandlerWithCallTimeUpdates *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_si_taxi__BWPax = {"_p_si_taxi__BWPax", "std::vector< si_taxi::BWPax >::value_type *|std::queue< si_taxi::BWPax >::value_type *|std::deque< si_taxi::BWPax >::value_type *|si_taxi::BWPax *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_si_taxi__BWPaxStream = {"_p_si_taxi__BWPaxStream", "si_taxi::BWPaxStream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_si_taxi__BWPoissonPaxStream = {"_p_si_taxi__BWPoissonPaxStream", "si_taxi::BWPoissonPaxStream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_si_taxi__BWProactiveHandler = {"_p_si_taxi__BWProactiveHandler", "si_taxi::BWProactiveHandler *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_si_taxi__BWReactiveHandler = {"_p_si_taxi__BWReactiveHandler", "si_taxi::BWReactiveHandler *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_si_taxi__BWSNNHandler = {"_p_si_taxi__BWSNNHandler", "si_taxi::BWSNNHandler *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_si_taxi__BWSamplingVotingHandler = {"_p_si_taxi__BWSamplingVotingHandler", "si_taxi::BWSamplingVotingHandler *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_si_taxi__BWSim = {"_p_si_taxi__BWSim", "si_taxi::BWSim *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_si_taxi__BWSimStats = {"_p_si_taxi__BWSimStats", "si_taxi::BWSimStats *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_si_taxi__BWSimStatsDetailed = {"_p_si_taxi__BWSimStatsDetailed", "si_taxi::BWSimStatsDetailed *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_si_taxi__BWSimStatsMeanPaxWait = {"_p_si_taxi__BWSimStatsMeanPaxWait", "si_taxi::BWSimStatsMeanPaxWait *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_si_taxi__BWSimStatsPaxRecord = {"_p_si_taxi__BWSimStatsPaxRecord", "std::vector< si_taxi::BWSimStatsPaxRecord >::value_type *|si_taxi::BWSimStatsPaxRecord *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_si_taxi__BWSimStatsPaxRecorder = {"_p_si_taxi__BWSimStatsPaxRecorder", "si_taxi::BWSimStatsPaxRecorder *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_si_taxi__BWSurplusDeficitHandler = {"_p_si_taxi__BWSurplusDeficitHandler", "si_taxi::BWSurplusDeficitHandler *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_si_taxi__BWTestPaxStream = {"_p_si_taxi__BWTestPaxStream", "si_taxi::BWTestPaxStream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_si_taxi__BWVehicle = {"_p_si_taxi__BWVehicle", "std::vector< si_taxi::BWVehicle >::value_type *|si_taxi::BWVehicle *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_si_taxi__EmpiricalSampler = {"_p_si_taxi__EmpiricalSampler", "si_taxi::EmpiricalSampler *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_si_taxi__Error = {"_p_si_taxi__Error", "si_taxi::Error *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_si_taxi__Exception = {"_p_si_taxi__Exception", "si_taxi::Exception *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_si_taxi__MDPSim = {"_p_si_taxi__MDPSim", "si_taxi::MDPSim *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_si_taxi__MDPState = {"_p_si_taxi__MDPState", "si_taxi::MDPState *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_si_taxi__NaturalHistogram = {"_p_si_taxi__NaturalHistogram", "si_taxi::NaturalHistogram *|std::vector< si_taxi::NaturalHistogram >::value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_si_taxi__ODHistogram = {"_p_si_taxi__ODHistogram", "si_taxi::ODHistogram *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_si_taxi__ODMatrixWrapper = {"_p_si_taxi__ODMatrixWrapper", "si_taxi::ODMatrixWrapper *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_t = {"_p_size_t", "size_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_double_t = {"_p_std__allocatorT_double_t", "std::vector< double >::allocator_type *|std::allocator< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_int_t = {"_p_std__allocatorT_int_t", "std::vector< int >::allocator_type *|std::allocator< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_long_t = {"_p_std__allocatorT_long_t", "std::deque< long >::allocator_type *|std::allocator< long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_si_taxi__BWPax_t = {"_p_std__allocatorT_si_taxi__BWPax_t", "std::vector< si_taxi::BWPax >::allocator_type *|std::deque< si_taxi::BWPax >::allocator_type *|std::allocator< si_taxi::BWPax > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t = {"_p_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t", "std::allocator< si_taxi::BWSimStatsPaxRecord > *|std::vector< si_taxi::BWSimStatsPaxRecord >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_si_taxi__BWVehicle_t = {"_p_std__allocatorT_si_taxi__BWVehicle_t", "std::allocator< si_taxi::BWVehicle > *|std::vector< si_taxi::BWVehicle >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_si_taxi__NaturalHistogram_t = {"_p_std__allocatorT_si_taxi__NaturalHistogram_t", "std::vector< si_taxi::NaturalHistogram >::allocator_type *|std::allocator< si_taxi::NaturalHistogram > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_size_t_t = {"_p_std__allocatorT_size_t_t", "std::vector< size_t >::allocator_type *|std::allocator< size_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t = {"_p_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t", "std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > *|std::vector< std::deque< si_taxi::BWPax > >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t = {"_p_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t", "std::allocator< std::deque< long,std::allocator< long > > > *|std::vector< std::deque< long > >::allocator_type *|std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__dequeT_int_std__allocatorT_int_t_t = {"_p_std__dequeT_int_std__allocatorT_int_t_t", "std::deque< int,std::allocator< int > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__dequeT_long_std__allocatorT_long_t_t = {"_p_std__dequeT_long_std__allocatorT_long_t_t", "std::deque< si_taxi::BWTime > *|std::deque< long,std::allocator< long > > *|std::deque< long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t = {"_p_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t", "std::deque< si_taxi::BWPax > *|std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__exception = {"_p_std__exception", "std::exception *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__ostream = {"_p_std__ostream", "std::ostream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__queueT_int_std__dequeT_int_std__allocatorT_int_t_t_t = {"_p_std__queueT_int_std__dequeT_int_std__allocatorT_int_t_t_t", "std::queue< int,std::deque< int,std::allocator< int > > > *|std::queue< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__queueT_si_taxi__BWPax_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t = {"_p_std__queueT_si_taxi__BWPax_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t", "std::queue< si_taxi::BWPax > *|std::queue< si_taxi::BWPax,std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_std__allocatorT_double_t_t = {"_p_std__vectorT_double_std__allocatorT_double_t_t", "std::vector< double,std::allocator< double > > *|std::vector< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_int_std__allocatorT_int_t_t = {"_p_std__vectorT_int_std__allocatorT_int_t_t", "std::vector< int,std::allocator< int > > *|std::vector< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t = {"_p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t", "std::vector< si_taxi::BWPax > *|std::vector< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t = {"_p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t", "std::vector< si_taxi::BWSimStatsPaxRecord,std::allocator< si_taxi::BWSimStatsPaxRecord > > *|std::vector< si_taxi::BWSimStatsPaxRecord > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t = {"_p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t", "std::vector< si_taxi::BWVehicle,std::allocator< si_taxi::BWVehicle > > *|std::vector< si_taxi::BWVehicle > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t = {"_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t", "std::vector< si_taxi::NaturalHistogram > *|std::vector< si_taxi::NaturalHistogram,std::allocator< si_taxi::NaturalHistogram > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_size_t_std__allocatorT_size_t_t_t = {"_p_std__vectorT_size_t_std__allocatorT_size_t_t_t", "std::vector< size_t,std::allocator< size_t > > *|std::vector< size_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t = {"_p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t", "std::vector< std::deque< si_taxi::BWPax > > *|std::vector< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > >,std::allocator< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > > *|std::vector< std::deque< si_taxi::BWPax,std::allocator< si_taxi::BWPax > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t = {"_p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t", "std::vector< std::deque< long > > *|std::vector< std::deque< si_taxi::BWTime > > *|std::vector< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::allocator< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > > *|std::vector< std::deque< si_taxi::BWTime,std::allocator< si_taxi::BWTime > > > *|std::vector< std::deque< long,std::allocator< long > >,std::allocator< std::deque< long,std::allocator< long > > > > *|std::vector< std::deque< long,std::allocator< long > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__priority_queueT_long_std__vectorT_long_std__allocatorT_long_t_t_std__greaterT_long_t_t_std__allocatorT_std__priority_queueT_long_std__vectorT_long_std__allocatorT_long_t_t_std__greaterT_long_t_t_t_t = {"_p_std__vectorT_std__priority_queueT_long_std__vectorT_long_std__allocatorT_long_t_t_std__greaterT_long_t_t_std__allocatorT_std__priority_queueT_long_std__vectorT_long_std__allocatorT_long_t_t_std__greaterT_long_t_t_t_t", "std::vector< std::priority_queue< long,std::vector< long,std::allocator< long > >,std::greater< long > >,std::allocator< std::priority_queue< long,std::vector< long,std::allocator< long > >,std::greater< long > > > > *|std::vector< std::priority_queue< si_taxi::BWTime,std::vector< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::greater< si_taxi::BWTime > >,std::allocator< std::priority_queue< si_taxi::BWTime,std::vector< si_taxi::BWTime,std::allocator< si_taxi::BWTime > >,std::greater< si_taxi::BWTime > > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__ConstIterator = {"_p_swig__ConstIterator", "swig::ConstIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__GC_VALUE = {"_p_swig__GC_VALUE", "swig::GC_VALUE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__Iterator = {"_p_swig__Iterator", "swig::Iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "VALUE|void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_allocator_type,
  &_swigt__p_boost__mt19937,
  &_swigt__p_boost__numeric__ublas__matrixT_bool_t,
  &_swigt__p_boost__numeric__ublas__matrixT_double_t,
  &_swigt__p_boost__numeric__ublas__matrixT_int_t,
  &_swigt__p_boost__numeric__ublas__matrixT_size_t_t,
  &_swigt__p_boost__numeric__ublas__scalar_vectorT_int_t,
  &_swigt__p_boost__numeric__ublas__vectorT_int_t,
  &_swigt__p_char,
  &_swigt__p_container_type,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_int_vector_t,
  &_swigt__p_long,
  &_swigt__p_p_void,
  &_swigt__p_si_taxi__BWAndreassonHandler,
  &_swigt__p_si_taxi__BWCallTimeTracker,
  &_swigt__p_si_taxi__BWDynamicTransportationProblemHandler,
  &_swigt__p_si_taxi__BWETNNHandler,
  &_swigt__p_si_taxi__BWH1Handler,
  &_swigt__p_si_taxi__BWH2Handler,
  &_swigt__p_si_taxi__BWHxHandler,
  &_swigt__p_si_taxi__BWNNHandler,
  &_swigt__p_si_taxi__BWNNHandlerWithCallTimeUpdates,
  &_swigt__p_si_taxi__BWPax,
  &_swigt__p_si_taxi__BWPaxStream,
  &_swigt__p_si_taxi__BWPoissonPaxStream,
  &_swigt__p_si_taxi__BWProactiveHandler,
  &_swigt__p_si_taxi__BWReactiveHandler,
  &_swigt__p_si_taxi__BWSNNHandler,
  &_swigt__p_si_taxi__BWSamplingVotingHandler,
  &_swigt__p_si_taxi__BWSim,
  &_swigt__p_si_taxi__BWSimStats,
  &_swigt__p_si_taxi__BWSimStatsDetailed,
  &_swigt__p_si_taxi__BWSimStatsMeanPaxWait,
  &_swigt__p_si_taxi__BWSimStatsPaxRecord,
  &_swigt__p_si_taxi__BWSimStatsPaxRecorder,
  &_swigt__p_si_taxi__BWSurplusDeficitHandler,
  &_swigt__p_si_taxi__BWTestPaxStream,
  &_swigt__p_si_taxi__BWVehicle,
  &_swigt__p_si_taxi__EmpiricalSampler,
  &_swigt__p_si_taxi__Error,
  &_swigt__p_si_taxi__Exception,
  &_swigt__p_si_taxi__MDPSim,
  &_swigt__p_si_taxi__MDPState,
  &_swigt__p_si_taxi__NaturalHistogram,
  &_swigt__p_si_taxi__ODHistogram,
  &_swigt__p_si_taxi__ODMatrixWrapper,
  &_swigt__p_size_t,
  &_swigt__p_size_type,
  &_swigt__p_std__allocatorT_double_t,
  &_swigt__p_std__allocatorT_int_t,
  &_swigt__p_std__allocatorT_long_t,
  &_swigt__p_std__allocatorT_si_taxi__BWPax_t,
  &_swigt__p_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t,
  &_swigt__p_std__allocatorT_si_taxi__BWVehicle_t,
  &_swigt__p_std__allocatorT_si_taxi__NaturalHistogram_t,
  &_swigt__p_std__allocatorT_size_t_t,
  &_swigt__p_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t,
  &_swigt__p_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t,
  &_swigt__p_std__dequeT_int_std__allocatorT_int_t_t,
  &_swigt__p_std__dequeT_long_std__allocatorT_long_t_t,
  &_swigt__p_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t,
  &_swigt__p_std__exception,
  &_swigt__p_std__ostream,
  &_swigt__p_std__queueT_int_std__dequeT_int_std__allocatorT_int_t_t_t,
  &_swigt__p_std__queueT_si_taxi__BWPax_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_double_std__allocatorT_double_t_t,
  &_swigt__p_std__vectorT_int_std__allocatorT_int_t_t,
  &_swigt__p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t,
  &_swigt__p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t,
  &_swigt__p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t,
  &_swigt__p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t,
  &_swigt__p_std__vectorT_size_t_std__allocatorT_size_t_t_t,
  &_swigt__p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t,
  &_swigt__p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t,
  &_swigt__p_std__vectorT_std__priority_queueT_long_std__vectorT_long_std__allocatorT_long_t_t_std__greaterT_long_t_t_std__allocatorT_std__priority_queueT_long_std__vectorT_long_std__allocatorT_long_t_t_std__greaterT_long_t_t_t_t,
  &_swigt__p_swig__ConstIterator,
  &_swigt__p_swig__GC_VALUE,
  &_swigt__p_swig__Iterator,
  &_swigt__p_value_type,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__mt19937[] = {  {&_swigt__p_boost__mt19937, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__numeric__ublas__matrixT_bool_t[] = {  {&_swigt__p_boost__numeric__ublas__matrixT_bool_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__numeric__ublas__matrixT_double_t[] = {  {&_swigt__p_boost__numeric__ublas__matrixT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__numeric__ublas__matrixT_int_t[] = {  {&_swigt__p_boost__numeric__ublas__matrixT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__numeric__ublas__matrixT_size_t_t[] = {  {&_swigt__p_boost__numeric__ublas__matrixT_size_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__numeric__ublas__scalar_vectorT_int_t[] = {  {&_swigt__p_boost__numeric__ublas__scalar_vectorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__numeric__ublas__vectorT_int_t[] = {  {&_swigt__p_boost__numeric__ublas__vectorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_container_type[] = {  {&_swigt__p_container_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int_vector_t[] = {  {&_swigt__p_int_vector_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_void[] = {  {&_swigt__p_p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_si_taxi__BWAndreassonHandler[] = {  {&_swigt__p_si_taxi__BWAndreassonHandler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_si_taxi__BWCallTimeTracker[] = {  {&_swigt__p_si_taxi__BWCallTimeTracker, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_si_taxi__BWDynamicTransportationProblemHandler[] = {  {&_swigt__p_si_taxi__BWDynamicTransportationProblemHandler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_si_taxi__BWETNNHandler[] = {  {&_swigt__p_si_taxi__BWETNNHandler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_si_taxi__BWH1Handler[] = {  {&_swigt__p_si_taxi__BWH1Handler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_si_taxi__BWH2Handler[] = {  {&_swigt__p_si_taxi__BWH2Handler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_si_taxi__BWHxHandler[] = {  {&_swigt__p_si_taxi__BWHxHandler, 0, 0, 0},  {&_swigt__p_si_taxi__BWH1Handler, _p_si_taxi__BWH1HandlerTo_p_si_taxi__BWHxHandler, 0, 0},  {&_swigt__p_si_taxi__BWH2Handler, _p_si_taxi__BWH2HandlerTo_p_si_taxi__BWHxHandler, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_si_taxi__BWNNHandler[] = {  {&_swigt__p_si_taxi__BWNNHandler, 0, 0, 0},  {&_swigt__p_si_taxi__BWHxHandler, _p_si_taxi__BWHxHandlerTo_p_si_taxi__BWNNHandler, 0, 0},  {&_swigt__p_si_taxi__BWH1Handler, _p_si_taxi__BWH1HandlerTo_p_si_taxi__BWNNHandler, 0, 0},  {&_swigt__p_si_taxi__BWH2Handler, _p_si_taxi__BWH2HandlerTo_p_si_taxi__BWNNHandler, 0, 0},  {&_swigt__p_si_taxi__BWNNHandlerWithCallTimeUpdates, _p_si_taxi__BWNNHandlerWithCallTimeUpdatesTo_p_si_taxi__BWNNHandler, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_si_taxi__BWNNHandlerWithCallTimeUpdates[] = {  {&_swigt__p_si_taxi__BWNNHandlerWithCallTimeUpdates, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_si_taxi__BWPax[] = {  {&_swigt__p_si_taxi__BWSimStatsPaxRecord, _p_si_taxi__BWSimStatsPaxRecordTo_p_si_taxi__BWPax, 0, 0},  {&_swigt__p_si_taxi__BWPax, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_si_taxi__BWPaxStream[] = {  {&_swigt__p_si_taxi__BWPaxStream, 0, 0, 0},  {&_swigt__p_si_taxi__BWPoissonPaxStream, _p_si_taxi__BWPoissonPaxStreamTo_p_si_taxi__BWPaxStream, 0, 0},  {&_swigt__p_si_taxi__BWTestPaxStream, _p_si_taxi__BWTestPaxStreamTo_p_si_taxi__BWPaxStream, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_si_taxi__BWPoissonPaxStream[] = {  {&_swigt__p_si_taxi__BWPoissonPaxStream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_si_taxi__BWProactiveHandler[] = {  {&_swigt__p_si_taxi__BWProactiveHandler, 0, 0, 0},  {&_swigt__p_si_taxi__BWAndreassonHandler, _p_si_taxi__BWAndreassonHandlerTo_p_si_taxi__BWProactiveHandler, 0, 0},  {&_swigt__p_si_taxi__BWDynamicTransportationProblemHandler, _p_si_taxi__BWDynamicTransportationProblemHandlerTo_p_si_taxi__BWProactiveHandler, 0, 0},  {&_swigt__p_si_taxi__BWSamplingVotingHandler, _p_si_taxi__BWSamplingVotingHandlerTo_p_si_taxi__BWProactiveHandler, 0, 0},  {&_swigt__p_si_taxi__BWSurplusDeficitHandler, _p_si_taxi__BWSurplusDeficitHandlerTo_p_si_taxi__BWProactiveHandler, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_si_taxi__BWReactiveHandler[] = {  {&_swigt__p_si_taxi__BWReactiveHandler, 0, 0, 0},  {&_swigt__p_si_taxi__BWNNHandler, _p_si_taxi__BWNNHandlerTo_p_si_taxi__BWReactiveHandler, 0, 0},  {&_swigt__p_si_taxi__BWHxHandler, _p_si_taxi__BWHxHandlerTo_p_si_taxi__BWReactiveHandler, 0, 0},  {&_swigt__p_si_taxi__BWH1Handler, _p_si_taxi__BWH1HandlerTo_p_si_taxi__BWReactiveHandler, 0, 0},  {&_swigt__p_si_taxi__BWH2Handler, _p_si_taxi__BWH2HandlerTo_p_si_taxi__BWReactiveHandler, 0, 0},  {&_swigt__p_si_taxi__BWETNNHandler, _p_si_taxi__BWETNNHandlerTo_p_si_taxi__BWReactiveHandler, 0, 0},  {&_swigt__p_si_taxi__BWSNNHandler, _p_si_taxi__BWSNNHandlerTo_p_si_taxi__BWReactiveHandler, 0, 0},  {&_swigt__p_si_taxi__BWNNHandlerWithCallTimeUpdates, _p_si_taxi__BWNNHandlerWithCallTimeUpdatesTo_p_si_taxi__BWReactiveHandler, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_si_taxi__BWSNNHandler[] = {  {&_swigt__p_si_taxi__BWSNNHandler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_si_taxi__BWSamplingVotingHandler[] = {  {&_swigt__p_si_taxi__BWSamplingVotingHandler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_si_taxi__BWSim[] = {  {&_swigt__p_si_taxi__BWSim, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_si_taxi__BWSimStats[] = {  {&_swigt__p_si_taxi__BWSimStatsDetailed, _p_si_taxi__BWSimStatsDetailedTo_p_si_taxi__BWSimStats, 0, 0},  {&_swigt__p_si_taxi__BWSimStats, 0, 0, 0},  {&_swigt__p_si_taxi__BWSimStatsPaxRecorder, _p_si_taxi__BWSimStatsPaxRecorderTo_p_si_taxi__BWSimStats, 0, 0},  {&_swigt__p_si_taxi__BWSimStatsMeanPaxWait, _p_si_taxi__BWSimStatsMeanPaxWaitTo_p_si_taxi__BWSimStats, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_si_taxi__BWSimStatsDetailed[] = {  {&_swigt__p_si_taxi__BWSimStatsDetailed, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_si_taxi__BWSimStatsMeanPaxWait[] = {  {&_swigt__p_si_taxi__BWSimStatsMeanPaxWait, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_si_taxi__BWSimStatsPaxRecord[] = {  {&_swigt__p_si_taxi__BWSimStatsPaxRecord, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_si_taxi__BWSimStatsPaxRecorder[] = {  {&_swigt__p_si_taxi__BWSimStatsPaxRecorder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_si_taxi__BWSurplusDeficitHandler[] = {  {&_swigt__p_si_taxi__BWSurplusDeficitHandler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_si_taxi__BWTestPaxStream[] = {  {&_swigt__p_si_taxi__BWTestPaxStream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_si_taxi__BWVehicle[] = {  {&_swigt__p_si_taxi__BWVehicle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_si_taxi__EmpiricalSampler[] = {  {&_swigt__p_si_taxi__EmpiricalSampler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_si_taxi__Error[] = {  {&_swigt__p_si_taxi__Error, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_si_taxi__Exception[] = {  {&_swigt__p_si_taxi__Exception, 0, 0, 0},  {&_swigt__p_si_taxi__Error, _p_si_taxi__ErrorTo_p_si_taxi__Exception, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_si_taxi__MDPSim[] = {  {&_swigt__p_si_taxi__MDPSim, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_si_taxi__MDPState[] = {  {&_swigt__p_si_taxi__MDPState, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_si_taxi__NaturalHistogram[] = {  {&_swigt__p_si_taxi__NaturalHistogram, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_si_taxi__ODHistogram[] = {  {&_swigt__p_si_taxi__ODHistogram, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_si_taxi__ODMatrixWrapper[] = {  {&_swigt__p_si_taxi__ODMatrixWrapper, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_t[] = {  {&_swigt__p_size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_double_t[] = {  {&_swigt__p_std__allocatorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_int_t[] = {  {&_swigt__p_std__allocatorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_long_t[] = {  {&_swigt__p_std__allocatorT_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_si_taxi__BWPax_t[] = {  {&_swigt__p_std__allocatorT_si_taxi__BWPax_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t[] = {  {&_swigt__p_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_si_taxi__BWVehicle_t[] = {  {&_swigt__p_std__allocatorT_si_taxi__BWVehicle_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_si_taxi__NaturalHistogram_t[] = {  {&_swigt__p_std__allocatorT_si_taxi__NaturalHistogram_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_size_t_t[] = {  {&_swigt__p_std__allocatorT_size_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t[] = {  {&_swigt__p_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t[] = {  {&_swigt__p_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__dequeT_int_std__allocatorT_int_t_t[] = {  {&_swigt__p_std__dequeT_int_std__allocatorT_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__dequeT_long_std__allocatorT_long_t_t[] = {  {&_swigt__p_std__dequeT_long_std__allocatorT_long_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t[] = {  {&_swigt__p_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__exception[] = {  {&_swigt__p_std__exception, 0, 0, 0},  {&_swigt__p_si_taxi__Exception, _p_si_taxi__ExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_si_taxi__Error, _p_si_taxi__ErrorTo_p_std__exception, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__ostream[] = {  {&_swigt__p_std__ostream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__queueT_int_std__dequeT_int_std__allocatorT_int_t_t_t[] = {  {&_swigt__p_std__queueT_int_std__dequeT_int_std__allocatorT_int_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__queueT_si_taxi__BWPax_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t[] = {  {&_swigt__p_std__queueT_si_taxi__BWPax_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_std__allocatorT_double_t_t[] = {  {&_swigt__p_std__vectorT_double_std__allocatorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_std__allocatorT_int_t_t[] = {  {&_swigt__p_std__vectorT_int_std__allocatorT_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t[] = {  {&_swigt__p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t[] = {  {&_swigt__p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t[] = {  {&_swigt__p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t[] = {  {&_swigt__p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_size_t_std__allocatorT_size_t_t_t[] = {  {&_swigt__p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t[] = {  {&_swigt__p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t[] = {  {&_swigt__p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__priority_queueT_long_std__vectorT_long_std__allocatorT_long_t_t_std__greaterT_long_t_t_std__allocatorT_std__priority_queueT_long_std__vectorT_long_std__allocatorT_long_t_t_std__greaterT_long_t_t_t_t[] = {  {&_swigt__p_std__vectorT_std__priority_queueT_long_std__vectorT_long_std__allocatorT_long_t_t_std__greaterT_long_t_t_std__allocatorT_std__priority_queueT_long_std__vectorT_long_std__allocatorT_long_t_t_std__greaterT_long_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__ConstIterator[] = {  {&_swigt__p_swig__ConstIterator, 0, 0, 0},  {&_swigt__p_swig__Iterator, _p_swig__IteratorTo_p_swig__ConstIterator, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__GC_VALUE[] = {  {&_swigt__p_swig__GC_VALUE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__Iterator[] = {  {&_swigt__p_swig__Iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_allocator_type,
  _swigc__p_boost__mt19937,
  _swigc__p_boost__numeric__ublas__matrixT_bool_t,
  _swigc__p_boost__numeric__ublas__matrixT_double_t,
  _swigc__p_boost__numeric__ublas__matrixT_int_t,
  _swigc__p_boost__numeric__ublas__matrixT_size_t_t,
  _swigc__p_boost__numeric__ublas__scalar_vectorT_int_t,
  _swigc__p_boost__numeric__ublas__vectorT_int_t,
  _swigc__p_char,
  _swigc__p_container_type,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_int_vector_t,
  _swigc__p_long,
  _swigc__p_p_void,
  _swigc__p_si_taxi__BWAndreassonHandler,
  _swigc__p_si_taxi__BWCallTimeTracker,
  _swigc__p_si_taxi__BWDynamicTransportationProblemHandler,
  _swigc__p_si_taxi__BWETNNHandler,
  _swigc__p_si_taxi__BWH1Handler,
  _swigc__p_si_taxi__BWH2Handler,
  _swigc__p_si_taxi__BWHxHandler,
  _swigc__p_si_taxi__BWNNHandler,
  _swigc__p_si_taxi__BWNNHandlerWithCallTimeUpdates,
  _swigc__p_si_taxi__BWPax,
  _swigc__p_si_taxi__BWPaxStream,
  _swigc__p_si_taxi__BWPoissonPaxStream,
  _swigc__p_si_taxi__BWProactiveHandler,
  _swigc__p_si_taxi__BWReactiveHandler,
  _swigc__p_si_taxi__BWSNNHandler,
  _swigc__p_si_taxi__BWSamplingVotingHandler,
  _swigc__p_si_taxi__BWSim,
  _swigc__p_si_taxi__BWSimStats,
  _swigc__p_si_taxi__BWSimStatsDetailed,
  _swigc__p_si_taxi__BWSimStatsMeanPaxWait,
  _swigc__p_si_taxi__BWSimStatsPaxRecord,
  _swigc__p_si_taxi__BWSimStatsPaxRecorder,
  _swigc__p_si_taxi__BWSurplusDeficitHandler,
  _swigc__p_si_taxi__BWTestPaxStream,
  _swigc__p_si_taxi__BWVehicle,
  _swigc__p_si_taxi__EmpiricalSampler,
  _swigc__p_si_taxi__Error,
  _swigc__p_si_taxi__Exception,
  _swigc__p_si_taxi__MDPSim,
  _swigc__p_si_taxi__MDPState,
  _swigc__p_si_taxi__NaturalHistogram,
  _swigc__p_si_taxi__ODHistogram,
  _swigc__p_si_taxi__ODMatrixWrapper,
  _swigc__p_size_t,
  _swigc__p_size_type,
  _swigc__p_std__allocatorT_double_t,
  _swigc__p_std__allocatorT_int_t,
  _swigc__p_std__allocatorT_long_t,
  _swigc__p_std__allocatorT_si_taxi__BWPax_t,
  _swigc__p_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t,
  _swigc__p_std__allocatorT_si_taxi__BWVehicle_t,
  _swigc__p_std__allocatorT_si_taxi__NaturalHistogram_t,
  _swigc__p_std__allocatorT_size_t_t,
  _swigc__p_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t,
  _swigc__p_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t,
  _swigc__p_std__dequeT_int_std__allocatorT_int_t_t,
  _swigc__p_std__dequeT_long_std__allocatorT_long_t_t,
  _swigc__p_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t,
  _swigc__p_std__exception,
  _swigc__p_std__ostream,
  _swigc__p_std__queueT_int_std__dequeT_int_std__allocatorT_int_t_t_t,
  _swigc__p_std__queueT_si_taxi__BWPax_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_double_std__allocatorT_double_t_t,
  _swigc__p_std__vectorT_int_std__allocatorT_int_t_t,
  _swigc__p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t,
  _swigc__p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t,
  _swigc__p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t,
  _swigc__p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t,
  _swigc__p_std__vectorT_size_t_std__allocatorT_size_t_t_t,
  _swigc__p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t,
  _swigc__p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t,
  _swigc__p_std__vectorT_std__priority_queueT_long_std__vectorT_long_std__allocatorT_long_t_t_std__greaterT_long_t_t_std__allocatorT_std__priority_queueT_long_std__vectorT_long_std__allocatorT_long_t_t_std__greaterT_long_t_t_t_t,
  _swigc__p_swig__ConstIterator,
  _swigc__p_swig__GC_VALUE,
  _swigc__p_swig__Iterator,
  _swigc__p_value_type,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  clientdata = clientdata;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpeters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
  
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif

/*

*/
#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void Init_siTaxi(void) {
  size_t i;
  
  SWIG_InitRuntime();
  mSiTaxi = rb_define_module("SiTaxi");
  
  SWIG_InitializeModule(0);
  for (i = 0; i < swig_module.size; i++) {
    SWIG_define_class(swig_module.types[i]);
  }
  
  SWIG_RubyInitializeTrackings();
  
  SwigClassGC_VALUE.klass = rb_define_class_under(mSiTaxi, "GC_VALUE", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_swig__GC_VALUE, (void *) &SwigClassGC_VALUE);
  rb_undef_alloc_func(SwigClassGC_VALUE.klass);
  rb_define_method(SwigClassGC_VALUE.klass, "inspect", VALUEFUNC(_wrap_GC_VALUE_inspect), -1);
  rb_define_method(SwigClassGC_VALUE.klass, "to_s", VALUEFUNC(_wrap_GC_VALUE_to_s), -1);
  SwigClassGC_VALUE.mark = 0;
  SwigClassGC_VALUE.trackObjects = 0;
  
  swig::GC_VALUE::initialize();
  
  
  SwigClassConstIterator.klass = rb_define_class_under(mSiTaxi, "ConstIterator", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_swig__ConstIterator, (void *) &SwigClassConstIterator);
  rb_undef_alloc_func(SwigClassConstIterator.klass);
  rb_define_method(SwigClassConstIterator.klass, "value", VALUEFUNC(_wrap_ConstIterator_value), -1);
  rb_define_method(SwigClassConstIterator.klass, "dup", VALUEFUNC(_wrap_ConstIterator_dup), -1);
  rb_define_method(SwigClassConstIterator.klass, "inspect", VALUEFUNC(_wrap_ConstIterator_inspect), -1);
  rb_define_method(SwigClassConstIterator.klass, "to_s", VALUEFUNC(_wrap_ConstIterator_to_s), -1);
  rb_define_method(SwigClassConstIterator.klass, "next", VALUEFUNC(_wrap_ConstIterator_next), -1);
  rb_define_method(SwigClassConstIterator.klass, "previous", VALUEFUNC(_wrap_ConstIterator_previous), -1);
  rb_define_method(SwigClassConstIterator.klass, "==", VALUEFUNC(_wrap_ConstIterator___eq__), -1);
  rb_define_method(SwigClassConstIterator.klass, "+", VALUEFUNC(_wrap_ConstIterator___add__), -1);
  rb_define_method(SwigClassConstIterator.klass, "-", VALUEFUNC(_wrap_ConstIterator___sub__), -1);
  SwigClassConstIterator.mark = 0;
  SwigClassConstIterator.destroy = (void (*)(void *)) free_swig_ConstIterator;
  SwigClassConstIterator.trackObjects = 0;
  
  SwigClassIterator.klass = rb_define_class_under(mSiTaxi, "Iterator", ((swig_class *) SWIGTYPE_p_swig__ConstIterator->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_swig__Iterator, (void *) &SwigClassIterator);
  rb_undef_alloc_func(SwigClassIterator.klass);
  rb_define_method(SwigClassIterator.klass, "value=", VALUEFUNC(_wrap_Iterator_valuee___), -1);
  rb_define_method(SwigClassIterator.klass, "dup", VALUEFUNC(_wrap_Iterator_dup), -1);
  rb_define_method(SwigClassIterator.klass, "next", VALUEFUNC(_wrap_Iterator_next), -1);
  rb_define_method(SwigClassIterator.klass, "previous", VALUEFUNC(_wrap_Iterator_previous), -1);
  rb_define_method(SwigClassIterator.klass, "inspect", VALUEFUNC(_wrap_Iterator_inspect), -1);
  rb_define_method(SwigClassIterator.klass, "to_s", VALUEFUNC(_wrap_Iterator_to_s), -1);
  rb_define_method(SwigClassIterator.klass, "==", VALUEFUNC(_wrap_Iterator___eq__), -1);
  rb_define_method(SwigClassIterator.klass, "+", VALUEFUNC(_wrap_Iterator___add__), -1);
  rb_define_method(SwigClassIterator.klass, "-", VALUEFUNC(_wrap_Iterator___sub__), -1);
  SwigClassIterator.mark = 0;
  SwigClassIterator.destroy = (void (*)(void *)) free_swig_Iterator;
  SwigClassIterator.trackObjects = 0;
  
  SwigClassSizeTVector.klass = rb_define_class_under(mSiTaxi, "SizeTVector", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, (void *) &SwigClassSizeTVector);
  rb_include_module(SwigClassSizeTVector.klass, rb_eval_string("Enumerable"));
  rb_define_alloc_func(SwigClassSizeTVector.klass, _wrap_SizeTVector_allocate);
  rb_define_method(SwigClassSizeTVector.klass, "initialize", VALUEFUNC(_wrap_new_SizeTVector), -1);
  rb_define_method(SwigClassSizeTVector.klass, "dup", VALUEFUNC(_wrap_SizeTVector_dup), -1);
  rb_define_method(SwigClassSizeTVector.klass, "inspect", VALUEFUNC(_wrap_SizeTVector_inspect), -1);
  rb_define_method(SwigClassSizeTVector.klass, "to_a", VALUEFUNC(_wrap_SizeTVector_to_a), -1);
  rb_define_method(SwigClassSizeTVector.klass, "to_s", VALUEFUNC(_wrap_SizeTVector_to_s), -1);
  rb_define_method(SwigClassSizeTVector.klass, "slice", VALUEFUNC(_wrap_SizeTVector_slice), -1);
  rb_define_method(SwigClassSizeTVector.klass, "each", VALUEFUNC(_wrap_SizeTVector_each), -1);
  rb_define_method(SwigClassSizeTVector.klass, "select", VALUEFUNC(_wrap_SizeTVector_select), -1);
  rb_define_method(SwigClassSizeTVector.klass, "reject!", VALUEFUNC(_wrap_SizeTVector_rejectN___), -1);
  rb_define_alias(SwigClassSizeTVector.klass, "delete_if", "reject!");
  rb_define_method(SwigClassSizeTVector.klass, "delete_at", VALUEFUNC(_wrap_SizeTVector_delete_at), -1);
  rb_define_method(SwigClassSizeTVector.klass, "__delete2__", VALUEFUNC(_wrap_SizeTVector___delete2__), -1);
  rb_define_method(SwigClassSizeTVector.klass, "pop", VALUEFUNC(_wrap_SizeTVector_pop), -1);
  rb_define_method(SwigClassSizeTVector.klass, "push", VALUEFUNC(_wrap_SizeTVector_push), -1);
  rb_define_alias(SwigClassSizeTVector.klass, "<<", "push");
  rb_define_method(SwigClassSizeTVector.klass, "reject", VALUEFUNC(_wrap_SizeTVector_reject), -1);
  rb_define_method(SwigClassSizeTVector.klass, "at", VALUEFUNC(_wrap_SizeTVector_at), -1);
  rb_define_method(SwigClassSizeTVector.klass, "[]", VALUEFUNC(_wrap_SizeTVector___getitem__), -1);
  rb_define_method(SwigClassSizeTVector.klass, "[]=", VALUEFUNC(_wrap_SizeTVector___setitem__), -1);
  rb_define_method(SwigClassSizeTVector.klass, "shift", VALUEFUNC(_wrap_SizeTVector_shift), -1);
  rb_define_method(SwigClassSizeTVector.klass, "unshift", VALUEFUNC(_wrap_SizeTVector_unshift), -1);
  rb_define_method(SwigClassSizeTVector.klass, "empty?", VALUEFUNC(_wrap_SizeTVector_emptyq___), -1);
  rb_define_method(SwigClassSizeTVector.klass, "size", VALUEFUNC(_wrap_SizeTVector_size), -1);
  rb_define_method(SwigClassSizeTVector.klass, "clear", VALUEFUNC(_wrap_SizeTVector_clear), -1);
  rb_define_method(SwigClassSizeTVector.klass, "swap", VALUEFUNC(_wrap_SizeTVector_swap), -1);
  rb_define_method(SwigClassSizeTVector.klass, "get_allocator", VALUEFUNC(_wrap_SizeTVector_get_allocator), -1);
  rb_define_method(SwigClassSizeTVector.klass, "begin", VALUEFUNC(_wrap_SizeTVector_begin), -1);
  rb_define_method(SwigClassSizeTVector.klass, "end", VALUEFUNC(_wrap_SizeTVector_end), -1);
  rb_define_method(SwigClassSizeTVector.klass, "rbegin", VALUEFUNC(_wrap_SizeTVector_rbegin), -1);
  rb_define_method(SwigClassSizeTVector.klass, "rend", VALUEFUNC(_wrap_SizeTVector_rend), -1);
  rb_define_method(SwigClassSizeTVector.klass, "erase", VALUEFUNC(_wrap_SizeTVector_erase), -1);
  rb_define_method(SwigClassSizeTVector.klass, "front", VALUEFUNC(_wrap_SizeTVector_front), -1);
  rb_define_method(SwigClassSizeTVector.klass, "back", VALUEFUNC(_wrap_SizeTVector_back), -1);
  rb_define_method(SwigClassSizeTVector.klass, "assign", VALUEFUNC(_wrap_SizeTVector_assign), -1);
  rb_define_method(SwigClassSizeTVector.klass, "resize", VALUEFUNC(_wrap_SizeTVector_resize), -1);
  rb_define_method(SwigClassSizeTVector.klass, "insert", VALUEFUNC(_wrap_SizeTVector_insert), -1);
  rb_define_method(SwigClassSizeTVector.klass, "reserve", VALUEFUNC(_wrap_SizeTVector_reserve), -1);
  rb_define_method(SwigClassSizeTVector.klass, "capacity", VALUEFUNC(_wrap_SizeTVector_capacity), -1);
  SwigClassSizeTVector.mark = 0;
  SwigClassSizeTVector.destroy = (void (*)(void *)) free_std_vector_Sl_size_t_Sg_;
  SwigClassSizeTVector.trackObjects = 0;
  
  SwigClassDoubleVector.klass = rb_define_class_under(mSiTaxi, "DoubleVector", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, (void *) &SwigClassDoubleVector);
  rb_include_module(SwigClassDoubleVector.klass, rb_eval_string("Enumerable"));
  rb_define_alloc_func(SwigClassDoubleVector.klass, _wrap_DoubleVector_allocate);
  rb_define_method(SwigClassDoubleVector.klass, "initialize", VALUEFUNC(_wrap_new_DoubleVector), -1);
  rb_define_method(SwigClassDoubleVector.klass, "dup", VALUEFUNC(_wrap_DoubleVector_dup), -1);
  rb_define_method(SwigClassDoubleVector.klass, "inspect", VALUEFUNC(_wrap_DoubleVector_inspect), -1);
  rb_define_method(SwigClassDoubleVector.klass, "to_a", VALUEFUNC(_wrap_DoubleVector_to_a), -1);
  rb_define_method(SwigClassDoubleVector.klass, "to_s", VALUEFUNC(_wrap_DoubleVector_to_s), -1);
  rb_define_method(SwigClassDoubleVector.klass, "slice", VALUEFUNC(_wrap_DoubleVector_slice), -1);
  rb_define_method(SwigClassDoubleVector.klass, "each", VALUEFUNC(_wrap_DoubleVector_each), -1);
  rb_define_method(SwigClassDoubleVector.klass, "select", VALUEFUNC(_wrap_DoubleVector_select), -1);
  rb_define_method(SwigClassDoubleVector.klass, "reject!", VALUEFUNC(_wrap_DoubleVector_rejectN___), -1);
  rb_define_alias(SwigClassDoubleVector.klass, "delete_if", "reject!");
  rb_define_method(SwigClassDoubleVector.klass, "delete_at", VALUEFUNC(_wrap_DoubleVector_delete_at), -1);
  rb_define_method(SwigClassDoubleVector.klass, "__delete2__", VALUEFUNC(_wrap_DoubleVector___delete2__), -1);
  rb_define_method(SwigClassDoubleVector.klass, "pop", VALUEFUNC(_wrap_DoubleVector_pop), -1);
  rb_define_method(SwigClassDoubleVector.klass, "push", VALUEFUNC(_wrap_DoubleVector_push), -1);
  rb_define_alias(SwigClassDoubleVector.klass, "<<", "push");
  rb_define_method(SwigClassDoubleVector.klass, "reject", VALUEFUNC(_wrap_DoubleVector_reject), -1);
  rb_define_method(SwigClassDoubleVector.klass, "at", VALUEFUNC(_wrap_DoubleVector_at), -1);
  rb_define_method(SwigClassDoubleVector.klass, "[]", VALUEFUNC(_wrap_DoubleVector___getitem__), -1);
  rb_define_method(SwigClassDoubleVector.klass, "[]=", VALUEFUNC(_wrap_DoubleVector___setitem__), -1);
  rb_define_method(SwigClassDoubleVector.klass, "shift", VALUEFUNC(_wrap_DoubleVector_shift), -1);
  rb_define_method(SwigClassDoubleVector.klass, "unshift", VALUEFUNC(_wrap_DoubleVector_unshift), -1);
  rb_define_method(SwigClassDoubleVector.klass, "empty?", VALUEFUNC(_wrap_DoubleVector_emptyq___), -1);
  rb_define_method(SwigClassDoubleVector.klass, "size", VALUEFUNC(_wrap_DoubleVector_size), -1);
  rb_define_method(SwigClassDoubleVector.klass, "clear", VALUEFUNC(_wrap_DoubleVector_clear), -1);
  rb_define_method(SwigClassDoubleVector.klass, "swap", VALUEFUNC(_wrap_DoubleVector_swap), -1);
  rb_define_method(SwigClassDoubleVector.klass, "get_allocator", VALUEFUNC(_wrap_DoubleVector_get_allocator), -1);
  rb_define_method(SwigClassDoubleVector.klass, "begin", VALUEFUNC(_wrap_DoubleVector_begin), -1);
  rb_define_method(SwigClassDoubleVector.klass, "end", VALUEFUNC(_wrap_DoubleVector_end), -1);
  rb_define_method(SwigClassDoubleVector.klass, "rbegin", VALUEFUNC(_wrap_DoubleVector_rbegin), -1);
  rb_define_method(SwigClassDoubleVector.klass, "rend", VALUEFUNC(_wrap_DoubleVector_rend), -1);
  rb_define_method(SwigClassDoubleVector.klass, "erase", VALUEFUNC(_wrap_DoubleVector_erase), -1);
  rb_define_method(SwigClassDoubleVector.klass, "front", VALUEFUNC(_wrap_DoubleVector_front), -1);
  rb_define_method(SwigClassDoubleVector.klass, "back", VALUEFUNC(_wrap_DoubleVector_back), -1);
  rb_define_method(SwigClassDoubleVector.klass, "assign", VALUEFUNC(_wrap_DoubleVector_assign), -1);
  rb_define_method(SwigClassDoubleVector.klass, "resize", VALUEFUNC(_wrap_DoubleVector_resize), -1);
  rb_define_method(SwigClassDoubleVector.klass, "insert", VALUEFUNC(_wrap_DoubleVector_insert), -1);
  rb_define_method(SwigClassDoubleVector.klass, "reserve", VALUEFUNC(_wrap_DoubleVector_reserve), -1);
  rb_define_method(SwigClassDoubleVector.klass, "capacity", VALUEFUNC(_wrap_DoubleVector_capacity), -1);
  rb_define_method(SwigClassDoubleVector.klass, "map_bang", VALUEFUNC(_wrap_DoubleVector_map_bang), -1);
  rb_define_method(SwigClassDoubleVector.klass, "__delete__", VALUEFUNC(_wrap_DoubleVector___delete__), -1);
  SwigClassDoubleVector.mark = 0;
  SwigClassDoubleVector.destroy = (void (*)(void *)) free_std_vector_Sl_double_Sg_;
  SwigClassDoubleVector.trackObjects = 0;
  
  SwigClassIntVector.klass = rb_define_class_under(mSiTaxi, "IntVector", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, (void *) &SwigClassIntVector);
  rb_include_module(SwigClassIntVector.klass, rb_eval_string("Enumerable"));
  rb_define_alloc_func(SwigClassIntVector.klass, _wrap_IntVector_allocate);
  rb_define_method(SwigClassIntVector.klass, "initialize", VALUEFUNC(_wrap_new_IntVector), -1);
  rb_define_method(SwigClassIntVector.klass, "dup", VALUEFUNC(_wrap_IntVector_dup), -1);
  rb_define_method(SwigClassIntVector.klass, "inspect", VALUEFUNC(_wrap_IntVector_inspect), -1);
  rb_define_method(SwigClassIntVector.klass, "to_a", VALUEFUNC(_wrap_IntVector_to_a), -1);
  rb_define_method(SwigClassIntVector.klass, "to_s", VALUEFUNC(_wrap_IntVector_to_s), -1);
  rb_define_method(SwigClassIntVector.klass, "slice", VALUEFUNC(_wrap_IntVector_slice), -1);
  rb_define_method(SwigClassIntVector.klass, "each", VALUEFUNC(_wrap_IntVector_each), -1);
  rb_define_method(SwigClassIntVector.klass, "select", VALUEFUNC(_wrap_IntVector_select), -1);
  rb_define_method(SwigClassIntVector.klass, "reject!", VALUEFUNC(_wrap_IntVector_rejectN___), -1);
  rb_define_alias(SwigClassIntVector.klass, "delete_if", "reject!");
  rb_define_method(SwigClassIntVector.klass, "delete_at", VALUEFUNC(_wrap_IntVector_delete_at), -1);
  rb_define_method(SwigClassIntVector.klass, "__delete2__", VALUEFUNC(_wrap_IntVector___delete2__), -1);
  rb_define_method(SwigClassIntVector.klass, "pop", VALUEFUNC(_wrap_IntVector_pop), -1);
  rb_define_method(SwigClassIntVector.klass, "push", VALUEFUNC(_wrap_IntVector_push), -1);
  rb_define_alias(SwigClassIntVector.klass, "<<", "push");
  rb_define_method(SwigClassIntVector.klass, "reject", VALUEFUNC(_wrap_IntVector_reject), -1);
  rb_define_method(SwigClassIntVector.klass, "at", VALUEFUNC(_wrap_IntVector_at), -1);
  rb_define_method(SwigClassIntVector.klass, "[]", VALUEFUNC(_wrap_IntVector___getitem__), -1);
  rb_define_method(SwigClassIntVector.klass, "[]=", VALUEFUNC(_wrap_IntVector___setitem__), -1);
  rb_define_method(SwigClassIntVector.klass, "shift", VALUEFUNC(_wrap_IntVector_shift), -1);
  rb_define_method(SwigClassIntVector.klass, "unshift", VALUEFUNC(_wrap_IntVector_unshift), -1);
  rb_define_method(SwigClassIntVector.klass, "empty?", VALUEFUNC(_wrap_IntVector_emptyq___), -1);
  rb_define_method(SwigClassIntVector.klass, "size", VALUEFUNC(_wrap_IntVector_size), -1);
  rb_define_method(SwigClassIntVector.klass, "clear", VALUEFUNC(_wrap_IntVector_clear), -1);
  rb_define_method(SwigClassIntVector.klass, "swap", VALUEFUNC(_wrap_IntVector_swap), -1);
  rb_define_method(SwigClassIntVector.klass, "get_allocator", VALUEFUNC(_wrap_IntVector_get_allocator), -1);
  rb_define_method(SwigClassIntVector.klass, "begin", VALUEFUNC(_wrap_IntVector_begin), -1);
  rb_define_method(SwigClassIntVector.klass, "end", VALUEFUNC(_wrap_IntVector_end), -1);
  rb_define_method(SwigClassIntVector.klass, "rbegin", VALUEFUNC(_wrap_IntVector_rbegin), -1);
  rb_define_method(SwigClassIntVector.klass, "rend", VALUEFUNC(_wrap_IntVector_rend), -1);
  rb_define_method(SwigClassIntVector.klass, "erase", VALUEFUNC(_wrap_IntVector_erase), -1);
  rb_define_method(SwigClassIntVector.klass, "front", VALUEFUNC(_wrap_IntVector_front), -1);
  rb_define_method(SwigClassIntVector.klass, "back", VALUEFUNC(_wrap_IntVector_back), -1);
  rb_define_method(SwigClassIntVector.klass, "assign", VALUEFUNC(_wrap_IntVector_assign), -1);
  rb_define_method(SwigClassIntVector.klass, "resize", VALUEFUNC(_wrap_IntVector_resize), -1);
  rb_define_method(SwigClassIntVector.klass, "insert", VALUEFUNC(_wrap_IntVector_insert), -1);
  rb_define_method(SwigClassIntVector.klass, "reserve", VALUEFUNC(_wrap_IntVector_reserve), -1);
  rb_define_method(SwigClassIntVector.klass, "capacity", VALUEFUNC(_wrap_IntVector_capacity), -1);
  rb_define_method(SwigClassIntVector.klass, "map_bang", VALUEFUNC(_wrap_IntVector_map_bang), -1);
  rb_define_method(SwigClassIntVector.klass, "__delete__", VALUEFUNC(_wrap_IntVector___delete__), -1);
  SwigClassIntVector.mark = 0;
  SwigClassIntVector.destroy = (void (*)(void *)) free_std_vector_Sl_int_Sg_;
  SwigClassIntVector.trackObjects = 0;
  
  SwigClassIntQueue.klass = rb_define_class_under(mSiTaxi, "IntQueue", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_std__queueT_int_std__dequeT_int_std__allocatorT_int_t_t_t, (void *) &SwigClassIntQueue);
  rb_define_alloc_func(SwigClassIntQueue.klass, _wrap_IntQueue_allocate);
  rb_define_method(SwigClassIntQueue.klass, "initialize", VALUEFUNC(_wrap_new_IntQueue), -1);
  rb_define_method(SwigClassIntQueue.klass, "empty?", VALUEFUNC(_wrap_IntQueue_emptyq___), -1);
  rb_define_method(SwigClassIntQueue.klass, "size", VALUEFUNC(_wrap_IntQueue_size), -1);
  rb_define_method(SwigClassIntQueue.klass, "front", VALUEFUNC(_wrap_IntQueue_front), -1);
  rb_define_method(SwigClassIntQueue.klass, "back", VALUEFUNC(_wrap_IntQueue_back), -1);
  rb_define_method(SwigClassIntQueue.klass, "pop", VALUEFUNC(_wrap_IntQueue_pop), -1);
  rb_define_method(SwigClassIntQueue.klass, "push", VALUEFUNC(_wrap_IntQueue_push), -1);
  rb_define_alias(SwigClassIntQueue.klass, "<<", "push");
  SwigClassIntQueue.mark = 0;
  SwigClassIntQueue.destroy = (void (*)(void *)) free_std_queue_Sl_int_Sg_;
  SwigClassIntQueue.trackObjects = 0;
  
  SwigClassNaturalHistogramVector.klass = rb_define_class_under(mSiTaxi, "NaturalHistogramVector", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_si_taxi__NaturalHistogram_std__allocatorT_si_taxi__NaturalHistogram_t_t, (void *) &SwigClassNaturalHistogramVector);
  rb_include_module(SwigClassNaturalHistogramVector.klass, rb_eval_string("Enumerable"));
  rb_define_alloc_func(SwigClassNaturalHistogramVector.klass, _wrap_NaturalHistogramVector_allocate);
  rb_define_method(SwigClassNaturalHistogramVector.klass, "initialize", VALUEFUNC(_wrap_new_NaturalHistogramVector), -1);
  rb_define_method(SwigClassNaturalHistogramVector.klass, "dup", VALUEFUNC(_wrap_NaturalHistogramVector_dup), -1);
  rb_define_method(SwigClassNaturalHistogramVector.klass, "inspect", VALUEFUNC(_wrap_NaturalHistogramVector_inspect), -1);
  rb_define_method(SwigClassNaturalHistogramVector.klass, "to_a", VALUEFUNC(_wrap_NaturalHistogramVector_to_a), -1);
  rb_define_method(SwigClassNaturalHistogramVector.klass, "to_s", VALUEFUNC(_wrap_NaturalHistogramVector_to_s), -1);
  rb_define_method(SwigClassNaturalHistogramVector.klass, "slice", VALUEFUNC(_wrap_NaturalHistogramVector_slice), -1);
  rb_define_method(SwigClassNaturalHistogramVector.klass, "each", VALUEFUNC(_wrap_NaturalHistogramVector_each), -1);
  rb_define_method(SwigClassNaturalHistogramVector.klass, "select", VALUEFUNC(_wrap_NaturalHistogramVector_select), -1);
  rb_define_method(SwigClassNaturalHistogramVector.klass, "reject!", VALUEFUNC(_wrap_NaturalHistogramVector_rejectN___), -1);
  rb_define_alias(SwigClassNaturalHistogramVector.klass, "delete_if", "reject!");
  rb_define_method(SwigClassNaturalHistogramVector.klass, "delete_at", VALUEFUNC(_wrap_NaturalHistogramVector_delete_at), -1);
  rb_define_method(SwigClassNaturalHistogramVector.klass, "__delete2__", VALUEFUNC(_wrap_NaturalHistogramVector___delete2__), -1);
  rb_define_method(SwigClassNaturalHistogramVector.klass, "pop", VALUEFUNC(_wrap_NaturalHistogramVector_pop), -1);
  rb_define_method(SwigClassNaturalHistogramVector.klass, "push", VALUEFUNC(_wrap_NaturalHistogramVector_push), -1);
  rb_define_alias(SwigClassNaturalHistogramVector.klass, "<<", "push");
  rb_define_method(SwigClassNaturalHistogramVector.klass, "reject", VALUEFUNC(_wrap_NaturalHistogramVector_reject), -1);
  rb_define_method(SwigClassNaturalHistogramVector.klass, "at", VALUEFUNC(_wrap_NaturalHistogramVector_at), -1);
  rb_define_method(SwigClassNaturalHistogramVector.klass, "[]", VALUEFUNC(_wrap_NaturalHistogramVector___getitem__), -1);
  rb_define_method(SwigClassNaturalHistogramVector.klass, "[]=", VALUEFUNC(_wrap_NaturalHistogramVector___setitem__), -1);
  rb_define_method(SwigClassNaturalHistogramVector.klass, "shift", VALUEFUNC(_wrap_NaturalHistogramVector_shift), -1);
  rb_define_method(SwigClassNaturalHistogramVector.klass, "unshift", VALUEFUNC(_wrap_NaturalHistogramVector_unshift), -1);
  rb_define_method(SwigClassNaturalHistogramVector.klass, "empty?", VALUEFUNC(_wrap_NaturalHistogramVector_emptyq___), -1);
  rb_define_method(SwigClassNaturalHistogramVector.klass, "size", VALUEFUNC(_wrap_NaturalHistogramVector_size), -1);
  rb_define_method(SwigClassNaturalHistogramVector.klass, "clear", VALUEFUNC(_wrap_NaturalHistogramVector_clear), -1);
  rb_define_method(SwigClassNaturalHistogramVector.klass, "swap", VALUEFUNC(_wrap_NaturalHistogramVector_swap), -1);
  rb_define_method(SwigClassNaturalHistogramVector.klass, "get_allocator", VALUEFUNC(_wrap_NaturalHistogramVector_get_allocator), -1);
  rb_define_method(SwigClassNaturalHistogramVector.klass, "begin", VALUEFUNC(_wrap_NaturalHistogramVector_begin), -1);
  rb_define_method(SwigClassNaturalHistogramVector.klass, "end", VALUEFUNC(_wrap_NaturalHistogramVector_end), -1);
  rb_define_method(SwigClassNaturalHistogramVector.klass, "rbegin", VALUEFUNC(_wrap_NaturalHistogramVector_rbegin), -1);
  rb_define_method(SwigClassNaturalHistogramVector.klass, "rend", VALUEFUNC(_wrap_NaturalHistogramVector_rend), -1);
  rb_define_method(SwigClassNaturalHistogramVector.klass, "erase", VALUEFUNC(_wrap_NaturalHistogramVector_erase), -1);
  rb_define_method(SwigClassNaturalHistogramVector.klass, "front", VALUEFUNC(_wrap_NaturalHistogramVector_front), -1);
  rb_define_method(SwigClassNaturalHistogramVector.klass, "back", VALUEFUNC(_wrap_NaturalHistogramVector_back), -1);
  rb_define_method(SwigClassNaturalHistogramVector.klass, "assign", VALUEFUNC(_wrap_NaturalHistogramVector_assign), -1);
  rb_define_method(SwigClassNaturalHistogramVector.klass, "resize", VALUEFUNC(_wrap_NaturalHistogramVector_resize), -1);
  rb_define_method(SwigClassNaturalHistogramVector.klass, "insert", VALUEFUNC(_wrap_NaturalHistogramVector_insert), -1);
  rb_define_method(SwigClassNaturalHistogramVector.klass, "reserve", VALUEFUNC(_wrap_NaturalHistogramVector_reserve), -1);
  rb_define_method(SwigClassNaturalHistogramVector.klass, "capacity", VALUEFUNC(_wrap_NaturalHistogramVector_capacity), -1);
  SwigClassNaturalHistogramVector.mark = 0;
  SwigClassNaturalHistogramVector.destroy = (void (*)(void *)) free_std_vector_Sl_si_taxi_NaturalHistogram_Sg_;
  SwigClassNaturalHistogramVector.trackObjects = 0;
  
  SwigClassBWVehicleVector.klass = rb_define_class_under(mSiTaxi, "BWVehicleVector", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_si_taxi__BWVehicle_std__allocatorT_si_taxi__BWVehicle_t_t, (void *) &SwigClassBWVehicleVector);
  rb_include_module(SwigClassBWVehicleVector.klass, rb_eval_string("Enumerable"));
  rb_define_alloc_func(SwigClassBWVehicleVector.klass, _wrap_BWVehicleVector_allocate);
  rb_define_method(SwigClassBWVehicleVector.klass, "initialize", VALUEFUNC(_wrap_new_BWVehicleVector), -1);
  rb_define_method(SwigClassBWVehicleVector.klass, "dup", VALUEFUNC(_wrap_BWVehicleVector_dup), -1);
  rb_define_method(SwigClassBWVehicleVector.klass, "inspect", VALUEFUNC(_wrap_BWVehicleVector_inspect), -1);
  rb_define_method(SwigClassBWVehicleVector.klass, "to_a", VALUEFUNC(_wrap_BWVehicleVector_to_a), -1);
  rb_define_method(SwigClassBWVehicleVector.klass, "to_s", VALUEFUNC(_wrap_BWVehicleVector_to_s), -1);
  rb_define_method(SwigClassBWVehicleVector.klass, "slice", VALUEFUNC(_wrap_BWVehicleVector_slice), -1);
  rb_define_method(SwigClassBWVehicleVector.klass, "each", VALUEFUNC(_wrap_BWVehicleVector_each), -1);
  rb_define_method(SwigClassBWVehicleVector.klass, "select", VALUEFUNC(_wrap_BWVehicleVector_select), -1);
  rb_define_method(SwigClassBWVehicleVector.klass, "reject!", VALUEFUNC(_wrap_BWVehicleVector_rejectN___), -1);
  rb_define_alias(SwigClassBWVehicleVector.klass, "delete_if", "reject!");
  rb_define_method(SwigClassBWVehicleVector.klass, "delete_at", VALUEFUNC(_wrap_BWVehicleVector_delete_at), -1);
  rb_define_method(SwigClassBWVehicleVector.klass, "__delete2__", VALUEFUNC(_wrap_BWVehicleVector___delete2__), -1);
  rb_define_method(SwigClassBWVehicleVector.klass, "pop", VALUEFUNC(_wrap_BWVehicleVector_pop), -1);
  rb_define_method(SwigClassBWVehicleVector.klass, "push", VALUEFUNC(_wrap_BWVehicleVector_push), -1);
  rb_define_alias(SwigClassBWVehicleVector.klass, "<<", "push");
  rb_define_method(SwigClassBWVehicleVector.klass, "reject", VALUEFUNC(_wrap_BWVehicleVector_reject), -1);
  rb_define_method(SwigClassBWVehicleVector.klass, "at", VALUEFUNC(_wrap_BWVehicleVector_at), -1);
  rb_define_method(SwigClassBWVehicleVector.klass, "[]", VALUEFUNC(_wrap_BWVehicleVector___getitem__), -1);
  rb_define_method(SwigClassBWVehicleVector.klass, "[]=", VALUEFUNC(_wrap_BWVehicleVector___setitem__), -1);
  rb_define_method(SwigClassBWVehicleVector.klass, "shift", VALUEFUNC(_wrap_BWVehicleVector_shift), -1);
  rb_define_method(SwigClassBWVehicleVector.klass, "unshift", VALUEFUNC(_wrap_BWVehicleVector_unshift), -1);
  rb_define_method(SwigClassBWVehicleVector.klass, "empty?", VALUEFUNC(_wrap_BWVehicleVector_emptyq___), -1);
  rb_define_method(SwigClassBWVehicleVector.klass, "size", VALUEFUNC(_wrap_BWVehicleVector_size), -1);
  rb_define_method(SwigClassBWVehicleVector.klass, "clear", VALUEFUNC(_wrap_BWVehicleVector_clear), -1);
  rb_define_method(SwigClassBWVehicleVector.klass, "swap", VALUEFUNC(_wrap_BWVehicleVector_swap), -1);
  rb_define_method(SwigClassBWVehicleVector.klass, "get_allocator", VALUEFUNC(_wrap_BWVehicleVector_get_allocator), -1);
  rb_define_method(SwigClassBWVehicleVector.klass, "begin", VALUEFUNC(_wrap_BWVehicleVector_begin), -1);
  rb_define_method(SwigClassBWVehicleVector.klass, "end", VALUEFUNC(_wrap_BWVehicleVector_end), -1);
  rb_define_method(SwigClassBWVehicleVector.klass, "rbegin", VALUEFUNC(_wrap_BWVehicleVector_rbegin), -1);
  rb_define_method(SwigClassBWVehicleVector.klass, "rend", VALUEFUNC(_wrap_BWVehicleVector_rend), -1);
  rb_define_method(SwigClassBWVehicleVector.klass, "erase", VALUEFUNC(_wrap_BWVehicleVector_erase), -1);
  rb_define_method(SwigClassBWVehicleVector.klass, "front", VALUEFUNC(_wrap_BWVehicleVector_front), -1);
  rb_define_method(SwigClassBWVehicleVector.klass, "back", VALUEFUNC(_wrap_BWVehicleVector_back), -1);
  rb_define_method(SwigClassBWVehicleVector.klass, "assign", VALUEFUNC(_wrap_BWVehicleVector_assign), -1);
  rb_define_method(SwigClassBWVehicleVector.klass, "resize", VALUEFUNC(_wrap_BWVehicleVector_resize), -1);
  rb_define_method(SwigClassBWVehicleVector.klass, "insert", VALUEFUNC(_wrap_BWVehicleVector_insert), -1);
  rb_define_method(SwigClassBWVehicleVector.klass, "reserve", VALUEFUNC(_wrap_BWVehicleVector_reserve), -1);
  rb_define_method(SwigClassBWVehicleVector.klass, "capacity", VALUEFUNC(_wrap_BWVehicleVector_capacity), -1);
  SwigClassBWVehicleVector.mark = 0;
  SwigClassBWVehicleVector.destroy = (void (*)(void *)) free_std_vector_Sl_si_taxi_BWVehicle_Sg_;
  SwigClassBWVehicleVector.trackObjects = 0;
  
  SwigClassBWPaxQueue.klass = rb_define_class_under(mSiTaxi, "BWPaxQueue", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_std__queueT_si_taxi__BWPax_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t, (void *) &SwigClassBWPaxQueue);
  rb_define_alloc_func(SwigClassBWPaxQueue.klass, _wrap_BWPaxQueue_allocate);
  rb_define_method(SwigClassBWPaxQueue.klass, "initialize", VALUEFUNC(_wrap_new_BWPaxQueue), -1);
  rb_define_method(SwigClassBWPaxQueue.klass, "empty?", VALUEFUNC(_wrap_BWPaxQueue_emptyq___), -1);
  rb_define_method(SwigClassBWPaxQueue.klass, "size", VALUEFUNC(_wrap_BWPaxQueue_size), -1);
  rb_define_method(SwigClassBWPaxQueue.klass, "front", VALUEFUNC(_wrap_BWPaxQueue_front), -1);
  rb_define_method(SwigClassBWPaxQueue.klass, "back", VALUEFUNC(_wrap_BWPaxQueue_back), -1);
  rb_define_method(SwigClassBWPaxQueue.klass, "pop", VALUEFUNC(_wrap_BWPaxQueue_pop), -1);
  rb_define_method(SwigClassBWPaxQueue.klass, "push", VALUEFUNC(_wrap_BWPaxQueue_push), -1);
  rb_define_alias(SwigClassBWPaxQueue.klass, "<<", "push");
  SwigClassBWPaxQueue.mark = 0;
  SwigClassBWPaxQueue.destroy = (void (*)(void *)) free_std_queue_Sl_si_taxi_BWPax_Sg_;
  SwigClassBWPaxQueue.trackObjects = 0;
  
  SwigClassBWSimStatsPaxRecordVector.klass = rb_define_class_under(mSiTaxi, "BWSimStatsPaxRecordVector", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_si_taxi__BWSimStatsPaxRecord_std__allocatorT_si_taxi__BWSimStatsPaxRecord_t_t, (void *) &SwigClassBWSimStatsPaxRecordVector);
  rb_include_module(SwigClassBWSimStatsPaxRecordVector.klass, rb_eval_string("Enumerable"));
  rb_define_alloc_func(SwigClassBWSimStatsPaxRecordVector.klass, _wrap_BWSimStatsPaxRecordVector_allocate);
  rb_define_method(SwigClassBWSimStatsPaxRecordVector.klass, "initialize", VALUEFUNC(_wrap_new_BWSimStatsPaxRecordVector), -1);
  rb_define_method(SwigClassBWSimStatsPaxRecordVector.klass, "dup", VALUEFUNC(_wrap_BWSimStatsPaxRecordVector_dup), -1);
  rb_define_method(SwigClassBWSimStatsPaxRecordVector.klass, "inspect", VALUEFUNC(_wrap_BWSimStatsPaxRecordVector_inspect), -1);
  rb_define_method(SwigClassBWSimStatsPaxRecordVector.klass, "to_a", VALUEFUNC(_wrap_BWSimStatsPaxRecordVector_to_a), -1);
  rb_define_method(SwigClassBWSimStatsPaxRecordVector.klass, "to_s", VALUEFUNC(_wrap_BWSimStatsPaxRecordVector_to_s), -1);
  rb_define_method(SwigClassBWSimStatsPaxRecordVector.klass, "slice", VALUEFUNC(_wrap_BWSimStatsPaxRecordVector_slice), -1);
  rb_define_method(SwigClassBWSimStatsPaxRecordVector.klass, "each", VALUEFUNC(_wrap_BWSimStatsPaxRecordVector_each), -1);
  rb_define_method(SwigClassBWSimStatsPaxRecordVector.klass, "select", VALUEFUNC(_wrap_BWSimStatsPaxRecordVector_select), -1);
  rb_define_method(SwigClassBWSimStatsPaxRecordVector.klass, "reject!", VALUEFUNC(_wrap_BWSimStatsPaxRecordVector_rejectN___), -1);
  rb_define_alias(SwigClassBWSimStatsPaxRecordVector.klass, "delete_if", "reject!");
  rb_define_method(SwigClassBWSimStatsPaxRecordVector.klass, "delete_at", VALUEFUNC(_wrap_BWSimStatsPaxRecordVector_delete_at), -1);
  rb_define_method(SwigClassBWSimStatsPaxRecordVector.klass, "__delete2__", VALUEFUNC(_wrap_BWSimStatsPaxRecordVector___delete2__), -1);
  rb_define_method(SwigClassBWSimStatsPaxRecordVector.klass, "pop", VALUEFUNC(_wrap_BWSimStatsPaxRecordVector_pop), -1);
  rb_define_method(SwigClassBWSimStatsPaxRecordVector.klass, "push", VALUEFUNC(_wrap_BWSimStatsPaxRecordVector_push), -1);
  rb_define_alias(SwigClassBWSimStatsPaxRecordVector.klass, "<<", "push");
  rb_define_method(SwigClassBWSimStatsPaxRecordVector.klass, "reject", VALUEFUNC(_wrap_BWSimStatsPaxRecordVector_reject), -1);
  rb_define_method(SwigClassBWSimStatsPaxRecordVector.klass, "at", VALUEFUNC(_wrap_BWSimStatsPaxRecordVector_at), -1);
  rb_define_method(SwigClassBWSimStatsPaxRecordVector.klass, "[]", VALUEFUNC(_wrap_BWSimStatsPaxRecordVector___getitem__), -1);
  rb_define_method(SwigClassBWSimStatsPaxRecordVector.klass, "[]=", VALUEFUNC(_wrap_BWSimStatsPaxRecordVector___setitem__), -1);
  rb_define_method(SwigClassBWSimStatsPaxRecordVector.klass, "shift", VALUEFUNC(_wrap_BWSimStatsPaxRecordVector_shift), -1);
  rb_define_method(SwigClassBWSimStatsPaxRecordVector.klass, "unshift", VALUEFUNC(_wrap_BWSimStatsPaxRecordVector_unshift), -1);
  rb_define_method(SwigClassBWSimStatsPaxRecordVector.klass, "empty?", VALUEFUNC(_wrap_BWSimStatsPaxRecordVector_emptyq___), -1);
  rb_define_method(SwigClassBWSimStatsPaxRecordVector.klass, "size", VALUEFUNC(_wrap_BWSimStatsPaxRecordVector_size), -1);
  rb_define_method(SwigClassBWSimStatsPaxRecordVector.klass, "clear", VALUEFUNC(_wrap_BWSimStatsPaxRecordVector_clear), -1);
  rb_define_method(SwigClassBWSimStatsPaxRecordVector.klass, "swap", VALUEFUNC(_wrap_BWSimStatsPaxRecordVector_swap), -1);
  rb_define_method(SwigClassBWSimStatsPaxRecordVector.klass, "get_allocator", VALUEFUNC(_wrap_BWSimStatsPaxRecordVector_get_allocator), -1);
  rb_define_method(SwigClassBWSimStatsPaxRecordVector.klass, "begin", VALUEFUNC(_wrap_BWSimStatsPaxRecordVector_begin), -1);
  rb_define_method(SwigClassBWSimStatsPaxRecordVector.klass, "end", VALUEFUNC(_wrap_BWSimStatsPaxRecordVector_end), -1);
  rb_define_method(SwigClassBWSimStatsPaxRecordVector.klass, "rbegin", VALUEFUNC(_wrap_BWSimStatsPaxRecordVector_rbegin), -1);
  rb_define_method(SwigClassBWSimStatsPaxRecordVector.klass, "rend", VALUEFUNC(_wrap_BWSimStatsPaxRecordVector_rend), -1);
  rb_define_method(SwigClassBWSimStatsPaxRecordVector.klass, "erase", VALUEFUNC(_wrap_BWSimStatsPaxRecordVector_erase), -1);
  rb_define_method(SwigClassBWSimStatsPaxRecordVector.klass, "front", VALUEFUNC(_wrap_BWSimStatsPaxRecordVector_front), -1);
  rb_define_method(SwigClassBWSimStatsPaxRecordVector.klass, "back", VALUEFUNC(_wrap_BWSimStatsPaxRecordVector_back), -1);
  rb_define_method(SwigClassBWSimStatsPaxRecordVector.klass, "assign", VALUEFUNC(_wrap_BWSimStatsPaxRecordVector_assign), -1);
  rb_define_method(SwigClassBWSimStatsPaxRecordVector.klass, "resize", VALUEFUNC(_wrap_BWSimStatsPaxRecordVector_resize), -1);
  rb_define_method(SwigClassBWSimStatsPaxRecordVector.klass, "insert", VALUEFUNC(_wrap_BWSimStatsPaxRecordVector_insert), -1);
  rb_define_method(SwigClassBWSimStatsPaxRecordVector.klass, "reserve", VALUEFUNC(_wrap_BWSimStatsPaxRecordVector_reserve), -1);
  rb_define_method(SwigClassBWSimStatsPaxRecordVector.klass, "capacity", VALUEFUNC(_wrap_BWSimStatsPaxRecordVector_capacity), -1);
  SwigClassBWSimStatsPaxRecordVector.mark = 0;
  SwigClassBWSimStatsPaxRecordVector.destroy = (void (*)(void *)) free_std_vector_Sl_si_taxi_BWSimStatsPaxRecord_Sg_;
  SwigClassBWSimStatsPaxRecordVector.trackObjects = 0;
  rb_define_module_function(mSiTaxi, "seed_rng", VALUEFUNC(_wrap_seed_rng), -1);
  rb_define_module_function(mSiTaxi, "register_sigsegv_handler", VALUEFUNC(_wrap_register_sigsegv_handler), -1);
  rb_define_singleton_method(mSiTaxi, "SIZE_T_MAX", VALUEFUNC(_wrap_SIZE_T_MAX_get), 0);
  rb_define_singleton_method(mSiTaxi, "rng", VALUEFUNC(_wrap_rng_get), 0);
  rb_define_singleton_method(mSiTaxi, "rng=", VALUEFUNC(_wrap_rng_set), 1);
  
  SwigClassException.klass = rb_define_class_under(mSiTaxi, "Exception", rb_eRuntimeError);
  SWIG_TypeClientData(SWIGTYPE_p_si_taxi__Exception, (void *) &SwigClassException);
  rb_define_alloc_func(SwigClassException.klass, _wrap_Exception_allocate);
  rb_define_method(SwigClassException.klass, "initialize", VALUEFUNC(_wrap_new_Exception), -1);
  rb_define_method(SwigClassException.klass, "what", VALUEFUNC(_wrap_Exception_what), -1);
  SwigClassException.mark = 0;
  SwigClassException.destroy = (void (*)(void *)) free_si_taxi_Exception;
  SwigClassException.trackObjects = 0;
  
  SwigClassError.klass = rb_define_class_under(mSiTaxi, "Error", ((swig_class *) SWIGTYPE_p_si_taxi__Exception->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_si_taxi__Error, (void *) &SwigClassError);
  rb_define_alloc_func(SwigClassError.klass, _wrap_Error_allocate);
  rb_define_method(SwigClassError.klass, "initialize", VALUEFUNC(_wrap_new_Error), -1);
  rb_define_method(SwigClassError.klass, "line", VALUEFUNC(_wrap_Error_line), -1);
  rb_define_method(SwigClassError.klass, "file", VALUEFUNC(_wrap_Error_file), -1);
  rb_define_method(SwigClassError.klass, "function", VALUEFUNC(_wrap_Error_function), -1);
  rb_define_method(SwigClassError.klass, "stack_trace", VALUEFUNC(_wrap_Error_stack_trace), -1);
  SwigClassError.mark = 0;
  SwigClassError.destroy = (void (*)(void *)) free_si_taxi_Error;
  SwigClassError.trackObjects = 0;
  
  SwigClassEmpiricalSampler.klass = rb_define_class_under(mSiTaxi, "EmpiricalSampler", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_si_taxi__EmpiricalSampler, (void *) &SwigClassEmpiricalSampler);
  rb_define_alloc_func(SwigClassEmpiricalSampler.klass, _wrap_EmpiricalSampler_allocate);
  rb_define_method(SwigClassEmpiricalSampler.klass, "initialize", VALUEFUNC(_wrap_new_EmpiricalSampler), -1);
  rb_define_singleton_method(SwigClassEmpiricalSampler.klass, "from_pmf", VALUEFUNC(_wrap_EmpiricalSampler_from_pmf), -1);
  rb_define_method(SwigClassEmpiricalSampler.klass, "sup", VALUEFUNC(_wrap_EmpiricalSampler_sup), -1);
  rb_define_method(SwigClassEmpiricalSampler.klass, "pick", VALUEFUNC(_wrap_EmpiricalSampler_pick), -1);
  rb_define_method(SwigClassEmpiricalSampler.klass, "sample", VALUEFUNC(_wrap_EmpiricalSampler_sample), -1);
  SwigClassEmpiricalSampler.mark = 0;
  SwigClassEmpiricalSampler.destroy = (void (*)(void *)) free_si_taxi_EmpiricalSampler;
  SwigClassEmpiricalSampler.trackObjects = 0;
  
  SwigClassNaturalHistogram.klass = rb_define_class_under(mSiTaxi, "NaturalHistogram", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_si_taxi__NaturalHistogram, (void *) &SwigClassNaturalHistogram);
  rb_define_alloc_func(SwigClassNaturalHistogram.klass, _wrap_NaturalHistogram_allocate);
  rb_define_method(SwigClassNaturalHistogram.klass, "initialize", VALUEFUNC(_wrap_new_NaturalHistogram), -1);
  rb_define_method(SwigClassNaturalHistogram.klass, "frequency=", VALUEFUNC(_wrap_NaturalHistogram_frequency_set), -1);
  rb_define_method(SwigClassNaturalHistogram.klass, "frequency", VALUEFUNC(_wrap_NaturalHistogram_frequency_get), -1);
  rb_define_method(SwigClassNaturalHistogram.klass, "increment", VALUEFUNC(_wrap_NaturalHistogram_increment), -1);
  rb_define_method(SwigClassNaturalHistogram.klass, "accumulate", VALUEFUNC(_wrap_NaturalHistogram_accumulate), -1);
  rb_define_method(SwigClassNaturalHistogram.klass, "clear", VALUEFUNC(_wrap_NaturalHistogram_clear), -1);
  rb_define_method(SwigClassNaturalHistogram.klass, "count", VALUEFUNC(_wrap_NaturalHistogram_count), -1);
  rb_define_method(SwigClassNaturalHistogram.klass, "mean", VALUEFUNC(_wrap_NaturalHistogram_mean), -1);
  rb_define_method(SwigClassNaturalHistogram.klass, "central_moment", VALUEFUNC(_wrap_NaturalHistogram_central_moment), -1);
  SwigClassNaturalHistogram.mark = 0;
  SwigClassNaturalHistogram.destroy = (void (*)(void *)) free_si_taxi_NaturalHistogram;
  SwigClassNaturalHistogram.trackObjects = 0;
  
  SwigClassODHistogram.klass = rb_define_class_under(mSiTaxi, "ODHistogram", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_si_taxi__ODHistogram, (void *) &SwigClassODHistogram);
  rb_define_alloc_func(SwigClassODHistogram.klass, _wrap_ODHistogram_allocate);
  rb_define_method(SwigClassODHistogram.klass, "initialize", VALUEFUNC(_wrap_new_ODHistogram), -1);
  rb_define_method(SwigClassODHistogram.klass, "num_stations", VALUEFUNC(_wrap_ODHistogram_num_stations), -1);
  rb_define_method(SwigClassODHistogram.klass, "increment", VALUEFUNC(_wrap_ODHistogram_increment), -1);
  rb_define_method(SwigClassODHistogram.klass, "accumulate", VALUEFUNC(_wrap_ODHistogram_accumulate), -1);
  rb_define_method(SwigClassODHistogram.klass, "clear", VALUEFUNC(_wrap_ODHistogram_clear), -1);
  rb_define_method(SwigClassODHistogram.klass, "call", VALUEFUNC(_wrap_ODHistogram___call__), -1);
  rb_define_method(SwigClassODHistogram.klass, "max_weight", VALUEFUNC(_wrap_ODHistogram_max_weight), -1);
  rb_define_method(SwigClassODHistogram.klass, "max_weight_in_row", VALUEFUNC(_wrap_ODHistogram_max_weight_in_row), -1);
  rb_define_method(SwigClassODHistogram.klass, "od_matrix", VALUEFUNC(_wrap_ODHistogram_od_matrix), -1);
  SwigClassODHistogram.mark = 0;
  SwigClassODHistogram.destroy = (void (*)(void *)) free_si_taxi_ODHistogram;
  SwigClassODHistogram.trackObjects = 0;
  rb_define_module_function(mSiTaxi, "<<", VALUEFUNC(_wrap___lshift__), -1);
  
  SwigClassODMatrixWrapper.klass = rb_define_class_under(mSiTaxi, "ODMatrixWrapper", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_si_taxi__ODMatrixWrapper, (void *) &SwigClassODMatrixWrapper);
  rb_define_alloc_func(SwigClassODMatrixWrapper.klass, _wrap_ODMatrixWrapper_allocate);
  rb_define_method(SwigClassODMatrixWrapper.klass, "initialize", VALUEFUNC(_wrap_new_ODMatrixWrapper), -1);
  rb_define_method(SwigClassODMatrixWrapper.klass, "num_stations", VALUEFUNC(_wrap_ODMatrixWrapper_num_stations), -1);
  rb_define_method(SwigClassODMatrixWrapper.klass, "expected_interarrival_time", VALUEFUNC(_wrap_ODMatrixWrapper_expected_interarrival_time), -1);
  rb_define_method(SwigClassODMatrixWrapper.klass, "od_matrix", VALUEFUNC(_wrap_ODMatrixWrapper_od_matrix), -1);
  rb_define_method(SwigClassODMatrixWrapper.klass, "at", VALUEFUNC(_wrap_ODMatrixWrapper_at), -1);
  rb_define_method(SwigClassODMatrixWrapper.klass, "trip_prob", VALUEFUNC(_wrap_ODMatrixWrapper_trip_prob), -1);
  rb_define_method(SwigClassODMatrixWrapper.klass, "trip_prob_matrix", VALUEFUNC(_wrap_ODMatrixWrapper_trip_prob_matrix), -1);
  rb_define_method(SwigClassODMatrixWrapper.klass, "rate_from", VALUEFUNC(_wrap_ODMatrixWrapper_rate_from), -1);
  rb_define_method(SwigClassODMatrixWrapper.klass, "rate_to", VALUEFUNC(_wrap_ODMatrixWrapper_rate_to), -1);
  rb_define_method(SwigClassODMatrixWrapper.klass, "poisson_origin_pmf", VALUEFUNC(_wrap_ODMatrixWrapper_poisson_origin_pmf), -1);
  rb_define_method(SwigClassODMatrixWrapper.klass, "poisson_trip_pmf", VALUEFUNC(_wrap_ODMatrixWrapper_poisson_trip_pmf), -1);
  rb_define_method(SwigClassODMatrixWrapper.klass, "poisson_origin_cdf_complement", VALUEFUNC(_wrap_ODMatrixWrapper_poisson_origin_cdf_complement), -1);
  rb_define_method(SwigClassODMatrixWrapper.klass, "poisson_trip_cdf_complement", VALUEFUNC(_wrap_ODMatrixWrapper_poisson_trip_cdf_complement), -1);
  rb_define_method(SwigClassODMatrixWrapper.klass, "sample", VALUEFUNC(_wrap_ODMatrixWrapper_sample), -1);
  SwigClassODMatrixWrapper.mark = 0;
  SwigClassODMatrixWrapper.destroy = (void (*)(void *)) free_si_taxi_ODMatrixWrapper;
  SwigClassODMatrixWrapper.trackObjects = 0;
  
  SwigClassBWVehicle.klass = rb_define_class_under(mSiTaxi, "BWVehicle", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_si_taxi__BWVehicle, (void *) &SwigClassBWVehicle);
  rb_define_alloc_func(SwigClassBWVehicle.klass, _wrap_BWVehicle_allocate);
  rb_define_method(SwigClassBWVehicle.klass, "initialize", VALUEFUNC(_wrap_new_BWVehicle), -1);
  rb_define_method(SwigClassBWVehicle.klass, "origin=", VALUEFUNC(_wrap_BWVehicle_origin_set), -1);
  rb_define_method(SwigClassBWVehicle.klass, "origin", VALUEFUNC(_wrap_BWVehicle_origin_get), -1);
  rb_define_method(SwigClassBWVehicle.klass, "destin=", VALUEFUNC(_wrap_BWVehicle_destin_set), -1);
  rb_define_method(SwigClassBWVehicle.klass, "destin", VALUEFUNC(_wrap_BWVehicle_destin_get), -1);
  rb_define_method(SwigClassBWVehicle.klass, "arrive=", VALUEFUNC(_wrap_BWVehicle_arrive_set), -1);
  rb_define_method(SwigClassBWVehicle.klass, "arrive", VALUEFUNC(_wrap_BWVehicle_arrive_get), -1);
  SwigClassBWVehicle.mark = 0;
  SwigClassBWVehicle.destroy = (void (*)(void *)) free_si_taxi_BWVehicle;
  SwigClassBWVehicle.trackObjects = 0;
  
  SwigClassBWPax.klass = rb_define_class_under(mSiTaxi, "BWPax", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_si_taxi__BWPax, (void *) &SwigClassBWPax);
  rb_define_alloc_func(SwigClassBWPax.klass, _wrap_BWPax_allocate);
  rb_define_method(SwigClassBWPax.klass, "initialize", VALUEFUNC(_wrap_new_BWPax), -1);
  rb_define_method(SwigClassBWPax.klass, "origin=", VALUEFUNC(_wrap_BWPax_origin_set), -1);
  rb_define_method(SwigClassBWPax.klass, "origin", VALUEFUNC(_wrap_BWPax_origin_get), -1);
  rb_define_method(SwigClassBWPax.klass, "destin=", VALUEFUNC(_wrap_BWPax_destin_set), -1);
  rb_define_method(SwigClassBWPax.klass, "destin", VALUEFUNC(_wrap_BWPax_destin_get), -1);
  rb_define_method(SwigClassBWPax.klass, "arrive=", VALUEFUNC(_wrap_BWPax_arrive_set), -1);
  rb_define_method(SwigClassBWPax.klass, "arrive", VALUEFUNC(_wrap_BWPax_arrive_get), -1);
  SwigClassBWPax.mark = 0;
  SwigClassBWPax.destroy = (void (*)(void *)) free_si_taxi_BWPax;
  SwigClassBWPax.trackObjects = 0;
  
  SwigClassBWPaxStream.klass = rb_define_class_under(mSiTaxi, "BWPaxStream", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_si_taxi__BWPaxStream, (void *) &SwigClassBWPaxStream);
  rb_undef_alloc_func(SwigClassBWPaxStream.klass);
  rb_define_method(SwigClassBWPaxStream.klass, "next_pax", VALUEFUNC(_wrap_BWPaxStream_next_pax), -1);
  rb_define_method(SwigClassBWPaxStream.klass, "reset", VALUEFUNC(_wrap_BWPaxStream_reset), -1);
  SwigClassBWPaxStream.mark = 0;
  SwigClassBWPaxStream.destroy = (void (*)(void *)) free_si_taxi_BWPaxStream;
  SwigClassBWPaxStream.trackObjects = 0;
  
  SwigClassBWSim.klass = rb_define_class_under(mSiTaxi, "BWSim", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_si_taxi__BWSim, (void *) &SwigClassBWSim);
  rb_define_alloc_func(SwigClassBWSim.klass, _wrap_BWSim_allocate);
  rb_define_method(SwigClassBWSim.klass, "initialize", VALUEFUNC(_wrap_new_BWSim), -1);
  rb_define_method(SwigClassBWSim.klass, "now=", VALUEFUNC(_wrap_BWSim_now_set), -1);
  rb_define_method(SwigClassBWSim.klass, "now", VALUEFUNC(_wrap_BWSim_now_get), -1);
  rb_define_method(SwigClassBWSim.klass, "strobe=", VALUEFUNC(_wrap_BWSim_strobe_set), -1);
  rb_define_method(SwigClassBWSim.klass, "strobe", VALUEFUNC(_wrap_BWSim_strobe_get), -1);
  rb_define_method(SwigClassBWSim.klass, "reactive=", VALUEFUNC(_wrap_BWSim_reactive_set), -1);
  rb_define_method(SwigClassBWSim.klass, "reactive", VALUEFUNC(_wrap_BWSim_reactive_get), -1);
  rb_define_method(SwigClassBWSim.klass, "proactive=", VALUEFUNC(_wrap_BWSim_proactive_set), -1);
  rb_define_method(SwigClassBWSim.klass, "proactive", VALUEFUNC(_wrap_BWSim_proactive_get), -1);
  rb_define_method(SwigClassBWSim.klass, "vehs=", VALUEFUNC(_wrap_BWSim_vehs_set), -1);
  rb_define_method(SwigClassBWSim.klass, "vehs", VALUEFUNC(_wrap_BWSim_vehs_get), -1);
  rb_define_method(SwigClassBWSim.klass, "trip_time=", VALUEFUNC(_wrap_BWSim_trip_time_set), -1);
  rb_define_method(SwigClassBWSim.klass, "trip_time", VALUEFUNC(_wrap_BWSim_trip_time_get), -1);
  rb_define_method(SwigClassBWSim.klass, "stats=", VALUEFUNC(_wrap_BWSim_stats_set), -1);
  rb_define_method(SwigClassBWSim.klass, "stats", VALUEFUNC(_wrap_BWSim_stats_get), -1);
  rb_define_method(SwigClassBWSim.klass, "num_stations", VALUEFUNC(_wrap_BWSim_num_stations), -1);
  rb_define_method(SwigClassBWSim.klass, "init", VALUEFUNC(_wrap_BWSim_init), -1);
  rb_define_method(SwigClassBWSim.klass, "add_vehicles_in_turn", VALUEFUNC(_wrap_BWSim_add_vehicles_in_turn), -1);
  rb_define_method(SwigClassBWSim.klass, "park_vehicles_in_turn", VALUEFUNC(_wrap_BWSim_park_vehicles_in_turn), -1);
  rb_define_method(SwigClassBWSim.klass, "run_to", VALUEFUNC(_wrap_BWSim_run_to), -1);
  rb_define_method(SwigClassBWSim.klass, "handle_pax", VALUEFUNC(_wrap_BWSim_handle_pax), -1);
  rb_define_method(SwigClassBWSim.klass, "handle_pax_stream", VALUEFUNC(_wrap_BWSim_handle_pax_stream), -1);
  rb_define_method(SwigClassBWSim.klass, "move_empty", VALUEFUNC(_wrap_BWSim_move_empty), -1);
  rb_define_method(SwigClassBWSim.klass, "move_empty_od", VALUEFUNC(_wrap_BWSim_move_empty_od), -1);
  rb_define_method(SwigClassBWSim.klass, "serve_pax", VALUEFUNC(_wrap_BWSim_serve_pax), -1);
  rb_define_method(SwigClassBWSim.klass, "num_vehicles_inbound", VALUEFUNC(_wrap_BWSim_num_vehicles_inbound), -1);
  rb_define_method(SwigClassBWSim.klass, "num_vehicles_immediately_inbound", VALUEFUNC(_wrap_BWSim_num_vehicles_immediately_inbound), -1);
  rb_define_method(SwigClassBWSim.klass, "num_vehicles_idle_by", VALUEFUNC(_wrap_BWSim_num_vehicles_idle_by), -1);
  rb_define_method(SwigClassBWSim.klass, "idle_veh_at", VALUEFUNC(_wrap_BWSim_idle_veh_at), -1);
  rb_define_method(SwigClassBWSim.klass, "count_idle_vehs", VALUEFUNC(_wrap_BWSim_count_idle_vehs), -1);
  SwigClassBWSim.mark = 0;
  SwigClassBWSim.destroy = (void (*)(void *)) free_si_taxi_BWSim;
  SwigClassBWSim.trackObjects = 0;
  
  SwigClassBWReactiveHandler.klass = rb_define_class_under(mSiTaxi, "BWReactiveHandler", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_si_taxi__BWReactiveHandler, (void *) &SwigClassBWReactiveHandler);
  rb_undef_alloc_func(SwigClassBWReactiveHandler.klass);
  rb_define_method(SwigClassBWReactiveHandler.klass, "init", VALUEFUNC(_wrap_BWReactiveHandler_init), -1);
  rb_define_method(SwigClassBWReactiveHandler.klass, "handle_pax", VALUEFUNC(_wrap_BWReactiveHandler_handle_pax), -1);
  rb_define_method(SwigClassBWReactiveHandler.klass, "sim=", VALUEFUNC(_wrap_BWReactiveHandler_sim_set), -1);
  rb_define_method(SwigClassBWReactiveHandler.klass, "sim", VALUEFUNC(_wrap_BWReactiveHandler_sim_get), -1);
  SwigClassBWReactiveHandler.mark = 0;
  SwigClassBWReactiveHandler.destroy = (void (*)(void *)) free_si_taxi_BWReactiveHandler;
  SwigClassBWReactiveHandler.trackObjects = 0;
  rb_define_module_function(mSiTaxi, "disown_BWProactiveHandler", VALUEFUNC(_wrap_disown_BWProactiveHandler), -1);
  
  SwigClassBWProactiveHandler.klass = rb_define_class_under(mSiTaxi, "BWProactiveHandler", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_si_taxi__BWProactiveHandler, (void *) &SwigClassBWProactiveHandler);
  rb_define_alloc_func(SwigClassBWProactiveHandler.klass, _wrap_BWProactiveHandler_allocate);
  rb_define_method(SwigClassBWProactiveHandler.klass, "initialize", VALUEFUNC(_wrap_new_BWProactiveHandler), -1);
  rb_define_method(SwigClassBWProactiveHandler.klass, "init", VALUEFUNC(_wrap_BWProactiveHandler_init), -1);
  rb_define_method(SwigClassBWProactiveHandler.klass, "handle_pax_served", VALUEFUNC(_wrap_BWProactiveHandler_handle_pax_served), -1);
  rb_define_method(SwigClassBWProactiveHandler.klass, "handle_idle", VALUEFUNC(_wrap_BWProactiveHandler_handle_idle), -1);
  rb_define_method(SwigClassBWProactiveHandler.klass, "handle_strobe", VALUEFUNC(_wrap_BWProactiveHandler_handle_strobe), -1);
  rb_define_method(SwigClassBWProactiveHandler.klass, "sim=", VALUEFUNC(_wrap_BWProactiveHandler_sim_set), -1);
  rb_define_method(SwigClassBWProactiveHandler.klass, "sim", VALUEFUNC(_wrap_BWProactiveHandler_sim_get), -1);
  SwigClassBWProactiveHandler.mark = 0;
  SwigClassBWProactiveHandler.destroy = (void (*)(void *)) free_si_taxi_BWProactiveHandler;
  SwigClassBWProactiveHandler.trackObjects = 0;
  
  SwigClassBWSimStats.klass = rb_define_class_under(mSiTaxi, "BWSimStats", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_si_taxi__BWSimStats, (void *) &SwigClassBWSimStats);
  rb_define_alloc_func(SwigClassBWSimStats.klass, _wrap_BWSimStats_allocate);
  rb_define_method(SwigClassBWSimStats.klass, "initialize", VALUEFUNC(_wrap_new_BWSimStats), -1);
  rb_define_method(SwigClassBWSimStats.klass, "init", VALUEFUNC(_wrap_BWSimStats_init), -1);
  rb_define_method(SwigClassBWSimStats.klass, "record_time_step_stats", VALUEFUNC(_wrap_BWSimStats_record_time_step_stats), -1);
  rb_define_method(SwigClassBWSimStats.klass, "record_pax_served", VALUEFUNC(_wrap_BWSimStats_record_pax_served), -1);
  rb_define_method(SwigClassBWSimStats.klass, "record_empty_trip", VALUEFUNC(_wrap_BWSimStats_record_empty_trip), -1);
  rb_define_method(SwigClassBWSimStats.klass, "sim=", VALUEFUNC(_wrap_BWSimStats_sim_set), -1);
  rb_define_method(SwigClassBWSimStats.klass, "sim", VALUEFUNC(_wrap_BWSimStats_sim_get), -1);
  SwigClassBWSimStats.mark = 0;
  SwigClassBWSimStats.destroy = (void (*)(void *)) free_si_taxi_BWSimStats;
  SwigClassBWSimStats.trackObjects = 0;
  
  SwigClassBWSimStatsDetailed.klass = rb_define_class_under(mSiTaxi, "BWSimStatsDetailed", ((swig_class *) SWIGTYPE_p_si_taxi__BWSimStats->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_si_taxi__BWSimStatsDetailed, (void *) &SwigClassBWSimStatsDetailed);
  rb_define_alloc_func(SwigClassBWSimStatsDetailed.klass, _wrap_BWSimStatsDetailed_allocate);
  rb_define_method(SwigClassBWSimStatsDetailed.klass, "initialize", VALUEFUNC(_wrap_new_BWSimStatsDetailed), -1);
  rb_define_method(SwigClassBWSimStatsDetailed.klass, "init", VALUEFUNC(_wrap_BWSimStatsDetailed_init), -1);
  rb_define_method(SwigClassBWSimStatsDetailed.klass, "record_time_step_stats", VALUEFUNC(_wrap_BWSimStatsDetailed_record_time_step_stats), -1);
  rb_define_method(SwigClassBWSimStatsDetailed.klass, "record_pax_served", VALUEFUNC(_wrap_BWSimStatsDetailed_record_pax_served), -1);
  rb_define_method(SwigClassBWSimStatsDetailed.klass, "record_empty_trip", VALUEFUNC(_wrap_BWSimStatsDetailed_record_empty_trip), -1);
  rb_define_method(SwigClassBWSimStatsDetailed.klass, "queue_at", VALUEFUNC(_wrap_BWSimStatsDetailed_queue_at), -1);
  rb_define_method(SwigClassBWSimStatsDetailed.klass, "pax_wait=", VALUEFUNC(_wrap_BWSimStatsDetailed_pax_wait_set), -1);
  rb_define_method(SwigClassBWSimStatsDetailed.klass, "pax_wait", VALUEFUNC(_wrap_BWSimStatsDetailed_pax_wait_get), -1);
  rb_define_method(SwigClassBWSimStatsDetailed.klass, "queue_len=", VALUEFUNC(_wrap_BWSimStatsDetailed_queue_len_set), -1);
  rb_define_method(SwigClassBWSimStatsDetailed.klass, "queue_len", VALUEFUNC(_wrap_BWSimStatsDetailed_queue_len_get), -1);
  rb_define_method(SwigClassBWSimStatsDetailed.klass, "idle_vehs=", VALUEFUNC(_wrap_BWSimStatsDetailed_idle_vehs_set), -1);
  rb_define_method(SwigClassBWSimStatsDetailed.klass, "idle_vehs", VALUEFUNC(_wrap_BWSimStatsDetailed_idle_vehs_get), -1);
  rb_define_method(SwigClassBWSimStatsDetailed.klass, "idle_vehs_total=", VALUEFUNC(_wrap_BWSimStatsDetailed_idle_vehs_total_set), -1);
  rb_define_method(SwigClassBWSimStatsDetailed.klass, "idle_vehs_total", VALUEFUNC(_wrap_BWSimStatsDetailed_idle_vehs_total_get), -1);
  rb_define_method(SwigClassBWSimStatsDetailed.klass, "pickups=", VALUEFUNC(_wrap_BWSimStatsDetailed_pickups_set), -1);
  rb_define_method(SwigClassBWSimStatsDetailed.klass, "pickups", VALUEFUNC(_wrap_BWSimStatsDetailed_pickups_get), -1);
  rb_define_method(SwigClassBWSimStatsDetailed.klass, "occupied_trips=", VALUEFUNC(_wrap_BWSimStatsDetailed_occupied_trips_set), -1);
  rb_define_method(SwigClassBWSimStatsDetailed.klass, "occupied_trips", VALUEFUNC(_wrap_BWSimStatsDetailed_occupied_trips_get), -1);
  rb_define_method(SwigClassBWSimStatsDetailed.klass, "empty_trips=", VALUEFUNC(_wrap_BWSimStatsDetailed_empty_trips_set), -1);
  rb_define_method(SwigClassBWSimStatsDetailed.klass, "empty_trips", VALUEFUNC(_wrap_BWSimStatsDetailed_empty_trips_get), -1);
  SwigClassBWSimStatsDetailed.mark = 0;
  SwigClassBWSimStatsDetailed.destroy = (void (*)(void *)) free_si_taxi_BWSimStatsDetailed;
  SwigClassBWSimStatsDetailed.trackObjects = 0;
  
  SwigClassBWSimStatsMeanPaxWait.klass = rb_define_class_under(mSiTaxi, "BWSimStatsMeanPaxWait", ((swig_class *) SWIGTYPE_p_si_taxi__BWSimStats->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_si_taxi__BWSimStatsMeanPaxWait, (void *) &SwigClassBWSimStatsMeanPaxWait);
  rb_define_alloc_func(SwigClassBWSimStatsMeanPaxWait.klass, _wrap_BWSimStatsMeanPaxWait_allocate);
  rb_define_method(SwigClassBWSimStatsMeanPaxWait.klass, "initialize", VALUEFUNC(_wrap_new_BWSimStatsMeanPaxWait), -1);
  rb_define_method(SwigClassBWSimStatsMeanPaxWait.klass, "init", VALUEFUNC(_wrap_BWSimStatsMeanPaxWait_init), -1);
  rb_define_method(SwigClassBWSimStatsMeanPaxWait.klass, "record_pax_served", VALUEFUNC(_wrap_BWSimStatsMeanPaxWait_record_pax_served), -1);
  rb_define_method(SwigClassBWSimStatsMeanPaxWait.klass, "mean_pax_wait=", VALUEFUNC(_wrap_BWSimStatsMeanPaxWait_mean_pax_wait_set), -1);
  rb_define_method(SwigClassBWSimStatsMeanPaxWait.klass, "mean_pax_wait", VALUEFUNC(_wrap_BWSimStatsMeanPaxWait_mean_pax_wait_get), -1);
  rb_define_method(SwigClassBWSimStatsMeanPaxWait.klass, "pax_count=", VALUEFUNC(_wrap_BWSimStatsMeanPaxWait_pax_count_set), -1);
  rb_define_method(SwigClassBWSimStatsMeanPaxWait.klass, "pax_count", VALUEFUNC(_wrap_BWSimStatsMeanPaxWait_pax_count_get), -1);
  SwigClassBWSimStatsMeanPaxWait.mark = 0;
  SwigClassBWSimStatsMeanPaxWait.destroy = (void (*)(void *)) free_si_taxi_BWSimStatsMeanPaxWait;
  SwigClassBWSimStatsMeanPaxWait.trackObjects = 0;
  
  SwigClassBWSimStatsPaxRecord.klass = rb_define_class_under(mSiTaxi, "BWSimStatsPaxRecord", ((swig_class *) SWIGTYPE_p_si_taxi__BWPax->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_si_taxi__BWSimStatsPaxRecord, (void *) &SwigClassBWSimStatsPaxRecord);
  rb_define_alloc_func(SwigClassBWSimStatsPaxRecord.klass, _wrap_BWSimStatsPaxRecord_allocate);
  rb_define_method(SwigClassBWSimStatsPaxRecord.klass, "initialize", VALUEFUNC(_wrap_new_BWSimStatsPaxRecord), -1);
  rb_define_method(SwigClassBWSimStatsPaxRecord.klass, "empty_origin=", VALUEFUNC(_wrap_BWSimStatsPaxRecord_empty_origin_set), -1);
  rb_define_method(SwigClassBWSimStatsPaxRecord.klass, "empty_origin", VALUEFUNC(_wrap_BWSimStatsPaxRecord_empty_origin_get), -1);
  rb_define_method(SwigClassBWSimStatsPaxRecord.klass, "pickup=", VALUEFUNC(_wrap_BWSimStatsPaxRecord_pickup_set), -1);
  rb_define_method(SwigClassBWSimStatsPaxRecord.klass, "pickup", VALUEFUNC(_wrap_BWSimStatsPaxRecord_pickup_get), -1);
  SwigClassBWSimStatsPaxRecord.mark = 0;
  SwigClassBWSimStatsPaxRecord.destroy = (void (*)(void *)) free_si_taxi_BWSimStatsPaxRecord;
  SwigClassBWSimStatsPaxRecord.trackObjects = 0;
  
  SwigClassBWSimStatsPaxRecorder.klass = rb_define_class_under(mSiTaxi, "BWSimStatsPaxRecorder", ((swig_class *) SWIGTYPE_p_si_taxi__BWSimStats->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_si_taxi__BWSimStatsPaxRecorder, (void *) &SwigClassBWSimStatsPaxRecorder);
  rb_define_alloc_func(SwigClassBWSimStatsPaxRecorder.klass, _wrap_BWSimStatsPaxRecorder_allocate);
  rb_define_method(SwigClassBWSimStatsPaxRecorder.klass, "initialize", VALUEFUNC(_wrap_new_BWSimStatsPaxRecorder), -1);
  rb_define_method(SwigClassBWSimStatsPaxRecorder.klass, "init", VALUEFUNC(_wrap_BWSimStatsPaxRecorder_init), -1);
  rb_define_method(SwigClassBWSimStatsPaxRecorder.klass, "record_pax_served", VALUEFUNC(_wrap_BWSimStatsPaxRecorder_record_pax_served), -1);
  rb_define_method(SwigClassBWSimStatsPaxRecorder.klass, "records=", VALUEFUNC(_wrap_BWSimStatsPaxRecorder_records_set), -1);
  rb_define_method(SwigClassBWSimStatsPaxRecorder.klass, "records", VALUEFUNC(_wrap_BWSimStatsPaxRecorder_records_get), -1);
  SwigClassBWSimStatsPaxRecorder.mark = 0;
  SwigClassBWSimStatsPaxRecorder.destroy = (void (*)(void *)) free_si_taxi_BWSimStatsPaxRecorder;
  SwigClassBWSimStatsPaxRecorder.trackObjects = 0;
  
  SwigClassBWNNHandler.klass = rb_define_class_under(mSiTaxi, "BWNNHandler", ((swig_class *) SWIGTYPE_p_si_taxi__BWReactiveHandler->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_si_taxi__BWNNHandler, (void *) &SwigClassBWNNHandler);
  rb_define_alloc_func(SwigClassBWNNHandler.klass, _wrap_BWNNHandler_allocate);
  rb_define_method(SwigClassBWNNHandler.klass, "initialize", VALUEFUNC(_wrap_new_BWNNHandler), -1);
  rb_define_method(SwigClassBWNNHandler.klass, "handle_pax", VALUEFUNC(_wrap_BWNNHandler_handle_pax), -1);
  rb_define_method(SwigClassBWNNHandler.klass, "wait", VALUEFUNC(_wrap_BWNNHandler_wait), -1);
  SwigClassBWNNHandler.mark = 0;
  SwigClassBWNNHandler.destroy = (void (*)(void *)) free_si_taxi_BWNNHandler;
  SwigClassBWNNHandler.trackObjects = 0;
  
  SwigClassBWHxHandler.klass = rb_define_class_under(mSiTaxi, "BWHxHandler", ((swig_class *) SWIGTYPE_p_si_taxi__BWNNHandler->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_si_taxi__BWHxHandler, (void *) &SwigClassBWHxHandler);
  rb_undef_alloc_func(SwigClassBWHxHandler.klass);
  rb_define_method(SwigClassBWHxHandler.klass, "handle_pax", VALUEFUNC(_wrap_BWHxHandler_handle_pax), -1);
  rb_define_method(SwigClassBWHxHandler.klass, "value", VALUEFUNC(_wrap_BWHxHandler_value), -1);
  rb_define_method(SwigClassBWHxHandler.klass, "od", VALUEFUNC(_wrap_BWHxHandler_od), -1);
  rb_define_method(SwigClassBWHxHandler.klass, "alpha", VALUEFUNC(_wrap_BWHxHandler_alpha), -1);
  SwigClassBWHxHandler.mark = 0;
  SwigClassBWHxHandler.destroy = (void (*)(void *)) free_si_taxi_BWHxHandler;
  SwigClassBWHxHandler.trackObjects = 0;
  
  SwigClassBWH1Handler.klass = rb_define_class_under(mSiTaxi, "BWH1Handler", ((swig_class *) SWIGTYPE_p_si_taxi__BWHxHandler->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_si_taxi__BWH1Handler, (void *) &SwigClassBWH1Handler);
  rb_define_alloc_func(SwigClassBWH1Handler.klass, _wrap_BWH1Handler_allocate);
  rb_define_method(SwigClassBWH1Handler.klass, "initialize", VALUEFUNC(_wrap_new_BWH1Handler), -1);
  rb_define_method(SwigClassBWH1Handler.klass, "expected_trip_time_from", VALUEFUNC(_wrap_BWH1Handler_expected_trip_time_from), -1);
  rb_define_method(SwigClassBWH1Handler.klass, "value", VALUEFUNC(_wrap_BWH1Handler_value), -1);
  SwigClassBWH1Handler.mark = 0;
  SwigClassBWH1Handler.destroy = (void (*)(void *)) free_si_taxi_BWH1Handler;
  SwigClassBWH1Handler.trackObjects = 0;
  
  SwigClassBWH2Handler.klass = rb_define_class_under(mSiTaxi, "BWH2Handler", ((swig_class *) SWIGTYPE_p_si_taxi__BWHxHandler->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_si_taxi__BWH2Handler, (void *) &SwigClassBWH2Handler);
  rb_define_alloc_func(SwigClassBWH2Handler.klass, _wrap_BWH2Handler_allocate);
  rb_define_method(SwigClassBWH2Handler.klass, "initialize", VALUEFUNC(_wrap_new_BWH2Handler), -1);
  rb_define_method(SwigClassBWH2Handler.klass, "value", VALUEFUNC(_wrap_BWH2Handler_value), -1);
  rb_define_method(SwigClassBWH2Handler.klass, "horizon=", VALUEFUNC(_wrap_BWH2Handler_horizon_set), -1);
  rb_define_method(SwigClassBWH2Handler.klass, "horizon", VALUEFUNC(_wrap_BWH2Handler_horizon_get), -1);
  SwigClassBWH2Handler.mark = 0;
  SwigClassBWH2Handler.destroy = (void (*)(void *)) free_si_taxi_BWH2Handler;
  SwigClassBWH2Handler.trackObjects = 0;
  
  SwigClassBWETNNHandler.klass = rb_define_class_under(mSiTaxi, "BWETNNHandler", ((swig_class *) SWIGTYPE_p_si_taxi__BWReactiveHandler->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_si_taxi__BWETNNHandler, (void *) &SwigClassBWETNNHandler);
  rb_define_alloc_func(SwigClassBWETNNHandler.klass, _wrap_BWETNNHandler_allocate);
  rb_define_method(SwigClassBWETNNHandler.klass, "initialize", VALUEFUNC(_wrap_new_BWETNNHandler), -1);
  rb_define_method(SwigClassBWETNNHandler.klass, "handle_pax", VALUEFUNC(_wrap_BWETNNHandler_handle_pax), -1);
  SwigClassBWETNNHandler.mark = 0;
  SwigClassBWETNNHandler.destroy = (void (*)(void *)) free_si_taxi_BWETNNHandler;
  SwigClassBWETNNHandler.trackObjects = 0;
  
  SwigClassBWSNNHandler.klass = rb_define_class_under(mSiTaxi, "BWSNNHandler", ((swig_class *) SWIGTYPE_p_si_taxi__BWReactiveHandler->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_si_taxi__BWSNNHandler, (void *) &SwigClassBWSNNHandler);
  rb_define_alloc_func(SwigClassBWSNNHandler.klass, _wrap_BWSNNHandler_allocate);
  rb_define_method(SwigClassBWSNNHandler.klass, "initialize", VALUEFUNC(_wrap_new_BWSNNHandler), -1);
  rb_define_singleton_method(SwigClassBWSNNHandler.klass, "choose_veh", VALUEFUNC(_wrap_BWSNNHandler_choose_veh), -1);
  rb_define_singleton_method(SwigClassBWSNNHandler.klass, "update_veh", VALUEFUNC(_wrap_BWSNNHandler_update_veh), -1);
  rb_define_method(SwigClassBWSNNHandler.klass, "handle_pax", VALUEFUNC(_wrap_BWSNNHandler_handle_pax), -1);
  SwigClassBWSNNHandler.mark = 0;
  SwigClassBWSNNHandler.destroy = (void (*)(void *)) free_si_taxi_BWSNNHandler;
  SwigClassBWSNNHandler.trackObjects = 0;
  
  SwigClassBWPoissonPaxStream.klass = rb_define_class_under(mSiTaxi, "BWPoissonPaxStream", ((swig_class *) SWIGTYPE_p_si_taxi__BWPaxStream->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_si_taxi__BWPoissonPaxStream, (void *) &SwigClassBWPoissonPaxStream);
  rb_define_alloc_func(SwigClassBWPoissonPaxStream.klass, _wrap_BWPoissonPaxStream_allocate);
  rb_define_method(SwigClassBWPoissonPaxStream.klass, "initialize", VALUEFUNC(_wrap_new_BWPoissonPaxStream), -1);
  rb_define_method(SwigClassBWPoissonPaxStream.klass, "next_pax", VALUEFUNC(_wrap_BWPoissonPaxStream_next_pax), -1);
  rb_define_method(SwigClassBWPoissonPaxStream.klass, "reset", VALUEFUNC(_wrap_BWPoissonPaxStream_reset), -1);
  rb_define_method(SwigClassBWPoissonPaxStream.klass, "last_time=", VALUEFUNC(_wrap_BWPoissonPaxStream_last_time_set), -1);
  rb_define_method(SwigClassBWPoissonPaxStream.klass, "last_time", VALUEFUNC(_wrap_BWPoissonPaxStream_last_time_get), -1);
  rb_define_method(SwigClassBWPoissonPaxStream.klass, "od", VALUEFUNC(_wrap_BWPoissonPaxStream_od), -1);
  SwigClassBWPoissonPaxStream.mark = 0;
  SwigClassBWPoissonPaxStream.destroy = (void (*)(void *)) free_si_taxi_BWPoissonPaxStream;
  SwigClassBWPoissonPaxStream.trackObjects = 0;
  
  SwigClassBWTestPaxStream.klass = rb_define_class_under(mSiTaxi, "BWTestPaxStream", ((swig_class *) SWIGTYPE_p_si_taxi__BWPaxStream->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_si_taxi__BWTestPaxStream, (void *) &SwigClassBWTestPaxStream);
  rb_define_alloc_func(SwigClassBWTestPaxStream.klass, _wrap_BWTestPaxStream_allocate);
  rb_define_method(SwigClassBWTestPaxStream.klass, "initialize", VALUEFUNC(_wrap_new_BWTestPaxStream), -1);
  rb_define_method(SwigClassBWTestPaxStream.klass, "next_pax", VALUEFUNC(_wrap_BWTestPaxStream_next_pax), -1);
  rb_define_method(SwigClassBWTestPaxStream.klass, "reset", VALUEFUNC(_wrap_BWTestPaxStream_reset), -1);
  rb_define_method(SwigClassBWTestPaxStream.klass, "pax=", VALUEFUNC(_wrap_BWTestPaxStream_pax_set), -1);
  rb_define_method(SwigClassBWTestPaxStream.klass, "pax", VALUEFUNC(_wrap_BWTestPaxStream_pax_get), -1);
  SwigClassBWTestPaxStream.mark = 0;
  SwigClassBWTestPaxStream.destroy = (void (*)(void *)) free_si_taxi_BWTestPaxStream;
  SwigClassBWTestPaxStream.trackObjects = 0;
  
  SwigClassBWCallTimeTracker.klass = rb_define_class_under(mSiTaxi, "BWCallTimeTracker", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_si_taxi__BWCallTimeTracker, (void *) &SwigClassBWCallTimeTracker);
  rb_define_alloc_func(SwigClassBWCallTimeTracker.klass, _wrap_BWCallTimeTracker_allocate);
  rb_define_method(SwigClassBWCallTimeTracker.klass, "initialize", VALUEFUNC(_wrap_new_BWCallTimeTracker), -1);
  rb_define_method(SwigClassBWCallTimeTracker.klass, "call_time=", VALUEFUNC(_wrap_BWCallTimeTracker_call_time_set), -1);
  rb_define_method(SwigClassBWCallTimeTracker.klass, "call_time", VALUEFUNC(_wrap_BWCallTimeTracker_call_time_get), -1);
  rb_define_method(SwigClassBWCallTimeTracker.klass, "call=", VALUEFUNC(_wrap_BWCallTimeTracker_call_set), -1);
  rb_define_method(SwigClassBWCallTimeTracker.klass, "call", VALUEFUNC(_wrap_BWCallTimeTracker_call_get), -1);
  rb_define_method(SwigClassBWCallTimeTracker.klass, "init", VALUEFUNC(_wrap_BWCallTimeTracker_init), -1);
  rb_define_method(SwigClassBWCallTimeTracker.klass, "at", VALUEFUNC(_wrap_BWCallTimeTracker_at), -1);
  rb_define_method(SwigClassBWCallTimeTracker.klass, "update", VALUEFUNC(_wrap_BWCallTimeTracker_update), -1);
  rb_define_method(SwigClassBWCallTimeTracker.klass, "num_vehicles_inbound_in_call_time", VALUEFUNC(_wrap_BWCallTimeTracker_num_vehicles_inbound_in_call_time), -1);
  rb_define_method(SwigClassBWCallTimeTracker.klass, "num_vehicles_immediately_inbound_in_call_time", VALUEFUNC(_wrap_BWCallTimeTracker_num_vehicles_immediately_inbound_in_call_time), -1);
  SwigClassBWCallTimeTracker.mark = 0;
  SwigClassBWCallTimeTracker.destroy = (void (*)(void *)) free_si_taxi_BWCallTimeTracker;
  SwigClassBWCallTimeTracker.trackObjects = 0;
  
  SwigClassBWNNHandlerWithCallTimeUpdates.klass = rb_define_class_under(mSiTaxi, "BWNNHandlerWithCallTimeUpdates", ((swig_class *) SWIGTYPE_p_si_taxi__BWNNHandler->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_si_taxi__BWNNHandlerWithCallTimeUpdates, (void *) &SwigClassBWNNHandlerWithCallTimeUpdates);
  rb_define_alloc_func(SwigClassBWNNHandlerWithCallTimeUpdates.klass, _wrap_BWNNHandlerWithCallTimeUpdates_allocate);
  rb_define_method(SwigClassBWNNHandlerWithCallTimeUpdates.klass, "initialize", VALUEFUNC(_wrap_new_BWNNHandlerWithCallTimeUpdates), -1);
  rb_define_method(SwigClassBWNNHandlerWithCallTimeUpdates.klass, "handle_pax", VALUEFUNC(_wrap_BWNNHandlerWithCallTimeUpdates_handle_pax), -1);
  rb_define_method(SwigClassBWNNHandlerWithCallTimeUpdates.klass, "init", VALUEFUNC(_wrap_BWNNHandlerWithCallTimeUpdates_init), -1);
  rb_define_method(SwigClassBWNNHandlerWithCallTimeUpdates.klass, "call_time", VALUEFUNC(_wrap_BWNNHandlerWithCallTimeUpdates_call_time), -1);
  SwigClassBWNNHandlerWithCallTimeUpdates.mark = 0;
  SwigClassBWNNHandlerWithCallTimeUpdates.destroy = (void (*)(void *)) free_si_taxi_BWNNHandlerWithCallTimeUpdates;
  SwigClassBWNNHandlerWithCallTimeUpdates.trackObjects = 0;
  
  SwigClassBWAndreassonHandler.klass = rb_define_class_under(mSiTaxi, "BWAndreassonHandler", ((swig_class *) SWIGTYPE_p_si_taxi__BWProactiveHandler->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_si_taxi__BWAndreassonHandler, (void *) &SwigClassBWAndreassonHandler);
  rb_define_alloc_func(SwigClassBWAndreassonHandler.klass, _wrap_BWAndreassonHandler_allocate);
  rb_define_method(SwigClassBWAndreassonHandler.klass, "initialize", VALUEFUNC(_wrap_new_BWAndreassonHandler), -1);
  rb_define_method(SwigClassBWAndreassonHandler.klass, "init", VALUEFUNC(_wrap_BWAndreassonHandler_init), -1);
  rb_define_method(SwigClassBWAndreassonHandler.klass, "handle_pax_served", VALUEFUNC(_wrap_BWAndreassonHandler_handle_pax_served), -1);
  rb_define_method(SwigClassBWAndreassonHandler.klass, "handle_idle", VALUEFUNC(_wrap_BWAndreassonHandler_handle_idle), -1);
  rb_define_method(SwigClassBWAndreassonHandler.klass, "supply_at", VALUEFUNC(_wrap_BWAndreassonHandler_supply_at), -1);
  rb_define_method(SwigClassBWAndreassonHandler.klass, "demand_at", VALUEFUNC(_wrap_BWAndreassonHandler_demand_at), -1);
  rb_define_method(SwigClassBWAndreassonHandler.klass, "surplus", VALUEFUNC(_wrap_BWAndreassonHandler_surplus), -1);
  rb_define_method(SwigClassBWAndreassonHandler.klass, "find_call_origin", VALUEFUNC(_wrap_BWAndreassonHandler_find_call_origin), -1);
  rb_define_method(SwigClassBWAndreassonHandler.klass, "find_send_destin", VALUEFUNC(_wrap_BWAndreassonHandler_find_send_destin), -1);
  rb_define_method(SwigClassBWAndreassonHandler.klass, "call_time", VALUEFUNC(_wrap_BWAndreassonHandler_call_time), -1);
  rb_define_method(SwigClassBWAndreassonHandler.klass, "od", VALUEFUNC(_wrap_BWAndreassonHandler_od), -1);
  rb_define_method(SwigClassBWAndreassonHandler.klass, "immediate_inbound_only=", VALUEFUNC(_wrap_BWAndreassonHandler_immediate_inbound_only_set), -1);
  rb_define_method(SwigClassBWAndreassonHandler.klass, "immediate_inbound_only", VALUEFUNC(_wrap_BWAndreassonHandler_immediate_inbound_only_get), -1);
  rb_define_method(SwigClassBWAndreassonHandler.klass, "use_call_times_for_inbound=", VALUEFUNC(_wrap_BWAndreassonHandler_use_call_times_for_inbound_set), -1);
  rb_define_method(SwigClassBWAndreassonHandler.klass, "use_call_times_for_inbound", VALUEFUNC(_wrap_BWAndreassonHandler_use_call_times_for_inbound_get), -1);
  rb_define_method(SwigClassBWAndreassonHandler.klass, "use_call_times_for_targets=", VALUEFUNC(_wrap_BWAndreassonHandler_use_call_times_for_targets_set), -1);
  rb_define_method(SwigClassBWAndreassonHandler.klass, "use_call_times_for_targets", VALUEFUNC(_wrap_BWAndreassonHandler_use_call_times_for_targets_get), -1);
  rb_define_method(SwigClassBWAndreassonHandler.klass, "send_when_over=", VALUEFUNC(_wrap_BWAndreassonHandler_send_when_over_set), -1);
  rb_define_method(SwigClassBWAndreassonHandler.klass, "send_when_over", VALUEFUNC(_wrap_BWAndreassonHandler_send_when_over_get), -1);
  rb_define_method(SwigClassBWAndreassonHandler.klass, "call_only_from_surplus=", VALUEFUNC(_wrap_BWAndreassonHandler_call_only_from_surplus_set), -1);
  rb_define_method(SwigClassBWAndreassonHandler.klass, "call_only_from_surplus", VALUEFUNC(_wrap_BWAndreassonHandler_call_only_from_surplus_get), -1);
  rb_define_method(SwigClassBWAndreassonHandler.klass, "surplus_threshold=", VALUEFUNC(_wrap_BWAndreassonHandler_surplus_threshold_set), -1);
  rb_define_method(SwigClassBWAndreassonHandler.klass, "surplus_threshold", VALUEFUNC(_wrap_BWAndreassonHandler_surplus_threshold_get), -1);
  rb_define_method(SwigClassBWAndreassonHandler.klass, "targets=", VALUEFUNC(_wrap_BWAndreassonHandler_targets_set), -1);
  rb_define_method(SwigClassBWAndreassonHandler.klass, "targets", VALUEFUNC(_wrap_BWAndreassonHandler_targets_get), -1);
  rb_define_method(SwigClassBWAndreassonHandler.klass, "preferred=", VALUEFUNC(_wrap_BWAndreassonHandler_preferred_set), -1);
  rb_define_method(SwigClassBWAndreassonHandler.klass, "preferred", VALUEFUNC(_wrap_BWAndreassonHandler_preferred_get), -1);
  rb_define_method(SwigClassBWAndreassonHandler.klass, "call_queue=", VALUEFUNC(_wrap_BWAndreassonHandler_call_queue_set), -1);
  rb_define_method(SwigClassBWAndreassonHandler.klass, "call_queue", VALUEFUNC(_wrap_BWAndreassonHandler_call_queue_get), -1);
  SwigClassBWAndreassonHandler.mark = 0;
  SwigClassBWAndreassonHandler.destroy = (void (*)(void *)) free_si_taxi_BWAndreassonHandler;
  SwigClassBWAndreassonHandler.trackObjects = 0;
  
  SwigClassBWDynamicTransportationProblemHandler.klass = rb_define_class_under(mSiTaxi, "BWDynamicTransportationProblemHandler", ((swig_class *) SWIGTYPE_p_si_taxi__BWProactiveHandler->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_si_taxi__BWDynamicTransportationProblemHandler, (void *) &SwigClassBWDynamicTransportationProblemHandler);
  rb_define_alloc_func(SwigClassBWDynamicTransportationProblemHandler.klass, _wrap_BWDynamicTransportationProblemHandler_allocate);
  rb_define_method(SwigClassBWDynamicTransportationProblemHandler.klass, "initialize", VALUEFUNC(_wrap_new_BWDynamicTransportationProblemHandler), -1);
  rb_define_method(SwigClassBWDynamicTransportationProblemHandler.klass, "handle_pax_served", VALUEFUNC(_wrap_BWDynamicTransportationProblemHandler_handle_pax_served), -1);
  rb_define_method(SwigClassBWDynamicTransportationProblemHandler.klass, "handle_idle", VALUEFUNC(_wrap_BWDynamicTransportationProblemHandler_handle_idle), -1);
  rb_define_method(SwigClassBWDynamicTransportationProblemHandler.klass, "handle_strobe", VALUEFUNC(_wrap_BWDynamicTransportationProblemHandler_handle_strobe), -1);
  rb_define_method(SwigClassBWDynamicTransportationProblemHandler.klass, "redistribute", VALUEFUNC(_wrap_BWDynamicTransportationProblemHandler_redistribute), -1);
  rb_define_method(SwigClassBWDynamicTransportationProblemHandler.klass, "num_stations", VALUEFUNC(_wrap_BWDynamicTransportationProblemHandler_num_stations), -1);
  rb_define_method(SwigClassBWDynamicTransportationProblemHandler.klass, "num_nodes", VALUEFUNC(_wrap_BWDynamicTransportationProblemHandler_num_nodes), -1);
  rb_define_method(SwigClassBWDynamicTransportationProblemHandler.klass, "num_arcs", VALUEFUNC(_wrap_BWDynamicTransportationProblemHandler_num_arcs), -1);
  rb_define_method(SwigClassBWDynamicTransportationProblemHandler.klass, "source_node", VALUEFUNC(_wrap_BWDynamicTransportationProblemHandler_source_node), -1);
  rb_define_method(SwigClassBWDynamicTransportationProblemHandler.klass, "sink_node", VALUEFUNC(_wrap_BWDynamicTransportationProblemHandler_sink_node), -1);
  rb_define_method(SwigClassBWDynamicTransportationProblemHandler.klass, "dump_problem", VALUEFUNC(_wrap_BWDynamicTransportationProblemHandler_dump_problem), -1);
  rb_define_method(SwigClassBWDynamicTransportationProblemHandler.klass, "targets=", VALUEFUNC(_wrap_BWDynamicTransportationProblemHandler_targets_set), -1);
  rb_define_method(SwigClassBWDynamicTransportationProblemHandler.klass, "targets", VALUEFUNC(_wrap_BWDynamicTransportationProblemHandler_targets_get), -1);
  SwigClassBWDynamicTransportationProblemHandler.mark = 0;
  SwigClassBWDynamicTransportationProblemHandler.destroy = (void (*)(void *)) free_si_taxi_BWDynamicTransportationProblemHandler;
  SwigClassBWDynamicTransportationProblemHandler.trackObjects = 0;
  
  SwigClassBWSamplingVotingHandler.klass = rb_define_class_under(mSiTaxi, "BWSamplingVotingHandler", ((swig_class *) SWIGTYPE_p_si_taxi__BWProactiveHandler->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_si_taxi__BWSamplingVotingHandler, (void *) &SwigClassBWSamplingVotingHandler);
  rb_define_alloc_func(SwigClassBWSamplingVotingHandler.klass, _wrap_BWSamplingVotingHandler_allocate);
  rb_define_method(SwigClassBWSamplingVotingHandler.klass, "initialize", VALUEFUNC(_wrap_new_BWSamplingVotingHandler), -1);
  rb_define_method(SwigClassBWSamplingVotingHandler.klass, "handle_pax_served", VALUEFUNC(_wrap_BWSamplingVotingHandler_handle_pax_served), -1);
  rb_define_method(SwigClassBWSamplingVotingHandler.klass, "handle_idle", VALUEFUNC(_wrap_BWSamplingVotingHandler_handle_idle), -1);
  rb_define_method(SwigClassBWSamplingVotingHandler.klass, "handle_strobe", VALUEFUNC(_wrap_BWSamplingVotingHandler_handle_strobe), -1);
  rb_define_method(SwigClassBWSamplingVotingHandler.klass, "clone_sim_vehs", VALUEFUNC(_wrap_BWSamplingVotingHandler_clone_sim_vehs), -1);
  rb_define_method(SwigClassBWSamplingVotingHandler.klass, "sample", VALUEFUNC(_wrap_BWSamplingVotingHandler_sample), -1);
  rb_define_method(SwigClassBWSamplingVotingHandler.klass, "best_destin", VALUEFUNC(_wrap_BWSamplingVotingHandler_best_destin), -1);
  rb_define_method(SwigClassBWSamplingVotingHandler.klass, "move_to_best_destin_for_each_station", VALUEFUNC(_wrap_BWSamplingVotingHandler_move_to_best_destin_for_each_station), -1);
  rb_define_method(SwigClassBWSamplingVotingHandler.klass, "pax_stream=", VALUEFUNC(_wrap_BWSamplingVotingHandler_pax_stream_set), -1);
  rb_define_method(SwigClassBWSamplingVotingHandler.klass, "pax_stream", VALUEFUNC(_wrap_BWSamplingVotingHandler_pax_stream_get), -1);
  rb_define_method(SwigClassBWSamplingVotingHandler.klass, "num_sequences=", VALUEFUNC(_wrap_BWSamplingVotingHandler_num_sequences_set), -1);
  rb_define_method(SwigClassBWSamplingVotingHandler.klass, "num_sequences", VALUEFUNC(_wrap_BWSamplingVotingHandler_num_sequences_get), -1);
  rb_define_method(SwigClassBWSamplingVotingHandler.klass, "num_pax=", VALUEFUNC(_wrap_BWSamplingVotingHandler_num_pax_set), -1);
  rb_define_method(SwigClassBWSamplingVotingHandler.klass, "num_pax", VALUEFUNC(_wrap_BWSamplingVotingHandler_num_pax_get), -1);
  SwigClassBWSamplingVotingHandler.mark = 0;
  SwigClassBWSamplingVotingHandler.destroy = (void (*)(void *)) free_si_taxi_BWSamplingVotingHandler;
  SwigClassBWSamplingVotingHandler.trackObjects = 0;
  
  SwigClassBWSurplusDeficitHandler.klass = rb_define_class_under(mSiTaxi, "BWSurplusDeficitHandler", ((swig_class *) SWIGTYPE_p_si_taxi__BWProactiveHandler->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_si_taxi__BWSurplusDeficitHandler, (void *) &SwigClassBWSurplusDeficitHandler);
  rb_define_alloc_func(SwigClassBWSurplusDeficitHandler.klass, _wrap_BWSurplusDeficitHandler_allocate);
  rb_define_method(SwigClassBWSurplusDeficitHandler.klass, "initialize", VALUEFUNC(_wrap_new_BWSurplusDeficitHandler), -1);
  rb_define_method(SwigClassBWSurplusDeficitHandler.klass, "init", VALUEFUNC(_wrap_BWSurplusDeficitHandler_init), -1);
  rb_define_method(SwigClassBWSurplusDeficitHandler.klass, "handle_pax_served", VALUEFUNC(_wrap_BWSurplusDeficitHandler_handle_pax_served), -1);
  rb_define_method(SwigClassBWSurplusDeficitHandler.klass, "handle_idle", VALUEFUNC(_wrap_BWSurplusDeficitHandler_handle_idle), -1);
  rb_define_method(SwigClassBWSurplusDeficitHandler.klass, "surplus_at", VALUEFUNC(_wrap_BWSurplusDeficitHandler_surplus_at), -1);
  rb_define_method(SwigClassBWSurplusDeficitHandler.klass, "send_idle_veh_to_nearest_deficit", VALUEFUNC(_wrap_BWSurplusDeficitHandler_send_idle_veh_to_nearest_deficit), -1);
  rb_define_method(SwigClassBWSurplusDeficitHandler.klass, "call_time", VALUEFUNC(_wrap_BWSurplusDeficitHandler_call_time), -1);
  rb_define_method(SwigClassBWSurplusDeficitHandler.klass, "od", VALUEFUNC(_wrap_BWSurplusDeficitHandler_od), -1);
  SwigClassBWSurplusDeficitHandler.mark = 0;
  SwigClassBWSurplusDeficitHandler.destroy = (void (*)(void *)) free_si_taxi_BWSurplusDeficitHandler;
  SwigClassBWSurplusDeficitHandler.trackObjects = 0;
  
  SwigClassBWPaxVector.klass = rb_define_class_under(mSiTaxi, "BWPaxVector", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, (void *) &SwigClassBWPaxVector);
  rb_include_module(SwigClassBWPaxVector.klass, rb_eval_string("Enumerable"));
  rb_define_alloc_func(SwigClassBWPaxVector.klass, _wrap_BWPaxVector_allocate);
  rb_define_method(SwigClassBWPaxVector.klass, "initialize", VALUEFUNC(_wrap_new_BWPaxVector), -1);
  rb_define_method(SwigClassBWPaxVector.klass, "dup", VALUEFUNC(_wrap_BWPaxVector_dup), -1);
  rb_define_method(SwigClassBWPaxVector.klass, "inspect", VALUEFUNC(_wrap_BWPaxVector_inspect), -1);
  rb_define_method(SwigClassBWPaxVector.klass, "to_a", VALUEFUNC(_wrap_BWPaxVector_to_a), -1);
  rb_define_method(SwigClassBWPaxVector.klass, "to_s", VALUEFUNC(_wrap_BWPaxVector_to_s), -1);
  rb_define_method(SwigClassBWPaxVector.klass, "slice", VALUEFUNC(_wrap_BWPaxVector_slice), -1);
  rb_define_method(SwigClassBWPaxVector.klass, "each", VALUEFUNC(_wrap_BWPaxVector_each), -1);
  rb_define_method(SwigClassBWPaxVector.klass, "select", VALUEFUNC(_wrap_BWPaxVector_select), -1);
  rb_define_method(SwigClassBWPaxVector.klass, "reject!", VALUEFUNC(_wrap_BWPaxVector_rejectN___), -1);
  rb_define_alias(SwigClassBWPaxVector.klass, "delete_if", "reject!");
  rb_define_method(SwigClassBWPaxVector.klass, "delete_at", VALUEFUNC(_wrap_BWPaxVector_delete_at), -1);
  rb_define_method(SwigClassBWPaxVector.klass, "__delete2__", VALUEFUNC(_wrap_BWPaxVector___delete2__), -1);
  rb_define_method(SwigClassBWPaxVector.klass, "pop", VALUEFUNC(_wrap_BWPaxVector_pop), -1);
  rb_define_method(SwigClassBWPaxVector.klass, "push", VALUEFUNC(_wrap_BWPaxVector_push), -1);
  rb_define_alias(SwigClassBWPaxVector.klass, "<<", "push");
  rb_define_method(SwigClassBWPaxVector.klass, "reject", VALUEFUNC(_wrap_BWPaxVector_reject), -1);
  rb_define_method(SwigClassBWPaxVector.klass, "at", VALUEFUNC(_wrap_BWPaxVector_at), -1);
  rb_define_method(SwigClassBWPaxVector.klass, "[]", VALUEFUNC(_wrap_BWPaxVector___getitem__), -1);
  rb_define_method(SwigClassBWPaxVector.klass, "[]=", VALUEFUNC(_wrap_BWPaxVector___setitem__), -1);
  rb_define_method(SwigClassBWPaxVector.klass, "shift", VALUEFUNC(_wrap_BWPaxVector_shift), -1);
  rb_define_method(SwigClassBWPaxVector.klass, "unshift", VALUEFUNC(_wrap_BWPaxVector_unshift), -1);
  rb_define_method(SwigClassBWPaxVector.klass, "empty?", VALUEFUNC(_wrap_BWPaxVector_emptyq___), -1);
  rb_define_method(SwigClassBWPaxVector.klass, "size", VALUEFUNC(_wrap_BWPaxVector_size), -1);
  rb_define_method(SwigClassBWPaxVector.klass, "clear", VALUEFUNC(_wrap_BWPaxVector_clear), -1);
  rb_define_method(SwigClassBWPaxVector.klass, "swap", VALUEFUNC(_wrap_BWPaxVector_swap), -1);
  rb_define_method(SwigClassBWPaxVector.klass, "get_allocator", VALUEFUNC(_wrap_BWPaxVector_get_allocator), -1);
  rb_define_method(SwigClassBWPaxVector.klass, "begin", VALUEFUNC(_wrap_BWPaxVector_begin), -1);
  rb_define_method(SwigClassBWPaxVector.klass, "end", VALUEFUNC(_wrap_BWPaxVector_end), -1);
  rb_define_method(SwigClassBWPaxVector.klass, "rbegin", VALUEFUNC(_wrap_BWPaxVector_rbegin), -1);
  rb_define_method(SwigClassBWPaxVector.klass, "rend", VALUEFUNC(_wrap_BWPaxVector_rend), -1);
  rb_define_method(SwigClassBWPaxVector.klass, "erase", VALUEFUNC(_wrap_BWPaxVector_erase), -1);
  rb_define_method(SwigClassBWPaxVector.klass, "front", VALUEFUNC(_wrap_BWPaxVector_front), -1);
  rb_define_method(SwigClassBWPaxVector.klass, "back", VALUEFUNC(_wrap_BWPaxVector_back), -1);
  rb_define_method(SwigClassBWPaxVector.klass, "assign", VALUEFUNC(_wrap_BWPaxVector_assign), -1);
  rb_define_method(SwigClassBWPaxVector.klass, "resize", VALUEFUNC(_wrap_BWPaxVector_resize), -1);
  rb_define_method(SwigClassBWPaxVector.klass, "insert", VALUEFUNC(_wrap_BWPaxVector_insert), -1);
  rb_define_method(SwigClassBWPaxVector.klass, "reserve", VALUEFUNC(_wrap_BWPaxVector_reserve), -1);
  rb_define_method(SwigClassBWPaxVector.klass, "capacity", VALUEFUNC(_wrap_BWPaxVector_capacity), -1);
  SwigClassBWPaxVector.mark = 0;
  SwigClassBWPaxVector.destroy = (void (*)(void *)) free_std_vector_Sl_si_taxi_BWPax_Sg_;
  SwigClassBWPaxVector.trackObjects = 0;
  
  SwigClassBWPaxDeque.klass = rb_define_class_under(mSiTaxi, "BWPaxDeque", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t, (void *) &SwigClassBWPaxDeque);
  rb_define_alloc_func(SwigClassBWPaxDeque.klass, _wrap_BWPaxDeque_allocate);
  rb_define_method(SwigClassBWPaxDeque.klass, "initialize", VALUEFUNC(_wrap_new_BWPaxDeque), -1);
  rb_define_method(SwigClassBWPaxDeque.klass, "dup", VALUEFUNC(_wrap_BWPaxDeque_dup), -1);
  rb_define_method(SwigClassBWPaxDeque.klass, "inspect", VALUEFUNC(_wrap_BWPaxDeque_inspect), -1);
  rb_define_method(SwigClassBWPaxDeque.klass, "to_a", VALUEFUNC(_wrap_BWPaxDeque_to_a), -1);
  rb_define_method(SwigClassBWPaxDeque.klass, "to_s", VALUEFUNC(_wrap_BWPaxDeque_to_s), -1);
  rb_define_method(SwigClassBWPaxDeque.klass, "slice", VALUEFUNC(_wrap_BWPaxDeque_slice), -1);
  rb_define_method(SwigClassBWPaxDeque.klass, "each", VALUEFUNC(_wrap_BWPaxDeque_each), -1);
  rb_define_method(SwigClassBWPaxDeque.klass, "select", VALUEFUNC(_wrap_BWPaxDeque_select), -1);
  rb_define_method(SwigClassBWPaxDeque.klass, "reject_bang", VALUEFUNC(_wrap_BWPaxDeque_reject_bang), -1);
  rb_define_alias(SwigClassBWPaxDeque.klass, "delete_if", "reject_bang");
  rb_define_method(SwigClassBWPaxDeque.klass, "delete_at", VALUEFUNC(_wrap_BWPaxDeque_delete_at), -1);
  rb_define_method(SwigClassBWPaxDeque.klass, "__delete2__", VALUEFUNC(_wrap_BWPaxDeque___delete2__), -1);
  rb_define_method(SwigClassBWPaxDeque.klass, "pop", VALUEFUNC(_wrap_BWPaxDeque_pop), -1);
  rb_define_method(SwigClassBWPaxDeque.klass, "push", VALUEFUNC(_wrap_BWPaxDeque_push), -1);
  rb_define_alias(SwigClassBWPaxDeque.klass, "<<", "push");
  rb_define_method(SwigClassBWPaxDeque.klass, "reject", VALUEFUNC(_wrap_BWPaxDeque_reject), -1);
  rb_define_method(SwigClassBWPaxDeque.klass, "at", VALUEFUNC(_wrap_BWPaxDeque_at), -1);
  rb_define_method(SwigClassBWPaxDeque.klass, "[]", VALUEFUNC(_wrap_BWPaxDeque___getitem__), -1);
  rb_define_method(SwigClassBWPaxDeque.klass, "[]=", VALUEFUNC(_wrap_BWPaxDeque___setitem__), -1);
  rb_define_method(SwigClassBWPaxDeque.klass, "empty", VALUEFUNC(_wrap_BWPaxDeque_empty), -1);
  rb_define_method(SwigClassBWPaxDeque.klass, "size", VALUEFUNC(_wrap_BWPaxDeque_size), -1);
  rb_define_method(SwigClassBWPaxDeque.klass, "clear", VALUEFUNC(_wrap_BWPaxDeque_clear), -1);
  rb_define_method(SwigClassBWPaxDeque.klass, "swap", VALUEFUNC(_wrap_BWPaxDeque_swap), -1);
  rb_define_method(SwigClassBWPaxDeque.klass, "get_allocator", VALUEFUNC(_wrap_BWPaxDeque_get_allocator), -1);
  rb_define_method(SwigClassBWPaxDeque.klass, "begin", VALUEFUNC(_wrap_BWPaxDeque_begin), -1);
  rb_define_method(SwigClassBWPaxDeque.klass, "end", VALUEFUNC(_wrap_BWPaxDeque_end), -1);
  rb_define_method(SwigClassBWPaxDeque.klass, "rbegin", VALUEFUNC(_wrap_BWPaxDeque_rbegin), -1);
  rb_define_method(SwigClassBWPaxDeque.klass, "rend", VALUEFUNC(_wrap_BWPaxDeque_rend), -1);
  rb_define_method(SwigClassBWPaxDeque.klass, "erase", VALUEFUNC(_wrap_BWPaxDeque_erase), -1);
  rb_define_method(SwigClassBWPaxDeque.klass, "front", VALUEFUNC(_wrap_BWPaxDeque_front), -1);
  rb_define_method(SwigClassBWPaxDeque.klass, "back", VALUEFUNC(_wrap_BWPaxDeque_back), -1);
  rb_define_method(SwigClassBWPaxDeque.klass, "assign", VALUEFUNC(_wrap_BWPaxDeque_assign), -1);
  rb_define_method(SwigClassBWPaxDeque.klass, "resize", VALUEFUNC(_wrap_BWPaxDeque_resize), -1);
  rb_define_method(SwigClassBWPaxDeque.klass, "insert", VALUEFUNC(_wrap_BWPaxDeque_insert), -1);
  rb_define_method(SwigClassBWPaxDeque.klass, "pop_front", VALUEFUNC(_wrap_BWPaxDeque_pop_front), -1);
  rb_define_method(SwigClassBWPaxDeque.klass, "push_front", VALUEFUNC(_wrap_BWPaxDeque_push_front), -1);
  SwigClassBWPaxDeque.mark = 0;
  SwigClassBWPaxDeque.destroy = (void (*)(void *)) free_std_deque_Sl_si_taxi_BWPax_Sg_;
  SwigClassBWPaxDeque.trackObjects = 0;
  
  SwigClassBWTimeDeque.klass = rb_define_class_under(mSiTaxi, "BWTimeDeque", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_std__dequeT_long_std__allocatorT_long_t_t, (void *) &SwigClassBWTimeDeque);
  rb_define_alloc_func(SwigClassBWTimeDeque.klass, _wrap_BWTimeDeque_allocate);
  rb_define_method(SwigClassBWTimeDeque.klass, "initialize", VALUEFUNC(_wrap_new_BWTimeDeque), -1);
  rb_define_method(SwigClassBWTimeDeque.klass, "dup", VALUEFUNC(_wrap_BWTimeDeque_dup), -1);
  rb_define_method(SwigClassBWTimeDeque.klass, "inspect", VALUEFUNC(_wrap_BWTimeDeque_inspect), -1);
  rb_define_method(SwigClassBWTimeDeque.klass, "to_a", VALUEFUNC(_wrap_BWTimeDeque_to_a), -1);
  rb_define_method(SwigClassBWTimeDeque.klass, "to_s", VALUEFUNC(_wrap_BWTimeDeque_to_s), -1);
  rb_define_method(SwigClassBWTimeDeque.klass, "slice", VALUEFUNC(_wrap_BWTimeDeque_slice), -1);
  rb_define_method(SwigClassBWTimeDeque.klass, "each", VALUEFUNC(_wrap_BWTimeDeque_each), -1);
  rb_define_method(SwigClassBWTimeDeque.klass, "select", VALUEFUNC(_wrap_BWTimeDeque_select), -1);
  rb_define_method(SwigClassBWTimeDeque.klass, "reject_bang", VALUEFUNC(_wrap_BWTimeDeque_reject_bang), -1);
  rb_define_alias(SwigClassBWTimeDeque.klass, "delete_if", "reject_bang");
  rb_define_method(SwigClassBWTimeDeque.klass, "delete_at", VALUEFUNC(_wrap_BWTimeDeque_delete_at), -1);
  rb_define_method(SwigClassBWTimeDeque.klass, "__delete2__", VALUEFUNC(_wrap_BWTimeDeque___delete2__), -1);
  rb_define_method(SwigClassBWTimeDeque.klass, "pop", VALUEFUNC(_wrap_BWTimeDeque_pop), -1);
  rb_define_method(SwigClassBWTimeDeque.klass, "push", VALUEFUNC(_wrap_BWTimeDeque_push), -1);
  rb_define_alias(SwigClassBWTimeDeque.klass, "<<", "push");
  rb_define_method(SwigClassBWTimeDeque.klass, "reject", VALUEFUNC(_wrap_BWTimeDeque_reject), -1);
  rb_define_method(SwigClassBWTimeDeque.klass, "at", VALUEFUNC(_wrap_BWTimeDeque_at), -1);
  rb_define_method(SwigClassBWTimeDeque.klass, "[]", VALUEFUNC(_wrap_BWTimeDeque___getitem__), -1);
  rb_define_method(SwigClassBWTimeDeque.klass, "[]=", VALUEFUNC(_wrap_BWTimeDeque___setitem__), -1);
  rb_define_method(SwigClassBWTimeDeque.klass, "empty", VALUEFUNC(_wrap_BWTimeDeque_empty), -1);
  rb_define_method(SwigClassBWTimeDeque.klass, "size", VALUEFUNC(_wrap_BWTimeDeque_size), -1);
  rb_define_method(SwigClassBWTimeDeque.klass, "clear", VALUEFUNC(_wrap_BWTimeDeque_clear), -1);
  rb_define_method(SwigClassBWTimeDeque.klass, "swap", VALUEFUNC(_wrap_BWTimeDeque_swap), -1);
  rb_define_method(SwigClassBWTimeDeque.klass, "get_allocator", VALUEFUNC(_wrap_BWTimeDeque_get_allocator), -1);
  rb_define_method(SwigClassBWTimeDeque.klass, "begin", VALUEFUNC(_wrap_BWTimeDeque_begin), -1);
  rb_define_method(SwigClassBWTimeDeque.klass, "end", VALUEFUNC(_wrap_BWTimeDeque_end), -1);
  rb_define_method(SwigClassBWTimeDeque.klass, "rbegin", VALUEFUNC(_wrap_BWTimeDeque_rbegin), -1);
  rb_define_method(SwigClassBWTimeDeque.klass, "rend", VALUEFUNC(_wrap_BWTimeDeque_rend), -1);
  rb_define_method(SwigClassBWTimeDeque.klass, "erase", VALUEFUNC(_wrap_BWTimeDeque_erase), -1);
  rb_define_method(SwigClassBWTimeDeque.klass, "front", VALUEFUNC(_wrap_BWTimeDeque_front), -1);
  rb_define_method(SwigClassBWTimeDeque.klass, "back", VALUEFUNC(_wrap_BWTimeDeque_back), -1);
  rb_define_method(SwigClassBWTimeDeque.klass, "assign", VALUEFUNC(_wrap_BWTimeDeque_assign), -1);
  rb_define_method(SwigClassBWTimeDeque.klass, "resize", VALUEFUNC(_wrap_BWTimeDeque_resize), -1);
  rb_define_method(SwigClassBWTimeDeque.klass, "insert", VALUEFUNC(_wrap_BWTimeDeque_insert), -1);
  rb_define_method(SwigClassBWTimeDeque.klass, "pop_front", VALUEFUNC(_wrap_BWTimeDeque_pop_front), -1);
  rb_define_method(SwigClassBWTimeDeque.klass, "push_front", VALUEFUNC(_wrap_BWTimeDeque_push_front), -1);
  SwigClassBWTimeDeque.mark = 0;
  SwigClassBWTimeDeque.destroy = (void (*)(void *)) free_std_deque_Sl_si_taxi_BWTime_Sg_;
  SwigClassBWTimeDeque.trackObjects = 0;
  
  SwigClassBWTimeDequeVector.klass = rb_define_class_under(mSiTaxi, "BWTimeDequeVector", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_std__allocatorT_std__dequeT_si_taxi__BWTime_std__allocatorT_si_taxi__BWTime_t_t_t_t, (void *) &SwigClassBWTimeDequeVector);
  rb_include_module(SwigClassBWTimeDequeVector.klass, rb_eval_string("Enumerable"));
  rb_define_alloc_func(SwigClassBWTimeDequeVector.klass, _wrap_BWTimeDequeVector_allocate);
  rb_define_method(SwigClassBWTimeDequeVector.klass, "initialize", VALUEFUNC(_wrap_new_BWTimeDequeVector), -1);
  rb_define_method(SwigClassBWTimeDequeVector.klass, "dup", VALUEFUNC(_wrap_BWTimeDequeVector_dup), -1);
  rb_define_method(SwigClassBWTimeDequeVector.klass, "inspect", VALUEFUNC(_wrap_BWTimeDequeVector_inspect), -1);
  rb_define_method(SwigClassBWTimeDequeVector.klass, "to_a", VALUEFUNC(_wrap_BWTimeDequeVector_to_a), -1);
  rb_define_method(SwigClassBWTimeDequeVector.klass, "to_s", VALUEFUNC(_wrap_BWTimeDequeVector_to_s), -1);
  rb_define_method(SwigClassBWTimeDequeVector.klass, "slice", VALUEFUNC(_wrap_BWTimeDequeVector_slice), -1);
  rb_define_method(SwigClassBWTimeDequeVector.klass, "each", VALUEFUNC(_wrap_BWTimeDequeVector_each), -1);
  rb_define_method(SwigClassBWTimeDequeVector.klass, "select", VALUEFUNC(_wrap_BWTimeDequeVector_select), -1);
  rb_define_method(SwigClassBWTimeDequeVector.klass, "reject!", VALUEFUNC(_wrap_BWTimeDequeVector_rejectN___), -1);
  rb_define_alias(SwigClassBWTimeDequeVector.klass, "delete_if", "reject!");
  rb_define_method(SwigClassBWTimeDequeVector.klass, "delete_at", VALUEFUNC(_wrap_BWTimeDequeVector_delete_at), -1);
  rb_define_method(SwigClassBWTimeDequeVector.klass, "__delete2__", VALUEFUNC(_wrap_BWTimeDequeVector___delete2__), -1);
  rb_define_method(SwigClassBWTimeDequeVector.klass, "pop", VALUEFUNC(_wrap_BWTimeDequeVector_pop), -1);
  rb_define_method(SwigClassBWTimeDequeVector.klass, "push", VALUEFUNC(_wrap_BWTimeDequeVector_push), -1);
  rb_define_alias(SwigClassBWTimeDequeVector.klass, "<<", "push");
  rb_define_method(SwigClassBWTimeDequeVector.klass, "reject", VALUEFUNC(_wrap_BWTimeDequeVector_reject), -1);
  rb_define_method(SwigClassBWTimeDequeVector.klass, "at", VALUEFUNC(_wrap_BWTimeDequeVector_at), -1);
  rb_define_method(SwigClassBWTimeDequeVector.klass, "[]", VALUEFUNC(_wrap_BWTimeDequeVector___getitem__), -1);
  rb_define_method(SwigClassBWTimeDequeVector.klass, "[]=", VALUEFUNC(_wrap_BWTimeDequeVector___setitem__), -1);
  rb_define_method(SwigClassBWTimeDequeVector.klass, "shift", VALUEFUNC(_wrap_BWTimeDequeVector_shift), -1);
  rb_define_method(SwigClassBWTimeDequeVector.klass, "unshift", VALUEFUNC(_wrap_BWTimeDequeVector_unshift), -1);
  rb_define_method(SwigClassBWTimeDequeVector.klass, "empty?", VALUEFUNC(_wrap_BWTimeDequeVector_emptyq___), -1);
  rb_define_method(SwigClassBWTimeDequeVector.klass, "size", VALUEFUNC(_wrap_BWTimeDequeVector_size), -1);
  rb_define_method(SwigClassBWTimeDequeVector.klass, "clear", VALUEFUNC(_wrap_BWTimeDequeVector_clear), -1);
  rb_define_method(SwigClassBWTimeDequeVector.klass, "swap", VALUEFUNC(_wrap_BWTimeDequeVector_swap), -1);
  rb_define_method(SwigClassBWTimeDequeVector.klass, "get_allocator", VALUEFUNC(_wrap_BWTimeDequeVector_get_allocator), -1);
  rb_define_method(SwigClassBWTimeDequeVector.klass, "begin", VALUEFUNC(_wrap_BWTimeDequeVector_begin), -1);
  rb_define_method(SwigClassBWTimeDequeVector.klass, "end", VALUEFUNC(_wrap_BWTimeDequeVector_end), -1);
  rb_define_method(SwigClassBWTimeDequeVector.klass, "rbegin", VALUEFUNC(_wrap_BWTimeDequeVector_rbegin), -1);
  rb_define_method(SwigClassBWTimeDequeVector.klass, "rend", VALUEFUNC(_wrap_BWTimeDequeVector_rend), -1);
  rb_define_method(SwigClassBWTimeDequeVector.klass, "erase", VALUEFUNC(_wrap_BWTimeDequeVector_erase), -1);
  rb_define_method(SwigClassBWTimeDequeVector.klass, "front", VALUEFUNC(_wrap_BWTimeDequeVector_front), -1);
  rb_define_method(SwigClassBWTimeDequeVector.klass, "back", VALUEFUNC(_wrap_BWTimeDequeVector_back), -1);
  rb_define_method(SwigClassBWTimeDequeVector.klass, "assign", VALUEFUNC(_wrap_BWTimeDequeVector_assign), -1);
  rb_define_method(SwigClassBWTimeDequeVector.klass, "resize", VALUEFUNC(_wrap_BWTimeDequeVector_resize), -1);
  rb_define_method(SwigClassBWTimeDequeVector.klass, "insert", VALUEFUNC(_wrap_BWTimeDequeVector_insert), -1);
  rb_define_method(SwigClassBWTimeDequeVector.klass, "reserve", VALUEFUNC(_wrap_BWTimeDequeVector_reserve), -1);
  rb_define_method(SwigClassBWTimeDequeVector.klass, "capacity", VALUEFUNC(_wrap_BWTimeDequeVector_capacity), -1);
  SwigClassBWTimeDequeVector.mark = 0;
  SwigClassBWTimeDequeVector.destroy = (void (*)(void *)) free_std_vector_Sl_std_deque_Sl_si_taxi_BWTime_Sg__Sg_;
  SwigClassBWTimeDequeVector.trackObjects = 0;
  
  SwigClassBWPaxDequeVector.klass = rb_define_class_under(mSiTaxi, "BWPaxDequeVector", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_std__allocatorT_std__dequeT_si_taxi__BWPax_std__allocatorT_si_taxi__BWPax_t_t_t_t, (void *) &SwigClassBWPaxDequeVector);
  rb_include_module(SwigClassBWPaxDequeVector.klass, rb_eval_string("Enumerable"));
  rb_define_alloc_func(SwigClassBWPaxDequeVector.klass, _wrap_BWPaxDequeVector_allocate);
  rb_define_method(SwigClassBWPaxDequeVector.klass, "initialize", VALUEFUNC(_wrap_new_BWPaxDequeVector), -1);
  rb_define_method(SwigClassBWPaxDequeVector.klass, "dup", VALUEFUNC(_wrap_BWPaxDequeVector_dup), -1);
  rb_define_method(SwigClassBWPaxDequeVector.klass, "inspect", VALUEFUNC(_wrap_BWPaxDequeVector_inspect), -1);
  rb_define_method(SwigClassBWPaxDequeVector.klass, "to_a", VALUEFUNC(_wrap_BWPaxDequeVector_to_a), -1);
  rb_define_method(SwigClassBWPaxDequeVector.klass, "to_s", VALUEFUNC(_wrap_BWPaxDequeVector_to_s), -1);
  rb_define_method(SwigClassBWPaxDequeVector.klass, "slice", VALUEFUNC(_wrap_BWPaxDequeVector_slice), -1);
  rb_define_method(SwigClassBWPaxDequeVector.klass, "each", VALUEFUNC(_wrap_BWPaxDequeVector_each), -1);
  rb_define_method(SwigClassBWPaxDequeVector.klass, "select", VALUEFUNC(_wrap_BWPaxDequeVector_select), -1);
  rb_define_method(SwigClassBWPaxDequeVector.klass, "reject!", VALUEFUNC(_wrap_BWPaxDequeVector_rejectN___), -1);
  rb_define_alias(SwigClassBWPaxDequeVector.klass, "delete_if", "reject!");
  rb_define_method(SwigClassBWPaxDequeVector.klass, "delete_at", VALUEFUNC(_wrap_BWPaxDequeVector_delete_at), -1);
  rb_define_method(SwigClassBWPaxDequeVector.klass, "__delete2__", VALUEFUNC(_wrap_BWPaxDequeVector___delete2__), -1);
  rb_define_method(SwigClassBWPaxDequeVector.klass, "pop", VALUEFUNC(_wrap_BWPaxDequeVector_pop), -1);
  rb_define_method(SwigClassBWPaxDequeVector.klass, "push", VALUEFUNC(_wrap_BWPaxDequeVector_push), -1);
  rb_define_alias(SwigClassBWPaxDequeVector.klass, "<<", "push");
  rb_define_method(SwigClassBWPaxDequeVector.klass, "reject", VALUEFUNC(_wrap_BWPaxDequeVector_reject), -1);
  rb_define_method(SwigClassBWPaxDequeVector.klass, "at", VALUEFUNC(_wrap_BWPaxDequeVector_at), -1);
  rb_define_method(SwigClassBWPaxDequeVector.klass, "[]", VALUEFUNC(_wrap_BWPaxDequeVector___getitem__), -1);
  rb_define_method(SwigClassBWPaxDequeVector.klass, "[]=", VALUEFUNC(_wrap_BWPaxDequeVector___setitem__), -1);
  rb_define_method(SwigClassBWPaxDequeVector.klass, "shift", VALUEFUNC(_wrap_BWPaxDequeVector_shift), -1);
  rb_define_method(SwigClassBWPaxDequeVector.klass, "unshift", VALUEFUNC(_wrap_BWPaxDequeVector_unshift), -1);
  rb_define_method(SwigClassBWPaxDequeVector.klass, "empty?", VALUEFUNC(_wrap_BWPaxDequeVector_emptyq___), -1);
  rb_define_method(SwigClassBWPaxDequeVector.klass, "size", VALUEFUNC(_wrap_BWPaxDequeVector_size), -1);
  rb_define_method(SwigClassBWPaxDequeVector.klass, "clear", VALUEFUNC(_wrap_BWPaxDequeVector_clear), -1);
  rb_define_method(SwigClassBWPaxDequeVector.klass, "swap", VALUEFUNC(_wrap_BWPaxDequeVector_swap), -1);
  rb_define_method(SwigClassBWPaxDequeVector.klass, "get_allocator", VALUEFUNC(_wrap_BWPaxDequeVector_get_allocator), -1);
  rb_define_method(SwigClassBWPaxDequeVector.klass, "begin", VALUEFUNC(_wrap_BWPaxDequeVector_begin), -1);
  rb_define_method(SwigClassBWPaxDequeVector.klass, "end", VALUEFUNC(_wrap_BWPaxDequeVector_end), -1);
  rb_define_method(SwigClassBWPaxDequeVector.klass, "rbegin", VALUEFUNC(_wrap_BWPaxDequeVector_rbegin), -1);
  rb_define_method(SwigClassBWPaxDequeVector.klass, "rend", VALUEFUNC(_wrap_BWPaxDequeVector_rend), -1);
  rb_define_method(SwigClassBWPaxDequeVector.klass, "erase", VALUEFUNC(_wrap_BWPaxDequeVector_erase), -1);
  rb_define_method(SwigClassBWPaxDequeVector.klass, "front", VALUEFUNC(_wrap_BWPaxDequeVector_front), -1);
  rb_define_method(SwigClassBWPaxDequeVector.klass, "back", VALUEFUNC(_wrap_BWPaxDequeVector_back), -1);
  rb_define_method(SwigClassBWPaxDequeVector.klass, "assign", VALUEFUNC(_wrap_BWPaxDequeVector_assign), -1);
  rb_define_method(SwigClassBWPaxDequeVector.klass, "resize", VALUEFUNC(_wrap_BWPaxDequeVector_resize), -1);
  rb_define_method(SwigClassBWPaxDequeVector.klass, "insert", VALUEFUNC(_wrap_BWPaxDequeVector_insert), -1);
  rb_define_method(SwigClassBWPaxDequeVector.klass, "reserve", VALUEFUNC(_wrap_BWPaxDequeVector_reserve), -1);
  rb_define_method(SwigClassBWPaxDequeVector.klass, "capacity", VALUEFUNC(_wrap_BWPaxDequeVector_capacity), -1);
  SwigClassBWPaxDequeVector.mark = 0;
  SwigClassBWPaxDequeVector.destroy = (void (*)(void *)) free_std_vector_Sl_std_deque_Sl_si_taxi_BWPax_Sg__Sg_;
  SwigClassBWPaxDequeVector.trackObjects = 0;
  
  SwigClassMDPState.klass = rb_define_class_under(mSiTaxi, "MDPState", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_si_taxi__MDPState, (void *) &SwigClassMDPState);
  rb_define_alloc_func(SwigClassMDPState.klass, _wrap_MDPState_allocate);
  rb_define_method(SwigClassMDPState.klass, "initialize", VALUEFUNC(_wrap_new_MDPState), -1);
  SwigClassMDPState.mark = 0;
  SwigClassMDPState.destroy = (void (*)(void *)) free_si_taxi_MDPState;
  SwigClassMDPState.trackObjects = 0;
  
  SwigClassMDPSim.klass = rb_define_class_under(mSiTaxi, "MDPSim", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_si_taxi__MDPSim, (void *) &SwigClassMDPSim);
  rb_define_alloc_func(SwigClassMDPSim.klass, _wrap_MDPSim_allocate);
  rb_define_method(SwigClassMDPSim.klass, "initialize", VALUEFUNC(_wrap_new_MDPSim), -1);
  rb_define_method(SwigClassMDPSim.klass, "now=", VALUEFUNC(_wrap_MDPSim_now_set), -1);
  rb_define_method(SwigClassMDPSim.klass, "now", VALUEFUNC(_wrap_MDPSim_now_get), -1);
  rb_define_method(SwigClassMDPSim.klass, "trip_time=", VALUEFUNC(_wrap_MDPSim_trip_time_set), -1);
  rb_define_method(SwigClassMDPSim.klass, "trip_time", VALUEFUNC(_wrap_MDPSim_trip_time_get), -1);
  rb_define_method(SwigClassMDPSim.klass, "queue=", VALUEFUNC(_wrap_MDPSim_queue_set), -1);
  rb_define_method(SwigClassMDPSim.klass, "queue", VALUEFUNC(_wrap_MDPSim_queue_get), -1);
  rb_define_method(SwigClassMDPSim.klass, "inbound=", VALUEFUNC(_wrap_MDPSim_inbound_set), -1);
  rb_define_method(SwigClassMDPSim.klass, "inbound", VALUEFUNC(_wrap_MDPSim_inbound_get), -1);
  rb_define_method(SwigClassMDPSim.klass, "available=", VALUEFUNC(_wrap_MDPSim_available_set), -1);
  rb_define_method(SwigClassMDPSim.klass, "available", VALUEFUNC(_wrap_MDPSim_available_get), -1);
  rb_define_method(SwigClassMDPSim.klass, "idle=", VALUEFUNC(_wrap_MDPSim_idle_set), -1);
  rb_define_method(SwigClassMDPSim.klass, "idle", VALUEFUNC(_wrap_MDPSim_idle_get), -1);
  rb_define_method(SwigClassMDPSim.klass, "ones=", VALUEFUNC(_wrap_MDPSim_ones_set), -1);
  rb_define_method(SwigClassMDPSim.klass, "ones", VALUEFUNC(_wrap_MDPSim_ones_get), -1);
  rb_define_method(SwigClassMDPSim.klass, "num_stations", VALUEFUNC(_wrap_MDPSim_num_stations), -1);
  rb_define_method(SwigClassMDPSim.klass, "num_vehicles", VALUEFUNC(_wrap_MDPSim_num_vehicles), -1);
  rb_define_method(SwigClassMDPSim.klass, "add_vehicles_in_turn", VALUEFUNC(_wrap_MDPSim_add_vehicles_in_turn), -1);
  rb_define_method(SwigClassMDPSim.klass, "init", VALUEFUNC(_wrap_MDPSim_init), -1);
  rb_define_method(SwigClassMDPSim.klass, "tick", VALUEFUNC(_wrap_MDPSim_tick), -1);
  rb_define_method(SwigClassMDPSim.klass, "count_idle_by", VALUEFUNC(_wrap_MDPSim_count_idle_by), -1);
  rb_define_method(SwigClassMDPSim.klass, "move", VALUEFUNC(_wrap_MDPSim_move), -1);
  SwigClassMDPSim.mark = 0;
  SwigClassMDPSim.destroy = (void (*)(void *)) free_si_taxi_MDPSim;
  SwigClassMDPSim.trackObjects = 0;
}

